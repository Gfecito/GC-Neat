(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1587208,      25847]
NotebookOptionsPosition[   1579664,      25711]
NotebookOutlinePosition[   1580134,      25729]
CellTagsIndexPosition[   1580091,      25726]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Stereo Training Notebook", "Title",
 InitializationCell->True,
 CellChangeTimes->{{3.835450935470186*^9, 3.835450939280341*^9}, {
  3.836311271773788*^9, 3.836311280649686*^9}, {3.836315135213154*^9, 
  3.83631513531763*^9}, {3.836316042167036*^9, 3.836316044398059*^9}, {
  3.8363193022429743`*^9, 3.836319308197398*^9}, {3.836328683855022*^9, 
  3.836328685026132*^9}, {3.8363423610193863`*^9, 3.836342362046549*^9}, {
  3.836348919455421*^9, 3.836348940423295*^9}, {3.837089296070416*^9, 
  3.8370892993501787`*^9}, {3.837094526978147*^9, 3.837094528526854*^9}, {
  3.846670492883238*^9, 3.846670493760578*^9}, {3.87450693426962*^9, 
  3.8745069357974377`*^9}},ExpressionUUID->"99f5c601-8d2c-4e7f-baeb-\
bf883642b6a9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ec2", " ", "=", " ", 
   RowBox[{"(", 
    RowBox[{"$Username", "==", "\"\<gomezmas\>\""}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dataDir", " ", "=", " ", 
  "\"\</Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini\>\""}], "\
\[IndentingNewLine]", 
 RowBox[{"If", "[", 
  RowBox[{"ec2", ",", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
    "dataDir", " ", "=", " ", "\"\</u/gomezmas/IFT6145/SceneFlowMini\>\""}], 
    "\[IndentingNewLine]", ")"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "dataDir", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879609939610304*^9, 3.879609950804432*^9}, {
   3.8796099819532347`*^9, 3.879610091440324*^9}, {3.879610856817875*^9, 
   3.879610895704763*^9}, 3.880401362256366*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"b9585164-08e1-4716-b822-e1cad80cff9c"],

Cell[BoxData["\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/\
SceneFlowMini\"\>"], "Output",
 CellChangeTimes->{3.87969656293963*^9, 3.87969669861257*^9, 
  3.880400255153895*^9, 3.8804004795609207`*^9, 3.88040080167305*^9, 
  3.880402979275214*^9, 3.8804091378751497`*^9, 3.880446060609453*^9, 
  3.880446109436071*^9, 3.880446194533266*^9, 3.880446305905672*^9, 
  3.880473751562214*^9, 3.88047379890021*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"53ac1fb3-166e-48ce-a038-43335802a59e"],

Cell[BoxData["\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/\
SceneFlowMini\"\>"], "Print",
 CellChangeTimes->{3.879696562943578*^9, 3.879696698623948*^9, 
  3.8804002551599627`*^9, 3.880400479565604*^9, 3.880400801677594*^9, 
  3.880402979279776*^9, 3.880409137879459*^9, 3.880446060616013*^9, 
  3.880446109440859*^9, 3.880446194537363*^9, 3.880446305912837*^9, 
  3.880473751565778*^9, 3.880473798904974*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[1]:=",ExpressionUUID->"7615fac6-af44-4d77-aca8-dcbc5a7a2e09"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.8160152004445143`*^9, 3.816015202188002*^9}, {
   3.8370754551313553`*^9, 3.837075459656554*^9}, {3.8432130651977863`*^9, 
   3.843213071990755*^9}, 3.87933464164567*^9, {3.87933710753347*^9, 
   3.879337116671365*^9}},ExpressionUUID->"25971ac1-6f98-42a4-9aaa-\
cd3d2198b923"],

Cell[CellGroupData[{

Cell["Dataset Functions", "Subsection",
 InitializationCell->True,
 CellChangeTimes->{{3.8160152955083723`*^9, 3.816015296817605*^9}, {
  3.843041744062804*^9, 3.84304175955927*^9}, {3.879337039259486*^9, 
  3.879337043192628*^9}},ExpressionUUID->"a4f3daa2-16c7-4e19-92ef-\
a5166287ce88"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$HistoryLength", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exportMiniSceneFlow", "[", 
   RowBox[{"dir_", ",", "i_", ",", "data_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"idx", ",", "rsLeft", ",", "rsRight", ",", "rsDisp"}], "}"}], 
    ",", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"idx", "=", 
       RowBox[{"IntegerString", "[", 
        RowBox[{"i", ",", "10", ",", "6"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rsLeft", "=", 
       RowBox[{"ImageResize", "[", 
        RowBox[{
         RowBox[{"data", "[", "\"\<iLeft\>\"", "]"}], ",", 
         RowBox[{"Scaled", "[", 
          RowBox[{"1", "/", "8"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rsRight", "=", 
       RowBox[{"ImageResize", "[", 
        RowBox[{
         RowBox[{"data", "[", "\"\<iRight\>\"", "]"}], ",", 
         RowBox[{"Scaled", "[", 
          RowBox[{"1", "/", "8"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rsDisp", "=", 
       RowBox[{
        RowBox[{"ImageResize", "[", 
         RowBox[{
          RowBox[{"data", "[", "\"\<dispLeft\>\"", "]"}], ",", 
          RowBox[{"Scaled", "[", 
           RowBox[{"1", "/", "8"}], "]"}], ",", 
          RowBox[{"Resampling", "->", "\"\<Nearest\>\""}]}], "]"}], "/", 
        "8."}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{
        "dir", "<>", "\"\<left/\>\"", "<>", "idx", "<>", "\"\<.png\>\""}], 
        ",", "rsLeft"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{
        "dir", "<>", "\"\<right/\>\"", "<>", "idx", "<>", "\"\<.png\>\""}], 
        ",", "rsRight"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{
        "dir", "<>", "\"\<disp/\>\"", "<>", "idx", "<>", "\"\<.png\>\""}], 
        ",", 
        RowBox[{"rsDisp", "/", "64."}]}], "]"}], ";"}], "\[IndentingNewLine]",
      ")"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fixDispPng", "[", "img_", "]"}], ":=", 
  RowBox[{"Image", "[", 
   RowBox[{
    RowBox[{"ImageData", "[", "img", "]"}], "*", "64"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.815929920868321*^9, 3.815929928509542*^9}, {
   3.819452769490103*^9, 3.819452796575474*^9}, {3.842706530265861*^9, 
   3.842706536104294*^9}, {3.8430417410708857`*^9, 3.84304174153776*^9}, {
   3.843061347303451*^9, 3.8430613486060658`*^9}, {3.843121979140787*^9, 
   3.843121989796793*^9}, {3.843122040520425*^9, 3.8431220836527967`*^9}, {
   3.8431274213634167`*^9, 3.843127422154427*^9}, {3.843213931715366*^9, 
   3.843213959499748*^9}, {3.84323676777565*^9, 3.843236767928423*^9}, {
   3.8453901635711927`*^9, 3.845390166872773*^9}, {3.853593538469584*^9, 
   3.853593538743804*^9}, {3.860573987856402*^9, 3.860573991367454*^9}, 
   3.860574028788681*^9, 3.860574231001336*^9, {3.86068271307101*^9, 
   3.8606827277574663`*^9}, {3.860683040283931*^9, 3.860683045435988*^9}, {
   3.86385781531574*^9, 3.86385782908958*^9}, {3.8638596677075787`*^9, 
   3.863859675084292*^9}, {3.863878327246187*^9, 3.863878339926852*^9}, {
   3.8793367549170856`*^9, 3.8793367551179132`*^9}, {3.879336995935233*^9, 
   3.879337030359498*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"1d6510ca-0df7-4a3d-bee2-2789b3b811c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getNamesSceneFlowMini", "[", "base_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "type", ",", "sequence", ",", "leftNames", ",", "rightNames", ",", 
       "dispNames"}], "}"}], ",", 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"leftNames", "=", 
        RowBox[{"FileNames", "[", 
         RowBox[{"base", "<>", "\"\</left/*.png\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"rightNames", "=", 
        RowBox[{"FileNames", "[", 
         RowBox[{"base", "<>", "\"\</right/*.png\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dispNames", "=", 
        RowBox[{"FileNames", "[", 
         RowBox[{"base", "<>", "\"\</disp/*.png\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"leftNames", ",", "rightNames", ",", "dispNames"}], "}"}], 
        "]"}]}], "\[IndentingNewLine]", ")"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879337488224215*^9, 3.879337541755849*^9}, {
  3.87933758325172*^9, 3.879337583573887*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"af207e7c-1414-4755-8284-98286455ee15"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getDataSceneFlowMini", "[", 
    RowBox[{"{", 
     RowBox[{"leftName_", ",", "rightName_", ",", "dispName_"}], "}"}], "]"}],
    ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"iLeft", ",", "iRight", ",", "dispLeft"}], "}"}], ",", 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"iLeft", "=", 
        RowBox[{
         RowBox[{"ImagePartition", "[", 
          RowBox[{
           RowBox[{"Import", "[", "leftName", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"120", ",", "68"}], "}"}]}], "]"}], "//", "Flatten"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"iRight", "=", 
        RowBox[{
         RowBox[{"ImagePartition", "[", 
          RowBox[{
           RowBox[{"Import", "[", "rightName", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"120", ",", "68"}], "}"}]}], "]"}], "//", "Flatten"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"dispLeft", ":=", 
        RowBox[{
         RowBox[{"ImagePartition", "[", 
          RowBox[{
           RowBox[{"fixDispPng", "[", 
            RowBox[{"Import", "[", "dispName", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"120", ",", "68"}], "}"}]}], "]"}], "//", "Flatten"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"<|", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<dims\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"120", ",", "68"}], "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<leftName\>\"", "->", "leftName"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<rightName\>\"", "->", "rightName"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<dispName\>\"", "->", "dispName"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<iLeft\>\"", "->", "#1"}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<iRight\>\"", "->", "#2"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<dispLeft\>\"", "->", "#3"}]}], "\[IndentingNewLine]",
            "|>"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"iLeft", ",", "iRight", ",", "dispLeft"}], "}"}]}], "]"}]}],
       "\[IndentingNewLine]", ")"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879337625592011*^9, 3.8793376484850273`*^9}, {
  3.8793407115326967`*^9, 3.879340757468835*^9}, {3.8793408592249804`*^9, 
  3.8793409060181932`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"ed8c6e29-6197-4ea6-973d-85ba6b456b0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph Constructs", "Subsection",
 InitializationCell->True,
 CellChangeTimes->{{3.8160152955083723`*^9, 3.816015296817605*^9}, {
  3.843041744062804*^9, 3.84304175955927*^9}, {3.879337120781411*^9, 
  3.8793371209153013`*^9}},ExpressionUUID->"c0171cd1-d5e1-491b-85de-\
8149cc85f887"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"argmaxLayer", "[", "]"}], ":=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{"FunctionLayer", "[", 
     RowBox[{
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"sorted", ",", "position"}], "}"}], ",", 
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sorted", "=", 
           RowBox[{"Ordering", "[", 
            RowBox[{"-", "#Input"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"position", " ", "=", " ", 
           RowBox[{"sorted", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"<|", 
           RowBox[{"\"\<Output\>\"", "->", "position"}], "|>"}]}], 
         "\[IndentingNewLine]", ")"}]}], "]"}], "&"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"multiPortNest", "[", 
   RowBox[{"net_", ",", "nb_", ",", "inports_", ",", "outports_"}], "]"}], ":=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{"net", ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "nb"}], "}"}]}], "]"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"NetPort", "[", 
            RowBox[{"i", ",", "#2"}], "]"}], "->", 
           RowBox[{"NetPort", "[", 
            RowBox[{
             RowBox[{"i", "+", "1"}], ",", "#1"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"nb", "-", "1"}]}], "}"}]}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{"inports", ",", "outports"}], "}"}]}], "]"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879337017169272*^9, 3.8793370186948*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"6a2f54aa-14cf-4cf0-bb6f-affbcedaba7d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dataset", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.8793348217617073`*^9, 
  3.879334833380865*^9}},ExpressionUUID->"52c2a673-9312-4a4b-a7d1-\
55c1190a1687"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "Filenames", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"fn", "=", 
     RowBox[{"getNamesSceneFlowMini", "[", "dataDir", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"fn", "//", "Dimensions"}], "\[IndentingNewLine]", 
   RowBox[{"fn", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879337547548436*^9, 3.8793376055703173`*^9}, 
   3.8793407675045147`*^9, 3.87934099207889*^9, 3.879355384263507*^9, {
   3.8793554207071123`*^9, 3.879355424389885*^9}, {3.87935561392476*^9, 
   3.8793556177702913`*^9}, {3.879356388475212*^9, 3.879356391250135*^9}, {
   3.879609874535433*^9, 3.879609875499783*^9}, {3.879610107100375*^9, 
   3.879610109013947*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"03a4848f-0df1-43b0-bd4e-6f5d3af09d82"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"44", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.8796965631410027`*^9, 3.879696698749753*^9, 
  3.880400255268917*^9, 3.880400479730948*^9, 3.880400801880424*^9, 
  3.880402979458269*^9, 3.8804091380788517`*^9, 3.8804460606618023`*^9, 
  3.880446109564839*^9, 3.880446194613782*^9, 3.8804463060484743`*^9, 
  3.880473751751998*^9, 3.880473798989038*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"97c6d52e-bf5e-40a3-9cfa-3ba70f65a5ff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/\
left/000.png\"\>", 
   ",", "\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/\
right/000.png\"\>", 
   ",", "\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/\
disp/000.png\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8796965631410027`*^9, 3.879696698749753*^9, 
  3.880400255268917*^9, 3.880400479730948*^9, 3.880400801880424*^9, 
  3.880402979458269*^9, 3.8804091380788517`*^9, 3.8804460606618023`*^9, 
  3.880446109564839*^9, 3.880446194613782*^9, 3.8804463060484743`*^9, 
  3.880473751751998*^9, 3.880473798991908*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"4a4bcd1d-bbf1-4480-9df7-84556a545531"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Import", " ", "Dataset"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{"getDataSceneFlowMini", "/@", "fn"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"data", "//", "Dimensions"}], "\[IndentingNewLine]", 
   RowBox[{"data", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879337656307743*^9, 3.879337681057034*^9}, {
  3.879337733422739*^9, 3.879337767759392*^9}, {3.879340945734326*^9, 
  3.8793409531538067`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"f9fd1db4-9e4e-467d-a0ef-7762621114e0"],

Cell[BoxData[
 RowBox[{"{", "4400", "}"}]], "Output",
 CellChangeTimes->{3.879696571578309*^9, 3.879696707056135*^9, 
  3.88040026223449*^9, 3.880400485960232*^9, 3.880400807959613*^9, 
  3.880402985608597*^9, 3.8804091448130302`*^9, 3.88044606709949*^9, 
  3.880446116302993*^9, 3.880446202796804*^9, 3.8804463131210213`*^9, 
  3.880473758642303*^9, 3.8804738071766148`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"113b7446-ea5b-4605-9863-2535fb1205fe"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"dims\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"120", ",", "68"}], "}"}]}], ",", 
   RowBox[{"\<\"leftName\"\>", 
    "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/left/000.\
png\"\>"}], ",", 
   RowBox[{"\<\"rightName\"\>", 
    "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/right/000.\
png\"\>"}], ",", 
   RowBox[{"\<\"dispName\"\>", 
    "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/disp/000.\
png\"\>"}], ",", 
   RowBox[{"\<\"iLeft\"\>", "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
NMnn/OwDNof5mHVjqhX/B8xPmnw=
       "], {{0, 68.}, {120., 0}}, {0, 255},
       ColorFunction->RGBColor,
       ImageResolution->{72, 72}],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "RGB", Interleaving -> True, 
       MetaInformation -> <|
        "Exif" -> <|
          "ImageWidth" -> 1200, "ImageLength" -> 680, "XResolution" -> 72, 
           "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
           "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
           DateObject[{2022, 12, 6, 13, 38, 6.}, "Instant", "Gregorian", -5.],
            "TimeZoneOffset" -> -5|>, 
         "Comments" -> <|
          "Software" -> "Created with the Wolfram Language : www.wolfram.com",
            "Creation Time" -> 
           DateObject[{2022, 12, 6, 13, 38, 6.}, "Instant"]|>|>],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{120., 68.},
     PlotRange->{{0, 120.}, {0, 68.}}]}], ",", 
   RowBox[{"\<\"iRight\"\>", "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
j4mz32XgGKTe83Om2sM9Wjzfz97a7jbCTfz7GgX+Zngs1HOW+P5BflYr+d3t
tmClz8lxwB7A8dBFnnktaqhqKyW+ql9xlo+FTgt81eR1PR8r5BXUY400jv18
r0eng5fjX4yZXrfo8cRY8JjbBmr4q1779/RLf/u3f4Qff/QAf0vO/v3ffIKn
H97F2u2bmNnbw8TWPqY2D7HA7crGJo72t7G/vYWZlVX0LgQxTA2eIJ5L62tY
CK3y+SDGloLkaRCBjRBW1oNYCMxjYnYck+OdMLNHyNgja8iz+joVenl+Bzgu
W1od0JotqBCardKgqkYtnZ+xNiOCQ+zBHQbMDbgw3dOA7dlOHK6O4sXxAl7c
mMBobxPk1GTxuVo1cW22kWsaqGsV8Fm06Oe5H+X3TLBvthKfZpaPOPvdYW76
ievQCYZTnTYYqR8t4j08LvFcD/eFxxogrqMtJqmnD3NsDBLLbvLdy/PdyjFk
0NL7kFt6bp3kk44aZCYOorw8591eC8eTCYfjHpZX8hw+aqxZXyNpsEYZ1mnh
rVTEura6XPJcddXEurYK5eVlxFaHmyMejHPcdFMH/OwXE8R8kuXjd5rpv3wS
f/8M/+2f/g1e/NF9PP3RS3z8w+f46U+e4OGzh1g8uIPJGzcxdnyMiRt3MbJ1
iOnNXeK4hrmVNWK2ifHFAKZXVrC2s4GNvQ1q8CpGyOER4j66EuLfVhHcXMPi
6jJrDjOzA2hvb0JDoxs2lwNmpwPjw63YnOvCUJcPXd0+6C1W+l4tjPRFeo5N
O7Hpa9HTU+nh57lVkJd6nvuDQCfurQ8iONKExcEGdJIfavZqK9836rejOCsV
r73+fcTFJ2Co1YndATuOhpzY4Fb00hF6JyfPk4m93ajVSPgGeh0Sjn7i5Cem
Jn7PKPvcqOgNHBch4cnYvwXnR6gFc9RWNzXDzuO0Eic794XHcpgNUKm0sPC5
Bp57B4/JxeeMWj0aObaNPM4W4rI57MG9BWoZ91v4/YKnAluhx3U1ogdXSFwW
W6X0uArV9NMGbhfZw28MOrDBnjLVZKGPFp7dyrxhY0+wkM9mSZP/6j/9EFv3
jojvc/z8T17iL/6Xj7Bz7ybmD+8gcO8upo8OMbm1R6+0Ss9E3ILrGF6iZ+L+
Anvr1v4mApshjAeC6CfePfPLGGDvHSXuc/z7dIBjgPq8GFrAzs4C5uZH0Nze
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

       "], {{0, 68.}, {120., 0}}, {0, 255},
       ColorFunction->RGBColor,
       ImageResolution->{72, 72}],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "RGB", Interleaving -> True, 
       MetaInformation -> <|
        "Exif" -> <|
          "ImageWidth" -> 1200, "ImageLength" -> 680, "XResolution" -> 72, 
           "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
           "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
           DateObject[{2022, 12, 6, 13, 37, 33.}, "Instant", 
             "Gregorian", -5.], "TimeZoneOffset" -> -5|>, 
         "Comments" -> <|
          "Software" -> "Created with the Wolfram Language : www.wolfram.com",
            "Creation Time" -> 
           DateObject[{2022, 12, 6, 13, 37, 33.}, "Instant"]|>|>],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{120., 68.},
     PlotRange->{{0, 120.}, {0, 68.}}]}], ",", 
   RowBox[{"\<\"dispLeft\"\>", "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzNnQ1YVPed74+u25CIOiqaUTE5SW0vu6Xb2ZZtaWs5v39qW9rYdpoYM0aS
nu66+7DP4+6dp9fnLncv97kHX+KoqMOLOCqao6JhE5pOWtrSxKYnKU1IgmY0
KAMiniiaQdGMigkK6P3+/+eARxze1Lb3mecTDKCM85nfy//Vh/7xvz/2L2Ml
SfofSfjPYz/5D/bTn/7kfz3+Kf4///yTpV/64lL+xXkgDxySHsviHJR+lBWR
vFnvST/MOiD9IGu/9P2semm+4F3p0ax3pO9lvS19N6tOyha8JX0n603p21l/
lL4lqJXmZf1B+mbWG9IjgtclJjAkyvq9pAhek7Kyfid9Q7BPmpv1qvR1wSvS
1wS/lb6aVSNlCn4jfUXwa+nLgl9J/yColjKyfil9SfAL6YuCl6W/7ycsefr5
ufQFwUvS3/XzM+nz/VRJ6f28KH2unxekv72J/5L+5hYqpbQheV76b6Niv1mv
vKcfUCLme8pBM6Ic0g8qh+RDyiH1kPK+ho90SHyujZYow/1s5/P8U7nlXvvc
cq9DueVeB7pN5HUot7fj1el0oNeR+hyJu73SZ4flXfld5YCxX3mP3lMiakQ5
SPAr2X51C+6Yf36wn5Po+f053XKvfW6dMdvn9nZi9k69jtbpnXjcI31mUPjX
92uIYW1ADJPt17AdI6YPahGl788czvVI3XKvfwq3ifLxaGP2bnodidM78TgU
x6UfK/tVxLBsx7Bq5Wien983bbhj86Ay2M8e+FzvttvbrbV3K2Zvx+tIYvR2
PFZIc0ZNvVSvHCDEsGHHsHHQytHcrfS+BRxz9wPjP5Hru5mTR+J2uHx8uzF7
u14vuC7Q3XA6Un+7pU/fRKLv2S8jhqUBMWzYfmXLMXd+UI8oiZ6L8/n+/+A2
UT6+nZgdbbxedF2ki5EL9HH8Mo3G6Wj83Q7vSui1JEcMIx+LHM39kg13DO/O
n53IdZ9fp1tnXu5zy73ejtvR1NrbjdlE45w+px9KH1J7V4ycXi/Uxeli9AJd
8AL8+nLSZeoOX6WhYvR2Xe6SHr4t9uvotcwDN2KY7BzN3ao2pjVmSvTc+p73
SNyOJm5H0kfdzXw8mNe+eD1jtFNHzVnqj9lKOPWBSJzi2cD4iD7K/Ih63D10
PXKNRuv0dv2NBD5eiuiOGOZ9NPJzg2YhHCNvn6J/VgbL9X1uB/ZTd9vtSGvt
3YjZgXn4fN55iufF6YIKr1E49YI6eOWPmvN03gMqz5HUfp3u1OlO6aG7Bu+1
xJwHOWJYsrw26Bb817wWD1bXB3PrzMt30+1QY587jdlE/TCvqSeMn1Bn3SWK
++A1AqfZwIDTTBA+R+fSQKiDOlwdVDB/DFteM4aNxOntetMleVAGfq8YL6mO
GDasHC38msCw6jHvs/lzGvi8hxoH/TncDpWPR9IbD+Z2YB/8cewyfeSF1zo4
5Y8a22slvLpB8CydTTpLBXPhN2UsW1EB3H/FRup0KGd3Ah8TH1ARw7Idw6qd
o/v8Sg2WY8T1KWOJ4nyuF+QLynBu+/yO1O3d6JHvRswO7IV5Pe0OXaXzBpx6
bK8yCMGrCwTO0BnpjMjRBRIcV4DUsWyVtIru1Odz0oNZRkShP3q+Re9q36OI
+UM67HmCjmpPEf9aIpy/X8xNE2LYcMSw6vDL0a1xMX9u581zCt7JygUtriQa
B/0p3Q7VR91pPk40dnX2S6flf6Hr2depIw1edTh1gyC8JgGtnfh7vjetl6Qr
cBySWIF7DCvIH8OG8zmYI85bxpvKGxqjt8xvU71nPh0K/ogazYXUQjkWnpxB
HTsR4yVpQAwjbhtkuKUG6yN6rg6pQ8G7V/lIO6/EzY+U4cZBieYc/9xuB/Oa
yO1g49a+fuOydJnOyvAaglMXCLTTefPfyJl7r1X20nXXddJS4FiT2Gh8cnZI
DwheM79Bf/B8k94OZtMB8/v0Pj1OTUEftcQX34y5mPp+Tx8D/8x6410x58Hn
NEQMY2wk+mjJ8tuuxxTkHwV/M+Wc3qH0xfBf0u1QfdTditlEffAZN7wG26k9
qZ0S1dRu6qberh66Jl+j69L1IeNroJc+jCDysTmP3iHk4yDycXwBNdNT1KIv
vpXgYjqlnlIG+7P6fB/Q91trD2THMNk5Gn4Pa3Cstitn9TNKh3m2P4YHGwcN
XL+9W26H6pGHysejjdnBxjfcZ0flWepQO26pq33xeaWyi7rNq9ST1EO9Ui8V
ZBfQSJxy9slz6XU/8nEQ+Tj+KB0k5GN9IR31Lh4cstguzc7qY7A//z3jgFg/
6o9h3crRwq9xawyPpFcezbzUYOPb4eJ2JG5H0kMN5nZgH/yR6yNK1Ctxf93q
/6YrsS66igePZe55sNfb6eR3xlx6gx6ht9Tv0H4Dtdb1GDX6n6SjrsW3IiXG
+ecl8r2f9lvzlmTPWapWjuZ+Dxt2DBtn+uvwSNw6Y/cv7Xak+XiwsaszXi9l
XqLBauon4Y+pS+6iK9lX6KrrKvV6/g8lctrHa/4sqo2j1rq+Swf8P6AGA7VW
XkRHjacSE05Mm9qmlEupCX9GH3yNuD+GJbvPUi2/h80GK4ZVK4aH6pUTuXXm
5TtxO1SPPFytvZ2YTZSHu83/vCnvnsk+Qx3epcJjJ3XSx0kf0yeeT6jLhVhW
/7M/ts7J/0btsZj4/1c9XydDJvqjH2OfCGqt7KXD/ieo2f/U8KiJ4X4H4vRr
SqoS0QbEMM/RuuX3OB236rB0w++djIP+Em5HGrODjVn7nF71WI55PW7PbqfT
6mnh92LoAnXGL9Fl+TJ97P5YuLykXRSv/ZmudsLrR/v8yMcR1FoZ+VhDPo6g
1spPUrMHnuQR4BqcRI774G7EeIlujmGRo+H3sHy4vw4P1ysPlZdH6jbRGGgk
45/h3I40Zoca2/Tl3I4AXg2Dx2+HmNc6HztHF2su0KWkS9Tp6qTL0U7xmp/v
wtekf6fXZORjDfk4grGPB/lYQz6O+KjZXHSDyDAYg3NSPalsk2Zl9cF/Nn9t
T0r/lLVOWoe//54svs/joGT30qrdRxuW38N0WMTwnbgdTa/853SbKGaHG9ec
jZyhs/EzdK6ug84nnRdrSnx96QIeF90X6VLsInUGLtGr4a+JOB84F9UcXHQr
2tA0+Yemzy1/XZqkRVmrtJVZO7TteM1/nYWxsNgHwOct+dyziGGMlX4VzqDD
EvyqFndac/+Sbkeaj4fyyvNua2YrnTHb6cPYaTqJR0fsLGHsSHEpLtaILwXg
NoxcHUZNrrxMnwRRl72oy+Yn9LL6MjXRosR4RoA8NHx/3HXp/2aFtM1ZL2vh
rHe0t7NOSCeyuqXurLXGvYoYL5kR5Q2T0WuRb9Bv6av0y/gXicfvEe2wcrdq
7l/K7Wjy8WDjmlZXK7XHY3TaBb/+k9Tmb6NT/lN0xoN4DnfQR5HzdEmHYxl5
Og9+a9Bb131CV6Lou4wrxOe1u70YR0W7qSnuu4E5AiJDw2voi9KLGOPUZh3X
WrM+1i5nrZbuUUq1qQr+fkoVpStvhb9NtZFv0utBot+Zc6km8hUKm1+ggX5v
t+aOxu2e7M+wiuw57E7dbohNYLcTswPHGn09i1lznE5UfkAn4yeozQO/3lN0
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
v1+isE1/u4n9P817m6A=
       "], {{0, 68.}, {120., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{120., 68.},
     PlotRange->{{0, 120.}, {0, 68.}}]}]}], "\[RightAssociation]"}]], "Output",\

 CellChangeTimes->{3.879696571578309*^9, 3.879696707056135*^9, 
  3.88040026223449*^9, 3.880400485960232*^9, 3.880400807959613*^9, 
  3.880402985608597*^9, 3.8804091448130302`*^9, 3.88044606709949*^9, 
  3.880446116302993*^9, 3.880446202796804*^9, 3.8804463131210213`*^9, 
  3.880473758642303*^9, 3.880473807179508*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"f043c189-0a71-4361-97d0-176e547a1e16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "Split", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"SeedRandom", "[", "1", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dataAll", "=", 
     RowBox[{"RandomSample", "[", "data", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dataTrain", "=", 
     RowBox[{"dataAll", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "3600"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dataValid", "=", 
     RowBox[{"dataAll", "[", 
      RowBox[{"[", 
       RowBox[{"3601", ";;", "4000"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dataTest", "=", 
     RowBox[{"dataAll", "[", 
      RowBox[{"[", 
       RowBox[{"4001", ";;", 
        RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"dataTrain", "//", "Dimensions"}], "\[IndentingNewLine]", 
   RowBox[{"dataValid", "//", "Dimensions"}], "\[IndentingNewLine]", 
   RowBox[{"dataTest", "//", "Dimensions"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879341055533939*^9, 3.879341155050599*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"7c1c9bee-91cd-451d-b708-debb8b687693"],

Cell[BoxData[
 RowBox[{"{", "3600", "}"}]], "Output",
 CellChangeTimes->{3.879696571663431*^9, 3.879696707216468*^9, 
  3.880400262391386*^9, 3.880400486015026*^9, 3.8804008080087633`*^9, 
  3.880402985661413*^9, 3.880409144860057*^9, 3.8804460672661333`*^9, 
  3.880446116340146*^9, 3.880446202887642*^9, 3.880446313165571*^9, 
  3.880473758682672*^9, 3.880473807270838*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"d5505e61-93e4-4469-9bf6-16fbddd53f74"],

Cell[BoxData[
 RowBox[{"{", "400", "}"}]], "Output",
 CellChangeTimes->{3.879696571663431*^9, 3.879696707216468*^9, 
  3.880400262391386*^9, 3.880400486015026*^9, 3.8804008080087633`*^9, 
  3.880402985661413*^9, 3.880409144860057*^9, 3.8804460672661333`*^9, 
  3.880446116340146*^9, 3.880446202887642*^9, 3.880446313165571*^9, 
  3.880473758682672*^9, 3.8804738072739153`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"1bddbd3b-62f3-4baa-974f-302f91e2117c"],

Cell[BoxData[
 RowBox[{"{", "400", "}"}]], "Output",
 CellChangeTimes->{3.879696571663431*^9, 3.879696707216468*^9, 
  3.880400262391386*^9, 3.880400486015026*^9, 3.8804008080087633`*^9, 
  3.880402985661413*^9, 3.880409144860057*^9, 3.8804460672661333`*^9, 
  3.880446116340146*^9, 3.880446202887642*^9, 3.880446313165571*^9, 
  3.880473758682672*^9, 3.880473807275758*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"647d08da-4b2c-4e40-a031-4c58267febdc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"$Username", " ", "==", "\"\<santi\>\""}], ",", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dataTrain", " ", "=", " ", 
      RowBox[{"dataTrain", "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", "10"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dataValid", " ", "=", " ", 
      RowBox[{"dataValid", "[", 
       RowBox[{"[", 
        RowBox[{"11", ";;", "20"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dataTest", " ", "=", " ", 
      RowBox[{"dataTest", "[", 
       RowBox[{"[", 
        RowBox[{"21", ";;", "30"}], "]"}], "]"}]}], ";"}], 
    "\[IndentingNewLine]", ")"}]}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879610678655016*^9, 3.8796107867726107`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"1c4db715-06d2-411a-981a-4b2c125dfdd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["GC-Net", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.87933744934305*^9, 3.879337453469391*^9}, {
  3.87934176495173*^9, 3.879341765749857*^9}, {3.8793433770728407`*^9, 
  3.879343377578836*^9}, {3.879348770537889*^9, 
  3.8793487722880898`*^9}},ExpressionUUID->"6b01d122-f81e-4f7f-91b3-\
759543bfefe7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"conv2d", "[", 
    RowBox[{"f_", ",", "k_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"k", "-", "1"}], ")"}], "/", "2"}]}], "}"}], ",", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"PaddingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"p", ",", "p"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"p", ",", "p"}], "}"}]}], "}"}], ",", 
          RowBox[{"Padding", "->", "\"\<Fixed\>\""}]}], "]"}], ",", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "k"}], "}"}]}], "]"}], ",", "Ramp"}], "}"}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"conv2d", "[", "f_", "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"PaddingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Padding", "->", "\"\<Fixed\>\""}]}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "Ramp"}], "}"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"conv3d", "[", 
    RowBox[{"f_", ",", "k_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"k", "-", "1"}], ")"}], "/", "2"}]}], "}"}], ",", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"PaddingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"p", ",", "p"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"p", ",", "p"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"p", ",", "p"}], "}"}]}], "}"}], ",", 
          RowBox[{"Padding", "->", "\"\<Fixed\>\""}]}], "]"}], ",", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "k", ",", "k"}], "}"}]}], "]"}], ",", "Ramp"}], 
       "}"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"conv3d", "[", "f_", "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"PaddingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Padding", "->", "\"\<Fixed\>\""}]}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3", ",", "3"}], "}"}]}], "]"}], ",", "Ramp"}], 
     "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"upconv3d", "[", "f_", "]"}], ":=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ResizeLayer", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Scaled", "[", "2", "]"}], ",", 
        RowBox[{"Scaled", "[", "2", "]"}], ",", 
        RowBox[{"Scaled", "[", "2", "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"PaddingLayer", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Padding", "->", "\"\<Fixed\>\""}]}], "]"}], ",", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"f", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3", ",", "3"}], "}"}]}], "]"}]}], "}"}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879341604102272*^9, 3.879341606923513*^9}, {
   3.8793416482042837`*^9, 3.8793417309464006`*^9}, {3.87934179688118*^9, 
   3.8793419019192047`*^9}, {3.879341963951344*^9, 3.879342312163074*^9}, {
   3.879342344437942*^9, 3.879342352231041*^9}, {3.879342419384132*^9, 
   3.87934253958526*^9}, {3.879342599153838*^9, 3.879342607487556*^9}, {
   3.879342854263424*^9, 3.879342945538087*^9}, {3.879343400089707*^9, 
   3.879343468337978*^9}, {3.879343501156274*^9, 3.879343602283358*^9}, 
   3.879611212915058*^9, {3.879684543855619*^9, 3.879684543993314*^9}, {
   3.880130389490707*^9, 3.880130485263706*^9}, {3.880398879162475*^9, 
   3.8803989980071507`*^9}, {3.88040273703226*^9, 3.8804027661733303`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"8be95233-07a5-4816-9998-0bbc85212751"],

Cell["\<\
End-to-End Learning of Geometry and Context for Deep Stereo Regression\
\[LineSeparator]https://arxiv.org/pdf/1703.04309.pdf\
\>", "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.879341209591909*^9, 3.879341224469219*^9}, {
  3.879348799444508*^9, 
  3.879348806472341*^9}},ExpressionUUID->"4b51f99a-ad1d-4010-85a2-\
c54f3ffa67b1"],

Cell["Cost volume.", "Text",
 CellChangeTimes->{{3.880398834194139*^9, 
  3.8803988378428593`*^9}},ExpressionUUID->"ce06d4f2-e720-4296-9e5d-\
e2764a39e192"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"replicateLeft", "[", "maxDisp_", "]"}], ":=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ReplicateLayer", "[", 
      RowBox[{"maxDisp", "+", "1"}], "]"}], ",", 
     RowBox[{"FunctionLayer", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}]}], "]"}], "&"}], 
      "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rotateRight", "[", 
   RowBox[{"{", 
    RowBox[{"channels_", ",", "rows_", ",", "cols_", ",", "maxDisp_"}], "}"}],
    "]"}], ":=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"Join", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"PaddingLayer", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"maxDisp", ",", "0"}], "}"}]}], "}"}], ",", 
         "\"\<Fixed\>\""}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"FunctionLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "All", ",", 
              RowBox[{
               RowBox[{"1", "-", "d", "+", "maxDisp"}], ";;", 
               RowBox[{"cols", "-", "d", "+", "maxDisp"}]}]}], "]"}], "]"}], 
           "}"}], "&"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"d", ",", "0", ",", "maxDisp"}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"CatenateLayer", "[", "]"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"FunctionLayer", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}]}], "]"}], 
         "&"}], "]"}], "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
      RowBox[{"1", "\[Rule]", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{"d", ",", 
          RowBox[{"{", 
           RowBox[{"d", ",", "2", ",", 
            RowBox[{"maxDisp", "+", "2"}]}], "}"}]}], "]"}], "\[Rule]", 
        RowBox[{
         RowBox[{"maxDisp", "+", "3"}], "\[Rule]", 
         RowBox[{
          RowBox[{"maxDisp", "+", "4"}], "\[Rule]", 
          RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}]}]}], 
     "\[IndentingNewLine]", "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"channels", ",", "rows", ",", "cols"}], "}"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"featuresToCostVolume", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"features_", ",", "height_", ",", "width_"}], "}"}], ",", 
     "maxDisp_"}], "]"}], ":=", 
   RowBox[{"NetGraph", "@", 
    RowBox[{"FunctionLayer", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"leftVol", ",", "rightVol"}], "}"}], ",", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"leftVol", "=", 
            RowBox[{
             RowBox[{"replicateLeft", "[", "maxDisp", "]"}], "[", "#fLeft", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"rightVol", "=", 
            RowBox[{
             RowBox[{"rotateRight", "[", 
              RowBox[{"{", 
               RowBox[{
               "features", ",", "height", ",", "width", ",", "maxDisp"}], 
               "}"}], "]"}], "[", "#fRight", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"<|", 
            RowBox[{"\"\<Output\>\"", "->", 
             RowBox[{"Join", "[", 
              RowBox[{"leftVol", ",", "rightVol"}], "]"}]}], "|>"}]}], 
          "\[IndentingNewLine]", ")"}]}], "]"}], "&"}], ",", " ", 
      RowBox[{"\"\<fLeft\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"features", ",", "height", ",", "width"}], "}"}]}], ",", 
      RowBox[{"\"\<fRight\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"features", ",", "height", ",", "width"}], "}"}]}]}], 
     "]"}]}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879349028849433*^9, 3.879349032753893*^9}, {
  3.879349167028551*^9, 3.8793492069756613`*^9}, {3.8793492486444607`*^9, 
  3.879349480559718*^9}, {3.8793495360791693`*^9, 3.8793495577600594`*^9}, {
  3.879352610637146*^9, 3.8793526133785973`*^9}, {3.8793530388251953`*^9, 
  3.879353038984963*^9}, {3.879353447604671*^9, 3.879353477484305*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"311b2187-2984-4f7b-9275-0a37879cbc8a"],

Cell["Unary features.", "Text",
 CellChangeTimes->{{3.880398793458456*^9, 
  3.880398819810465*^9}},ExpressionUUID->"1060a44f-27cf-4ba1-975b-\
d3bc8c6f1712"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureEncoder", "[", "features_", "]"}], ":=", 
  RowBox[{"NetInsertSharedArrays", "[", 
   RowBox[{
    RowBox[{"NetGraph", "@", 
     RowBox[{"FunctionLayer", "[", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "conv1", ",", "conv2", ",", "conv3", ",", "conv4", ",", "conv5", 
           ",", " ", "conv6", ",", " ", "conv7", ",", " ", "conv8", ",", " ", 
           "conv9", ",", " ", "conv10", ",", " ", "conv11", ",", " ", 
           "conv12", ",", " ", "conv13", ",", " ", "conv14", ",", " ", 
           "conv15", ",", " ", "conv16", ",", " ", "conv17", ",", "conv18", 
           ",", " ", "residual1", ",", " ", "residual2", ",", " ", 
           "residual3", ",", " ", "residual4", ",", "residual5", ",", 
           "residual6", ",", "residual7", ",", "residual8"}], "}"}], ",", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"conv1", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "#Input", "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"conv2", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv1", "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"conv3", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv2", "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"residual1", "=", 
            RowBox[{"conv1", "+", "conv3"}]}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"conv4", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "residual1", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"conv5", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv4", "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"residual2", "=", 
            RowBox[{"residual1", "+", "conv5"}]}], ";", "\[IndentingNewLine]",
            "\[IndentingNewLine]", 
           RowBox[{"conv6", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "residual2", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"conv7", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv6", "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"residual3", "=", 
            RowBox[{"residual2", "+", "conv7"}]}], ";", "\[IndentingNewLine]",
            "\[IndentingNewLine]", 
           RowBox[{"conv8", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "residual3", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"conv9", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv8", "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"residual4", "=", 
            RowBox[{"residual3", "+", "conv9"}]}], ";", "\[IndentingNewLine]",
            "\[IndentingNewLine]", 
           RowBox[{"conv10", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "residual4", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"conv11", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv10", "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"residual5", "=", 
            RowBox[{"residual4", "+", "conv11"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"conv12", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "residual5", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"conv13", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv12", "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"residual6", "=", 
            RowBox[{"residual5", "+", "conv13"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"conv14", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "residual6", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"conv15", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv14", "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"residual7", "=", 
            RowBox[{"residual6", "+", "conv15"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"conv16", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "residual7", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"conv17", "=", 
            RowBox[{
             RowBox[{"conv2d", "[", "features", "]"}], "[", "conv16", "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"residual8", "=", 
            RowBox[{"residual7", "+", "conv17"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"No", " ", "relu"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"conv18", " ", "=", 
            RowBox[{
             RowBox[{"ConvolutionLayer", "[", 
              RowBox[{"features", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "3"}], "}"}], ",", 
               RowBox[{"PaddingSize", "->", "1"}]}], "]"}], "[", "residual8", 
             "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"<|", 
            RowBox[{"\"\<Output\>\"", "->", "conv18"}], "|>"}]}], 
          "\[IndentingNewLine]", ")"}]}], "]"}], "&"}], "]"}]}], ",", 
    "\"\<featureNet\>\""}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879341604102272*^9, 3.879341606923513*^9}, {
   3.8793416482042837`*^9, 3.8793417309464006`*^9}, {3.87934179688118*^9, 
   3.8793419019192047`*^9}, {3.879341963951344*^9, 3.879342312163074*^9}, {
   3.879342344437942*^9, 3.879342352231041*^9}, {3.879342419384132*^9, 
   3.87934253958526*^9}, {3.879342599153838*^9, 3.879342607487556*^9}, {
   3.879342854263424*^9, 3.879342945538087*^9}, {3.879343400089707*^9, 
   3.879343468337978*^9}, {3.879343501156274*^9, 3.879343602283358*^9}, {
   3.8793489668687067`*^9, 3.879348967085766*^9}, {3.8793526189412317`*^9, 
   3.87935263388126*^9}, 3.879352891507119*^9, {3.879684605617556*^9, 
   3.8796846115942793`*^9}, {3.879696664922615*^9, 3.8796966649886017`*^9}, {
   3.8803986922123013`*^9, 3.8803987040251493`*^9}, 3.8803992041006193`*^9, {
   3.880399373242453*^9, 3.880399400616716*^9}, {3.880399435793213*^9, 
   3.8803995060658493`*^9}, {3.880399566247752*^9, 3.8803996182884693`*^9}, {
   3.880399653614341*^9, 3.880399655201597*^9}, {3.8803999440968924`*^9, 
   3.88039995765034*^9}, {3.88039999147721*^9, 3.880399995377173*^9}, {
   3.880400166054975*^9, 3.880400195651675*^9}, {3.8804003245220747`*^9, 
   3.880400336993403*^9}, {3.880400443291854*^9, 3.880400469014565*^9}, {
   3.880400567639038*^9, 3.880400569941486*^9}, {3.880408485344247*^9, 
   3.880408493556411*^9}, {3.880408570266678*^9, 3.8804087845421963`*^9}, {
   3.8804090940485907`*^9, 3.880409095074349*^9}, 3.880409181505241*^9, 
   3.8804092222790003`*^9, {3.880444442741788*^9, 3.8804444476792517`*^9}, 
   3.8804445526632957`*^9, {3.880446053404434*^9, 3.880446055508847*^9}, {
   3.880446101508526*^9, 3.8804461016053047`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"0458114c-9c5f-44e3-9e3e-c7e487fcfba9"],

Cell["Learning regularization.", "Text",
 CellChangeTimes->{{3.8803988049107943`*^9, 
  3.880398815291176*^9}},ExpressionUUID->"951b22c8-5aad-4ebe-a999-\
70ffd3bdec8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"stereoMatcher", "[", "features_", "]"}], ":=", 
  RowBox[{"NetGraph", "@", 
   RowBox[{"FunctionLayer", "[", 
    RowBox[{
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "conv19", ",", "conv20", ",", "conv21", ",", "conv22", ",", "conv23", 
         ",", "conv24", ",", "conv25", ",", "conv26", ",", "conv27", ",", 
         "conv28", ",", "conv29", ",", "conv30", ",", "conv31", ",", "conv32",
          ",", "conv33", ",", "conv34", ",", "conv35", ",", "conv36", ",", 
         "conv37", ",", "residual1", ",", " ", "residual2", ",", "residual3", 
         ",", "residual4", ",", "residual5", ",", "residual6", ",", 
         "residual7", ",", " ", "out"}], "}"}], ",", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"conv19", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", "features", "]"}], "[", "#Input", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"conv20", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", "features", "]"}], "[", "conv19", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"conv21", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "conv20", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"conv22", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "conv21", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"conv23", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "conv22", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"residual1", "=", 
          RowBox[{"conv21", "+", "conv23"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"conv24", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "residual1", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"conv25", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "conv24", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"conv26", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "conv25", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"residual2", "=", 
          RowBox[{"conv24", "+", "conv26"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"conv27", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "residual2", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"conv28", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "conv27", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"conv29", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "conv28", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"residual3", "=", 
          RowBox[{"conv27", "+", "conv29"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"conv30", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "4"}], "]"}], "[", "residual3", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"conv31", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "4"}], "]"}], "[", "conv30", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"conv32", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "4"}], "]"}], "[", "conv31", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"conv33", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "conv32", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"residual4", "=", 
          RowBox[{"conv33", "+", "conv29"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"conv34", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "residual4", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"residual5", "=", 
          RowBox[{"conv34", "+", "conv26"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"conv35", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", 
            RowBox[{"features", "*", "2"}], "]"}], "[", "residual5", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"residual6", "=", 
          RowBox[{"conv35", "+", "conv23"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"conv36", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", "features", "]"}], "[", "residual6", 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"residual7", "=", 
          RowBox[{"conv36", "+", "conv20"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"conv37", "=", 
          RowBox[{
           RowBox[{"conv3d", "[", "features", "]"}], "[", "residual7", 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
            "Transposed", " ", "convolutions", "\[IndentingNewLine]", 
             "conv33"}], "=", 
            RowBox[{
             RowBox[{"upconv3d", "[", 
              RowBox[{"features", "*", "2"}], "]"}], "[", "conv20", "]"}]}], 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"conv34", "=", 
            RowBox[{
             RowBox[{"upconv3d", "[", 
              RowBox[{"features", "*", "2"}], "]"}], "[", "conv21", "]"}]}], 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"conv35", "=", 
            RowBox[{
             RowBox[{"upconv3d", "[", 
              RowBox[{"features", "*", "2"}], "]"}], "[", "conv19", "]"}]}], 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"conv36", "=", 
            RowBox[{
             RowBox[{"upconv3d", "[", "features", "]"}], "[", "conv20", 
             "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"conv37", "=", 
            RowBox[{
             RowBox[{"conv3d", "[", "features", "]"}], "[", "conv21", "]"}]}],
            ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"out", "=", 
          RowBox[{
           RowBox[{"NetDelete", "[", 
            RowBox[{
             RowBox[{"conv3d", "[", "1", "]"}], ",", "\"\<3\>\""}], "]"}], 
           "[", "conv37", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"<|", 
          RowBox[{"\"\<Output\>\"", "->", "out"}], "|>"}]}], 
        "\[IndentingNewLine]", ")"}]}], "]"}], "&"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879353140520178*^9, 3.879353224026003*^9}, {
   3.879354431508976*^9, 3.8793544492554092`*^9}, {3.879684541353798*^9, 
   3.879684541740168*^9}, {3.880402138841156*^9, 3.8804023119709044`*^9}, {
   3.88040235408082*^9, 3.880402459967163*^9}, {3.880402501970334*^9, 
   3.8804025710912647`*^9}, {3.880402724276569*^9, 3.880402725109329*^9}, {
   3.880402782729267*^9, 3.880402972241643*^9}, 3.88047173099942*^9, {
   3.880471904274688*^9, 3.8804719568856916`*^9}, {3.880471989912366*^9, 
   3.880472049899775*^9}, {3.8804720839516163`*^9, 3.880472247423634*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"e57c5cde-5171-4d7d-926d-4a1c5262263c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableGCNet", "[", "params_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "featureEncoderLayer", ",", "features2CostLayer", ",", 
      "stereoMatchLayer"}], "}"}], ",", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"--", 
        RowBox[{"-", 
         RowBox[{"init", "--"}]}]}], "-"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"featureEncoderLayer", "=", 
       RowBox[{"featureEncoder", "[", 
        RowBox[{"params", "[", "\"\<features\>\"", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"features2CostLayer", "=", 
       RowBox[{"featuresToCostVolume", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"params", "[", "\"\<features\>\"", "]"}], ",", 
           RowBox[{"params", "[", "\"\<inputHeight\>\"", "]"}], ",", 
           RowBox[{"params", "[", "\"\<inputWidth\>\"", "]"}]}], "}"}], ",", 
         RowBox[{"params", "[", "\"\<maxDisp\>\"", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"stereoMatchLayer", "=", 
       RowBox[{"stereoMatcher", "[", 
        RowBox[{"params", "[", "\"\<features\>\"", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"--", 
         RowBox[{"-", 
          RowBox[{"forward", "--"}]}]}], "-"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"NetGraph", "@", 
       RowBox[{"FunctionLayer", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Block", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "fLeft", ",", "fRight", ",", "costVol", ",", "match", ",", 
              "probabilities", ",", "range", ",", "prediction", ",", "loss"}],
              "}"}], ",", 
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"fLeft", "=", 
               RowBox[{"featureEncoderLayer", "[", "#iLeft", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"fRight", "=", 
               RowBox[{"featureEncoderLayer", "[", "#iRight", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"costVol", "=", 
               RowBox[{"features2CostLayer", "[", 
                RowBox[{"<|", 
                 RowBox[{
                  RowBox[{"\"\<fLeft\>\"", "->", "fLeft"}], ",", 
                  RowBox[{"\"\<fRight\>\"", "->", "fRight"}]}], "|>"}], 
                "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"match", "=", 
               RowBox[{"stereoMatchLayer", "[", "costVol", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"probabilities", "=", 
               RowBox[{
                RowBox[{"SoftmaxLayer", "[", 
                 RowBox[{"-", "1"}], "]"}], "[", "match", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"range", "=", 
               RowBox[{
                RowBox[{"NetArrayLayer", "[", 
                 RowBox[{
                  RowBox[{"\"\<Array\>\"", "->", 
                   RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"params", "[", "\"\<maxDisp\>\"", "]"}]}], 
                    "]"}]}], ",", 
                  RowBox[{"LearningRateMultipliers", "->", "0"}]}], "]"}], 
                "[", "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"prediction", "=", 
               RowBox[{"probabilities", ".", "range"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"loss", "=", 
               RowBox[{
                RowBox[{"MeanAbsoluteLossLayer", "[", "]"}], "[", 
                RowBox[{"<|", 
                 RowBox[{
                  RowBox[{"\"\<Input\>\"", "->", "prediction"}], ",", 
                  RowBox[{"\"\<Target\>\"", "->", "#dispLeft"}]}], "|>"}], 
                "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"<|", 
               RowBox[{
                RowBox[{"\"\<Output\>\"", "->", "prediction"}], ",", 
                RowBox[{"\"\<Loss\>\"", "->", "loss"}]}], "|>"}]}], 
             "\[IndentingNewLine]", ")"}]}], "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<iLeft\>\"", "->", 
          RowBox[{"NetEncoder", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<Image\>\"", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"params", "[", "\"\<inputWidth\>\"", "]"}], ",", 
               RowBox[{"params", "[", "\"\<inputHeight\>\"", "]"}]}], "}"}], 
             ",", "\"\<RGB\>\""}], "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<iRight\>\"", "->", 
          RowBox[{"NetEncoder", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<Image\>\"", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"params", "[", "\"\<inputWidth\>\"", "]"}], ",", 
               RowBox[{"params", "[", "\"\<inputHeight\>\"", "]"}]}], "}"}], 
             ",", "\"\<RGB\>\""}], "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<dispLeft\>\"", "->", 
          RowBox[{"NetEncoder", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<Image\>\"", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"params", "[", "\"\<inputWidth\>\"", "]"}], ",", 
               RowBox[{"params", "[", "\"\<inputHeight\>\"", "]"}]}], "}"}], 
             ",", "\"\<Grayscale\>\""}], "}"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}]}], ")"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8642971560753317`*^9, 3.864297321668839*^9}, {
   3.864297426054166*^9, 3.8642975334218273`*^9}, {3.8642976894979362`*^9, 
   3.864297705303082*^9}, {3.864297782550582*^9, 3.8642978749095097`*^9}, {
   3.864297913244063*^9, 3.864297975081922*^9}, {3.8642980128920183`*^9, 
   3.864298046923254*^9}, {3.864298092051548*^9, 3.864298163500557*^9}, {
   3.8642982658666773`*^9, 3.86429833326086*^9}, {3.864298376847731*^9, 
   3.864298378334578*^9}, {3.8642984656987677`*^9, 3.864298470470859*^9}, {
   3.864298533185711*^9, 3.864298536372733*^9}, 3.864298717939622*^9, {
   3.8644619391236486`*^9, 3.864461954631907*^9}, {3.864908182908127*^9, 
   3.864908187730322*^9}, {3.864908346792715*^9, 3.8649084144707613`*^9}, {
   3.864909270192791*^9, 3.8649093301330357`*^9}, 3.864909441495468*^9, {
   3.864909473892476*^9, 3.864909484802217*^9}, {3.864982633949589*^9, 
   3.864982730901598*^9}, {3.864984846250566*^9, 3.8649848519510098`*^9}, {
   3.864987650400429*^9, 3.864987656309813*^9}, {3.8649886260817204`*^9, 
   3.864988626252521*^9}, {3.8649899282317667`*^9, 3.864989980472209*^9}, {
   3.864990084179488*^9, 3.864990094586014*^9}, {3.86499150454633*^9, 
   3.8649916024161654`*^9}, {3.86499168920679*^9, 3.864991726256454*^9}, 
   3.864991807308263*^9, {3.8649918515670433`*^9, 3.864991906083755*^9}, {
   3.8649919928783484`*^9, 3.86499199615205*^9}, {3.864992027091736*^9, 
   3.864992039692363*^9}, {3.864992072138052*^9, 3.864992080229616*^9}, {
   3.864992120782631*^9, 3.8649921347611*^9}, {3.864993522537169*^9, 
   3.864993536134345*^9}, {3.864993572586138*^9, 3.8649936401112013`*^9}, {
   3.864998422802161*^9, 3.864998519739326*^9}, {3.864998579983699*^9, 
   3.864998588558549*^9}, {3.864998641566579*^9, 3.864998657990224*^9}, 
   3.864998728351574*^9, {3.864998786090961*^9, 3.8649987925450087`*^9}, {
   3.8649994641051483`*^9, 3.864999474271853*^9}, {3.8649996219875917`*^9, 
   3.864999633223666*^9}, {3.865000405207079*^9, 3.8650004374683027`*^9}, {
   3.865008968891549*^9, 3.865008978352496*^9}, 3.8650090259384727`*^9, {
   3.8653456769994307`*^9, 3.865345679951064*^9}, {3.865346675601695*^9, 
   3.865346675954549*^9}, 3.8653475825905457`*^9, {3.865422481075314*^9, 
   3.8654224940006647`*^9}, {3.865434141417286*^9, 3.865434229358629*^9}, {
   3.865434295697486*^9, 3.865434337444336*^9}, {3.865437587711506*^9, 
   3.865437592976727*^9}, 3.865449390302051*^9, {3.8655124102338543`*^9, 
   3.86551241033257*^9}, {3.865519185155155*^9, 3.865519187190467*^9}, {
   3.8655200397088947`*^9, 3.8655200516761217`*^9}, {3.865521133391367*^9, 
   3.865521134812397*^9}, {3.865524829459621*^9, 3.86552483280748*^9}, {
   3.8655296221639214`*^9, 3.8655297065067663`*^9}, {3.865529761631893*^9, 
   3.8655297617722197`*^9}, {3.865534840987632*^9, 3.865534946698985*^9}, {
   3.865535019773446*^9, 3.865535029713653*^9}, {3.865535914461954*^9, 
   3.86553592809407*^9}, {3.8655359616757307`*^9, 3.865536093482892*^9}, 
   3.8655362673148727`*^9, 3.865584001011497*^9, {3.865584082414337*^9, 
   3.865584089301093*^9}, {3.865584197666383*^9, 3.865584199938727*^9}, {
   3.865584253315632*^9, 3.8655842708628263`*^9}, {3.865584859898327*^9, 
   3.865584860650134*^9}, {3.865585075271306*^9, 3.865585126574689*^9}, {
   3.865585302081812*^9, 3.865585309319119*^9}, 3.865586282363821*^9, {
   3.865586980421566*^9, 3.865586995302731*^9}, {3.8655870593161993`*^9, 
   3.8655871410394363`*^9}, {3.86558770697703*^9, 3.865587715982068*^9}, {
   3.865588209915936*^9, 3.865588212026025*^9}, {3.865588417539843*^9, 
   3.8655884239417553`*^9}, 3.865589646214896*^9, {3.865592893992288*^9, 
   3.8655929028577757`*^9}, {3.8655930011045322`*^9, 3.865593042232716*^9}, {
   3.865593659999056*^9, 3.865593664199079*^9}, {3.865593705653048*^9, 
   3.8655937111621847`*^9}, {3.865593895918704*^9, 3.86559392439946*^9}, {
   3.865602349792571*^9, 3.865602361818635*^9}, 3.8656025912050943`*^9, {
   3.865605022657424*^9, 3.865605022809877*^9}, {3.86601704922449*^9, 
   3.866017049660884*^9}, {3.866018660246491*^9, 3.866018664642766*^9}, {
   3.866021273124432*^9, 3.8660212761231403`*^9}, 3.866021448646379*^9, {
   3.866021703996364*^9, 3.8660217070564613`*^9}, 3.866035772949377*^9, {
   3.866036804772846*^9, 3.86603682868575*^9}, 3.866037447340913*^9, {
   3.866037532094297*^9, 3.866037536044004*^9}, {3.866037627450358*^9, 
   3.866037628947542*^9}, {3.866037746521656*^9, 3.8660377478886557`*^9}, 
   3.866037871418632*^9, {3.866039576380975*^9, 3.8660395765003443`*^9}, {
   3.8660396940686073`*^9, 3.866039716648156*^9}, {3.866119367460462*^9, 
   3.866119454724841*^9}, {3.866119638316676*^9, 3.866119701799397*^9}, {
   3.866119846871057*^9, 3.8661199131199017`*^9}, {3.866123968433622*^9, 
   3.8661240041978703`*^9}, {3.86612685427917*^9, 3.866126900692857*^9}, {
   3.866190313724703*^9, 3.866190326950613*^9}, {3.8661908152640533`*^9, 
   3.866190836006069*^9}, {3.866209676180365*^9, 3.866209722773699*^9}, {
   3.8662097569929113`*^9, 3.8662098474946136`*^9}, {3.8662113525688143`*^9, 
   3.866211357157461*^9}, {3.866212614872776*^9, 3.866212620172016*^9}, {
   3.866215014068651*^9, 3.866215041549499*^9}, {3.866215793841186*^9, 
   3.86621580029358*^9}, {3.8662167310113077`*^9, 3.8662167352958393`*^9}, {
   3.8662232717467823`*^9, 3.866223272907613*^9}, {3.86622355089727*^9, 
   3.866223552015295*^9}, {3.86622465246177*^9, 3.8662246541027603`*^9}, {
   3.8662268834861727`*^9, 3.866226914600793*^9}, {3.866227020875413*^9, 
   3.8662270222624407`*^9}, 3.866277544728778*^9, 3.866277726237278*^9, {
   3.866291018769141*^9, 3.866291030546069*^9}, {3.866291188875318*^9, 
   3.86629119457896*^9}, {3.8662912980543423`*^9, 3.8662913102430143`*^9}, 
   3.86673637168119*^9, {3.866737031363192*^9, 3.866737034737979*^9}, {
   3.866737272116262*^9, 3.866737286794602*^9}, {3.8667373359439507`*^9, 
   3.866737337648261*^9}, {3.867346799424296*^9, 3.867346799753326*^9}, 
   3.8719952654337387`*^9, {3.8720231608226757`*^9, 3.872023160915311*^9}, {
   3.872023270376236*^9, 3.872023277907228*^9}, 3.8720688597713223`*^9, {
   3.872069237944333*^9, 3.872069238674307*^9}, {3.872069274263637*^9, 
   3.872069283848652*^9}, {3.872153086591311*^9, 3.8721530979461517`*^9}, {
   3.874522980759087*^9, 3.874523006574242*^9}, {3.874584422961721*^9, 
   3.874584423441265*^9}, 3.8746663002384567`*^9, 3.8752785889827137`*^9, {
   3.878645868060483*^9, 3.878645875990556*^9}, {3.8786459301132727`*^9, 
   3.878645970194397*^9}, {3.878646075507066*^9, 3.878646075557591*^9}, 
   3.878651033653851*^9, 3.878651145132681*^9, {3.878651201506363*^9, 
   3.8786512235982237`*^9}, {3.878651259782247*^9, 3.8786513044566402`*^9}, 
   3.878653211269293*^9, {3.878654826464817*^9, 3.878654869232605*^9}, {
   3.878654918537451*^9, 3.87865494410341*^9}, {3.878655999568246*^9, 
   3.8786560002290173`*^9}, {3.878667722209536*^9, 3.878667722378937*^9}, {
   3.8787260650943604`*^9, 3.878726065898878*^9}, {3.878727985858926*^9, 
   3.8787279957746162`*^9}, 3.878728071415188*^9, {3.878728624140645*^9, 
   3.8787286256610613`*^9}, {3.8787783663461227`*^9, 
   3.8787783688399343`*^9}, {3.878829311503002*^9, 3.87882931795356*^9}, 
   3.878833956388493*^9, 3.878836212194078*^9, {3.878836263971336*^9, 
   3.878836302142728*^9}, {3.8788364055521917`*^9, 3.8788364075089903`*^9}, {
   3.87891232036259*^9, 3.87891233577169*^9}, {3.878919696205223*^9, 
   3.878919716662218*^9}, {3.878919765451899*^9, 3.8789197698838987`*^9}, {
   3.878919936731941*^9, 3.878919940095903*^9}, {3.878938193101869*^9, 
   3.878938194617077*^9}, {3.8792454558948517`*^9, 3.8792454565745487`*^9}, {
   3.879245548407476*^9, 3.879245570628809*^9}, {3.879245618245541*^9, 
   3.879245620704595*^9}, {3.8792459532325706`*^9, 3.8792459536216307`*^9}, {
   3.879246502863142*^9, 3.879246505459577*^9}, {3.879246991467431*^9, 
   3.879246994361895*^9}, {3.879250705052494*^9, 3.8792507331966143`*^9}, {
   3.879251324620749*^9, 3.879251340714656*^9}, {3.879251869743888*^9, 
   3.8792519094315987`*^9}, {3.879251983182148*^9, 3.879252015491468*^9}, {
   3.879254061633246*^9, 3.879254064772154*^9}, {3.879254989543605*^9, 
   3.879254992974765*^9}, {3.879255111607327*^9, 3.879255114187804*^9}, {
   3.87925570201363*^9, 3.879255705707993*^9}, {3.8792565676940107`*^9, 
   3.879256570255439*^9}, {3.879262175315426*^9, 3.879262178486652*^9}, {
   3.879262284948853*^9, 3.879262287950514*^9}, {3.879262318582295*^9, 
   3.879262320495059*^9}, {3.879331962343216*^9, 3.87933196728963*^9}, {
   3.879334717545423*^9, 3.879334721777145*^9}, {3.879341285232527*^9, 
   3.879341302376833*^9}, {3.879341338866713*^9, 3.879341432651805*^9}, {
   3.879341495486425*^9, 3.879341593557341*^9}, {3.879341640383976*^9, 
   3.879341641529262*^9}, {3.879341768090033*^9, 3.879341768701818*^9}, {
   3.879342581187037*^9, 3.879342627244748*^9}, 3.8793427165982656`*^9, {
   3.879343610485406*^9, 3.879343677207852*^9}, {3.879348989083943*^9, 
   3.879348990045081*^9}, 3.8793491475683804`*^9, {3.879352540540131*^9, 
   3.87935256789384*^9}, {3.8793526606007843`*^9, 3.879352750068582*^9}, {
   3.879352785846884*^9, 3.879352836284931*^9}, {3.879352868926*^9, 
   3.879352960093054*^9}, {3.8793530220908422`*^9, 3.879353096222539*^9}, {
   3.8793532278214607`*^9, 3.879353323854189*^9}, {3.8793534810852003`*^9, 
   3.879353696883471*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"5df1098f-6005-464a-86df-a113e6202183"],

Cell[BoxData[
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<inputHeight\>\"", "->", "68"}], ",", 
     RowBox[{"\"\<inputWidth\>\"", "->", "120"}], ",", 
     RowBox[{"\"\<features\>\"", "->", "4"}], ",", 
     RowBox[{"\"\<maxDisp\>\"", "->", "24"}]}], "|>"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879341205101387*^9, 3.879341206430253*^9}, {
  3.879341305994741*^9, 3.8793413318804913`*^9}, {3.879352712926278*^9, 
  3.879352718729436*^9}, {3.8793527932493277`*^9, 3.879352802025671*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"4f0c0b43-2181-4a15-ac8a-6dd2fae9ace2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainableGCNet", "[", "params", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.87934255643985*^9, 3.8793425616815434`*^9}, {
   3.8793436830551853`*^9, 3.879343686544702*^9}, {3.879352773333596*^9, 
   3.87935277975179*^9}, 3.879352819982016*^9},
 CellLabel->"In[39]:=",ExpressionUUID->"c4b54428-c271-48ef-8b99-4682a5cc9b7b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"dispLeft\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}], 
                    
                    Offset[{0, -13.5}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"iLeft\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-7.000000026794894, -0.9999998124357204}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"fLeft\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-6.000000026794895, -0.9999998392306175}], 
                    
                    Offset[{
                    0, -15.5}, {-6.000000026794895, -0.9999998392306175}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"iRight\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-6.999999999999997, 
                    1.875642792038249*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"fRight\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    
                    Offset[{0, -15.5}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"costVol\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    
                    Offset[{0, -15.5}, {-4.999999999999998, 
                    1.339744851455892*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"match\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{0, -15.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {0., 0.}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"probabili..\"", "\"probabilities\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "probabilities", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{0, -13.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"prediction\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"range\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"68\"", "\"120\""},
                     "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193366014818`*^-7, 
                    5.499999999999999}, {-1.4499999999999993`, 
                    3.885260069222087*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.679489702911785*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"68\"", "\"120\""},
                     "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193393399303`*^-7, 
                    5.499999999999999}, {-6.4500000267948945`, \
-0.9999998271729138}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897078907825`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"68\"", "\"120\""},
                     "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193366014818`*^-7, 
                    5.499999999999999}, {-6.4499999999999975`, 
                    1.728270858378101*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117852`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"8\"", "\"68\"", "\"120\"", 
                    "\"25\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-4.449999999999998, 
                    1.192372917795744*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"68\"", "\"120\""},
                     "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-5.450000012057702, \
-0.449999853967811}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"68\"", "\"120\""},
                     "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719336601482*^-7, 
                    5.499999999999999}, {-5.4499999999999975`, 
                    1.4603218880869225`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117856`*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014818`*^-7, 
                    5.499999999999999}, {-0.4499999999999998, 
                    1.2057703663103027`*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.679489702911785*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"68\"", "\"120\"", 
                    "\"25\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-3.449999999999999, 
                    9.244239475045655*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"68\"", "\"120\""},
                     "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999999}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"68\"", "\"120\""},
                     "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318317}, {-1.4499999879422958`, 
                    0.4500000388526005}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396939, -0.7071068001334007}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"68\"", "\"120\"", 
                    "\"25\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337044`}, {-2.4499999852628056`, 
                    0.5500000656474976}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334008,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"25\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999999}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885506`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"dispLeft\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"dispLeft", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.000000026794894, -0.9999998124357204}, \
{-6.000000026794895, -0.9999998392306175}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"iLeft\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"iLeft", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.999999999999997, 
                    1.875642792038249*^-7}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"iRight\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"iRight", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
8\[Times]68\[Times]120\[Times]25\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 8\[Times]68\[Times]120\[Times]25\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.000000026794895, -0.9999998392306175}, \
{-4.999999999999998, 1.339744851455892*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"fLeft\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "fLeft"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999999999998, 
                    1.339744851455892*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"fRight\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "fRight"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999999999999, 
                    8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1\[Times]68\[Times]120\[Times]25\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\[Times]25\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1\[Times]68\[Times]120\[Times]25\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\[Times]25\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 25\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 25\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999999999993`, 
                    3.885260069222087*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"dispLeft\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"dispLeft", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4500000267948945`, -0.9999998271729138}, \
{-0.25, 0}, 
                    Offset[8], {0.9999999999999991, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"iLeft\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"iLeft", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999999999975`, 
                    1.728270858378101*^-7}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"iRight\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"iRight", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999999999998, 
                    1.192372917795744*^-7}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
8\[Times]68\[Times]120\[Times]25\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 8\[Times]68\[Times]120\[Times]25\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.450000012057702, -0.449999853967811}, {-0.25,
                     0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"fLeft\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "fLeft"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999999999975`, 
                    1.4603218880869225`*^-7}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794897029117862`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"fRight\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "fRight"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999999999999, 
                    9.244239475045655*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1\[Times]68\[Times]120\[Times]25\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\[Times]25\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999879422958`, 
                    0.4500000388526005}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051027, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999852628056`, 
                    0.5500000656474976}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1\[Times]68\[Times]120\[Times]25\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]68\[Times]120\[Times]25\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 25\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 25\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999999999993`, 5.3589794058235685`*^-8}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dispLeft\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["dispLeft", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"MA\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "MeanAbsoluteLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    MeanAbsoluteLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.000000026794894, -0.9999998124357204}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"iLeft\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["iLeft", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    
                    Rational[-25, 
                    2]}, {-6.000000026794895, -0.9999998392306175}], 
                    
                    Offset[{-12.5, -12.5}, {-6.000000026794895, \
-0.9999998392306175}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[
                    25, 2]}, {-6.000000026794895, -0.9999998392306175}], 
                    
                    Offset[{12.5, 
                    12.5}, {-6.000000026794895, -0.9999998392306175}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    
                    Rational[-21, 
                    2]}, {-6.000000026794895, -0.9999998392306175}], 
                    
                    Offset[{-10.5, -10.5}, {-6.000000026794895, \
-0.9999998392306175}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[
                    21, 2]}, {-6.000000026794895, -0.9999998392306175}], 
                    
                    Offset[{10.5, 
                    10.5}, {-6.000000026794895, -0.9999998392306175}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-6.000000026794895, -0.9999998392306175}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"fLeft\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["fLeft", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.999999999999997, 1.875642792038249*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"iRight\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["iRight", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    
                    Offset[{-12.5, -12.5}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    
                    Offset[{12.5, 12.5}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-5.999999999999998, 1.6076938217470707`*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"fRight\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["fRight", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-4.999999999999998, 1.339744851455892*^-7}, 
                    Offset[13.88888888888889]]}, {
                    DiskBox[{-4.999999999999998, 1.339744851455892*^-7}, 
                    Offset[11.666666666666668`]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-4.999999999999998, 1.339744851455892*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"costVol\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["costVol", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-12.5, -12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{12.5, 12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3.9999999999999987`, 1.0717958811647137`*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"match\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["match", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztVjlIQ0EQzaEYPFCwEjxQEEQLizQSi6C5rybBxk5NDBZGiEoQRBsVQcHW
QlBQo4WChY1BEBXsPEC0ECsLEaxSxBOib2E+/OInUdyNgn/gJfs3M/t25m9m
X33vkL9fp9Fohg348PfEOqLRnrFABR66IsMD4Ugo6IqMhMKhaFuvHpOtQC1Q
oFFNNdV+y8xmc6nb7a7DUJcHOq3H4wl5vd4bn8/3wYDxMzCPfQhpBWxdcK5L
fBhPgW8aeCD+CRG84InJcryT5jFuAtLAFW9Ok8lUBt4U1n4C4hhvYVovAc+P
mE/y5sWa3ZTnCnAo5S2HvAYceWdp7TDlvQosyIGzPSiAd4l4Z4B3oFj2WxzY
djqd1QJ4x4k3CZxJ88ixj+aPeHMyQy7NWPuNOC5ZTfG9Qef4DrVvEMHLDOsH
gHvZOXoFlkXUV8G0dru9Bvk1iupPqokxq9Vank9InEq9TyQYJ7vD8Z+4yCcY
52+/4/9qqP8o3XXZEBTAm8h1Hllv5s2L/jtH2i3lcrk6HQ5HiwKqePPCdODc
pLzYma/4TvBPtLXRaCwE5y7lfWKz2UpyhHDT1vA3IO6AuPdx1xZl8OOurUnD
nlL8jpKPCG1tsVgqEXdLeSxm2BdXbc3qirhjyiOh9J5EaGv4r1HctXR3Kfhw
1dbwn6TaPmbTizy1tax2L+gb7Tl8uWlrqU+SVj1XAjvjzJentobv3hf6c1q2
T1Vbq/Zn7BM3uCCD
                    "], {{0, 25.066666666666666`}, {16., 0}}, {0, 255}, 
                    ColorFunction -> RGBColor, ImageResolution -> 135.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {16., 25.066666666666666`}, 
                    PlotRange -> {{0, 16.}, {0, 25.066666666666666`}}, 
                    ImageSize -> 16], TraditionalForm]], {-2.999999999999999, 
                    8.038469108735353*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"probabilities\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SoftmaxLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["probabilities", Bold], 
                    Style[
                    SoftmaxLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[CenterDot]\"", 
                    GrayLevel[0.33], 14, Bold, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"prediction\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "DotLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["prediction", Bold], 
                    Style[
                    DotLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{-10.5, -10.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{10.5, 10.5}, {-2.999999973205102, 
                    1.0000000803846907`}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"range\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["range", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}, {-7.000000026794894, \
-0.9999998124357204}, {-6.000000026794895, -0.9999998392306175}, \
{-6.999999999999997, 1.875642792038249*^-7}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {0., 0.}, {-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {-2.999999973205102, 
                    1.0000000803846907`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 25, 8, 25, 25, 25, 8, 21, 21, 8, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {443.0000014737192, 158.49999557884195`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"iLeft\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"iLeft\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"iLeft"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"iLeft\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"iLeft"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"iRight\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"iRight\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"iRight"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"iRight\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"iRight"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"dispLeft\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"dispLeft\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"dispLeft"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"dispLeft\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"dispLeft"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]68\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25},
                     {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 
                    12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{
                    8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{
                    8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]},
                     ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "range" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{25}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{25}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {25}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{25}, 
                    NeuralNetworks`AtomT]|>, 
                    "TrainingParameters" -> <|
                    "LearningRateMultipliers" -> 0|>|>, 
                    "fLeft" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "conv1" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {3, 68, 120}, 
                    "$OutputSize" -> {3, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv1/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv1/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 3|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv2" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv2/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv2/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv3" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv3/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv3/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual1" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv1" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv3" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv4" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv4/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv4/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv5" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv5/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv5/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual2" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual1" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv5" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv6" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv6/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv6/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv7" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv7/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv7/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual3" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual2" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv7" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv8" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv8/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv8/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv9" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv9/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv9/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual3" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv9" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv10" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv10/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv10/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv11" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv11/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv11/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual5" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual4" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv11" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv12" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv12/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv12/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv13" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv13/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv13/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual5" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv13" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv14" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv14/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv14/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv15" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv15/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv15/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual7" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual6" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv15" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv16" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv16/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv16/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv17" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv17/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv17/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual8" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual7" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv17" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv18" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv18/Weights"|>], 
                    "Biases" -> NetArray[<|
                    "Array" -> Automatic, "Dimensions" -> Automatic, "Name" -> 
                    "featureNetconv18/Biases"|>]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 4, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$InputSize" -> {68, 120}, 
                    "$OutputSize" -> {68, 120}, "$WeightsInputChannels" -> 
                    4|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Inputs", "conv1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Inputs", "conv3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Inputs", "residual1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Inputs", "conv5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Inputs", "residual2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Inputs", "conv7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Inputs", "residual3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Inputs", "conv9"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Inputs", "residual4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Inputs", "conv11"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Inputs", "residual5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Inputs", "conv13"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Inputs", "residual6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Inputs", "conv15"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual8", "Inputs", "residual7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual8", "Inputs", "conv17"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv18", "Outputs", "Output"]}|>, 
                    "fRight" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "conv1" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {3, 68, 120}, 
                    "$OutputSize" -> {3, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv1/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv1/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 3|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv2" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv2/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv2/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv3" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv3/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv3/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual1" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv1" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv3" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv4" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv4/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv4/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv5" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv5/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv5/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual2" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual1" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv5" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv6" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv6/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv6/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv7" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv7/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv7/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual3" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual2" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv7" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv8" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv8/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv8/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv9" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv9/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv9/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual3" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv9" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv10" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv10/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv10/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv11" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv11/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv11/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual5" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual4" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv11" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv12" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv12/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv12/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv13" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv13/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv13/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual5" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv13" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv14" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv14/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv14/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv15" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv15/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv15/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual7" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual6" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv15" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv16" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv16/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv16/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv17" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 70, 122}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv17/2/Weights"|>], 
                    "Biases" -> NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv17/2/Biases"|>]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "ChannelGroups" -> 1, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$InputSize" -> {70, 122}, "$OutputSize" -> {68, 120}, 
                    "$WeightsInputChannels" -> 4|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual8" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"residual7" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "conv17" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv18" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NetArray[<|"Array" -> Automatic, "Dimensions" -> 
                    Automatic, "Name" -> "featureNetconv18/Weights"|>], 
                    "Biases" -> NetArray[<|
                    "Array" -> Automatic, "Dimensions" -> Automatic, "Name" -> 
                    "featureNetconv18/Biases"|>]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 4, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$InputSize" -> {68, 120}, 
                    "$OutputSize" -> {68, 120}, "$WeightsInputChannels" -> 
                    4|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Inputs", "conv1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Inputs", "conv3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Inputs", "residual1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Inputs", "conv5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Inputs", "residual2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Inputs", "conv7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Inputs", "residual3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Inputs", "conv9"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Inputs", "residual4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Inputs", "conv11"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Inputs", "residual5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Inputs", "conv13"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Inputs", "residual6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Inputs", "conv15"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual8", "Inputs", "residual7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual8", "Inputs", "conv17"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv18", "Outputs", "Output"]}|>, 
                    "costVol" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "fLeft" -> NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT], "fRight" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "leftVol" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[25], "Level" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{25, 4, 68, 120}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "2" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (
                    Transpose[#, {4, 1, 2, 3}]& ), 
                    "Net" -> <|"Type" -> "Transpose", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{4, 1, 2, 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{25, 4, 
                    68, 120}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120, 25}, NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{25, 4, 68, 120}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "rightVol" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {0, 0}, {24,
                     0}}, "Padding" -> "Fixed", "$Rank" -> 3, 
                    "$InputSize" -> {4, 68, 120}, 
                    "$OutputSize" -> {4, 68, 144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[25, 144]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[24, 143]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[23, 142]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[22, 141]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[21, 140]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[20, 139]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[19, 138]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[18, 137]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[17, 136]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[16, 135]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "12" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[15, 134]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[14, 133]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[13, 132]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "15" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[12, 131]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "16" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[11, 130]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "17" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[10, 129]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "18" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[9, 128]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "19" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[8, 127]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "20" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[7, 126]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "21" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[6, 125]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "22" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[5, 124]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "23" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[4, 123]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "24" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[3, 122]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "25" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[2, 121]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "26" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> ({
                    Part[#, All, All, 
                    Span[
                    1 - $CellContext`d + 24, 120 - $CellContext`d + 24]]}& ), 
                    "Net" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, -1], 
                    Span[1, 120]}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 0|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4, 68, 
                    120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", 
                    "Output"]}, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1, 4, 
                    68, 120}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "27" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input4" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input5" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input6" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input7" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input8" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input9" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input10" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input11" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input12" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input13" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input14" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input15" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input16" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input17" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input18" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input19" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input20" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input21" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input22" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input23" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input24" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT], "Input25" -> 
                    NeuralNetworks`TensorT[{1, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{25, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "28" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (
                    Transpose[#, {4, 1, 2, 3}]& ), 
                    "Net" -> <|"Type" -> "Transpose", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{4, 1, 2, 3}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{25, 4, 
                    68, 120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4, 68, 
                    120, 25}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{25, 4, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input8"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input9"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input10"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input11"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input12"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input13"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input14"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input15"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input16"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input17"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input18"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input19"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input20"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input21"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input22"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input23"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input24"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Inputs", "Input25"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "28", "Outputs", "Output"]}|>, 
                    "output" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "leftVol", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "fLeft"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "rightVol", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "fRight"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "output", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "leftVol", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "output", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "rightVol", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "output", "Outputs", "Output"]}|>, 
                    "match" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "conv19" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{4, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv20" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {4, 68, 120, 25}, 
                    "$OutputSize" -> {4, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    4|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv21" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {4, 68, 120, 25}, 
                    "$OutputSize" -> {4, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 4, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    4|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv22" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv23" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual1" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv21" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT], "conv23" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv24" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv25" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv26" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual2" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv24" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT], "conv26" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv27" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv28" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv29" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual3" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv27" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT], "conv29" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv30" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{16, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv31" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {16, 68, 120, 25}, 
                    "$OutputSize" -> {16, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{16, 16, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv32" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {16, 68, 120, 25}, 
                    "$OutputSize" -> {16, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{16, 16, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv33" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {16, 68, 120, 25}, 
                    "$OutputSize" -> {16, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 16, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv33" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT], "conv29" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv34" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual5" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv34" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT], "conv26" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv35" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 8, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv35" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT], "conv23" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv36" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {8, 68, 120, 25}, 
                    "$OutputSize" -> {8, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{4, 8, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 8, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    8|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "residual7" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"conv36" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT], "conv20" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv37" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {4, 68, 120, 25}, 
                    "$OutputSize" -> {4, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 4, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    4|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 68, 120, 25}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Padding", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> {{0, 0}, {1, 1}, {1, 
                    1}, {1, 1}}, "Padding" -> "Fixed", "$Rank" -> 4, 
                    "$InputSize" -> {4, 68, 120, 25}, 
                    "$OutputSize" -> {4, 70, 122, 27}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{1, 4, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|"OutputChannels" -> 1, 
                    "KernelSize" -> {3, 3, 3}, "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$InputSize" -> {70, 122, 27}, 
                    "$OutputSize" -> {68, 120, 25}, "$WeightsInputChannels" -> 
                    4|>, "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 70, 122, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Inputs", "conv20"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Inputs", "conv21"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Inputs", "conv23"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Inputs", "conv23"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Inputs", "conv24"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Inputs", "conv26"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Inputs", "conv26"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Inputs", "conv27"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Inputs", "conv29"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Inputs", "conv29"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Inputs", "conv33"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Inputs", "conv34"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Inputs", "conv35"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Inputs", "conv36"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "residual7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "probabilities" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 68, 120, 25}, 
                    NeuralNetworks`RealT]|>|>, 
                    "prediction" -> <|
                    "Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{1, 68, 120, 25}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{25}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 68, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "loss" -> <|
                    "Type" -> "MeanAbsoluteLoss", "Arrays" -> <||>, 
                    "Parameters" -> <|"$Dimensions" -> {1, 68, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 68, 120}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{1, 68, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "iLeft" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 68, 120}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{120, 68}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>, 
                    "iRight" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 68, 120}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{120, 68}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>, 
                    "dispLeft" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1, 68, 120}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{120, 68}], 
                    "ColorSpace" -> "Grayscale", "ColorChannels" -> 1, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 68, 120}, 
                    NeuralNetworks`RealT], "Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "fLeft", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "iLeft"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "fRight", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "iRight"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "dispLeft"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "prediction", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "range", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "costVol", "Inputs", "fLeft"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fLeft", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "costVol", "Inputs", "fRight"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fRight", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "match", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "costVol", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "match", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "prediction", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "prediction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "prediction", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "dispLeft"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Inputs", "iLeft"], 
                    NeuralNetworks`NetPath["Nodes", "fLeft"], 
                    NeuralNetworks`NetPath["Inputs", "iRight"], 
                    NeuralNetworks`NetPath["Nodes", "fRight"], 
                    NeuralNetworks`NetPath["Nodes", "costVol"], 
                    NeuralNetworks`NetPath["Nodes", "match"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "probabilities"], 
                    NeuralNetworks`NetPath["Nodes", "prediction"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "range"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "dispLeft"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Inputs", "iLeft"], 
                    NeuralNetworks`NetPath["Nodes", "fLeft"], 
                    NeuralNetworks`NetPath["Inputs", "iRight"], 
                    NeuralNetworks`NetPath["Nodes", "fRight"], 
                    NeuralNetworks`NetPath["Nodes", "costVol"], 
                    NeuralNetworks`NetPath["Nodes", "match"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "probabilities"], 
                    NeuralNetworks`NetPath["Nodes", "prediction"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "range"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <|
                    "featureNetconv10/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv10/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv11/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv11/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv12/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv12/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv1/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv1/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 3, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv13/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv13/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv14/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv14/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv15/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv15/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv16/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv16/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv17/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv17/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv18/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv18/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv2/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv2/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv3/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv3/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv4/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv4/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv5/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv5/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv6/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv6/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv7/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv7/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv8/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv8/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "featureNetconv9/2/Biases" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "featureNetconv9/2/Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT]|>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8796965764585867`*^9, 3.8796967172170258`*^9, 
  3.880400272522801*^9, 3.880400499157493*^9, 3.880400820555839*^9, 
  3.880403000910228*^9, 3.880409155855834*^9, 3.880409203707901*^9, 
  3.880444571384994*^9, 3.880446080659936*^9, 3.880446129373075*^9, 
  3.880446215429638*^9, 3.880446326517687*^9, 3.880473764357294*^9, 
  3.880473812519013*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"74b80f11-b76b-40b8-a60f-cdbd4874d49a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"trainableGCNet", "[", "params", "]"}], ",", 
     "\[IndentingNewLine]", "dataTrain", ",", "\[IndentingNewLine]", "All", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", "dataValid"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"BatchSize", "\[Rule]", 
      RowBox[{"If", "[", 
       RowBox[{"ec2", ",", "16", ",", "1"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", 
      RowBox[{"If", "[", 
       RowBox[{"ec2", ",", "128", ",", "1"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "\[Rule]", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<ADAM\>\"", ",", 
        RowBox[{"LearningRate", "\[Rule]", "0.001"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "\[Rule]", 
      RowBox[{"If", "[", 
       RowBox[{"ec2", ",", "\"\<GPU\>\"", ",", "\"\<CPU\>\""}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"WorkingPrecision", "\[Rule]", "\"\<Real32\>\""}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.811163737665946*^9, 3.81116383446729*^9}, {
   3.811163962430307*^9, 3.811163970224955*^9}, {3.811164302792*^9, 
   3.811164302928299*^9}, {3.811164714524312*^9, 3.811164723109048*^9}, {
   3.811164793675302*^9, 3.811164805966588*^9}, {3.8111648479456377`*^9, 
   3.811164848951977*^9}, {3.8111671656545477`*^9, 3.811167171329471*^9}, {
   3.8112458023276653`*^9, 3.8112458401086597`*^9}, {3.8112460082304573`*^9, 
   3.811246027950142*^9}, 3.8112461470838957`*^9, {3.811246442929923*^9, 
   3.811246491414433*^9}, {3.811249198416273*^9, 3.8112491985568333`*^9}, {
   3.811249315922929*^9, 3.811249316128089*^9}, {3.8112611218601847`*^9, 
   3.811261124074141*^9}, {3.811262841580852*^9, 3.8112628576514482`*^9}, {
   3.81126290557937*^9, 3.811262919706029*^9}, {3.811262961369068*^9, 
   3.8112629628637466`*^9}, {3.8112629955434923`*^9, 
   3.8112629966741323`*^9}, {3.811263710174115*^9, 3.811263744400473*^9}, {
   3.811263840273898*^9, 3.811263882982901*^9}, {3.8112651130034437`*^9, 
   3.811265113269217*^9}, 3.8112659338906517`*^9, {3.811266675872669*^9, 
   3.8112666827292747`*^9}, 3.8112667579318933`*^9, {3.811266808639874*^9, 
   3.811266808924706*^9}, {3.811266853232902*^9, 3.811266853399426*^9}, {
   3.8122835674131327`*^9, 3.812283572895401*^9}, {3.812283710418638*^9, 
   3.8122837251846952`*^9}, {3.812284133378434*^9, 3.812284136478663*^9}, {
   3.812292741801078*^9, 3.8122927432042923`*^9}, {3.812292809854702*^9, 
   3.812292812549164*^9}, {3.812292912073091*^9, 3.812292915972789*^9}, {
   3.8122930334786797`*^9, 3.812293035623172*^9}, {3.812293124970298*^9, 
   3.812293131509574*^9}, {3.8122931739781713`*^9, 3.812293176018455*^9}, {
   3.8122934417997026`*^9, 3.812293444682637*^9}, {3.812293859849421*^9, 
   3.812293891379547*^9}, {3.812293992340438*^9, 3.812293995388508*^9}, {
   3.8122941814718513`*^9, 3.8122941948502617`*^9}, {3.8122942599782267`*^9, 
   3.812294262233824*^9}, {3.8122943167737293`*^9, 3.812294319303418*^9}, {
   3.8122943543282957`*^9, 3.812294356788066*^9}, {3.812294415602087*^9, 
   3.812294425141282*^9}, 3.812294527470278*^9, {3.812294625014534*^9, 
   3.812294625213497*^9}, {3.812296785630796*^9, 3.812296787985979*^9}, {
   3.812297230735858*^9, 3.8122972371780767`*^9}, {3.812297402728292*^9, 
   3.812297402935481*^9}, {3.812297441275497*^9, 3.812297442368709*^9}, {
   3.8122974806373787`*^9, 3.812297485995689*^9}, 3.8122975404013023`*^9, {
   3.81229843003544*^9, 3.8122984338421173`*^9}, {3.812298520972622*^9, 
   3.8122985376071033`*^9}, {3.812298683936936*^9, 3.812298685557933*^9}, {
   3.812298740202138*^9, 3.8122987442131853`*^9}, {3.812298911069233*^9, 
   3.8122989142460423`*^9}, {3.812299010737602*^9, 3.812299013615438*^9}, {
   3.812299157210593*^9, 3.8122991618219337`*^9}, {3.812299242672051*^9, 
   3.8122992429362307`*^9}, 3.8123005640417147`*^9, {3.8123006046411543`*^9, 
   3.812300607562223*^9}, {3.8123006592682*^9, 3.812300660403879*^9}, {
   3.812300767761991*^9, 3.812300771277781*^9}, {3.812300842874658*^9, 
   3.8123008643412237`*^9}, {3.8123010097921658`*^9, 3.812301020157228*^9}, {
   3.812301909806978*^9, 3.812301912540319*^9}, {3.81230246407298*^9, 
   3.812302466399953*^9}, {3.812302726754211*^9, 3.812302727673211*^9}, {
   3.812302821888323*^9, 3.81230286025776*^9}, 3.8123028911384583`*^9, 
   3.812303188247471*^9, {3.8123034941636553`*^9, 3.812303519169252*^9}, {
   3.812303590456893*^9, 3.812303590599066*^9}, {3.812303826442457*^9, 
   3.812303826559651*^9}, 3.812303944622198*^9, {3.812369145174067*^9, 
   3.812369148293477*^9}, {3.812370342342957*^9, 3.812370348222904*^9}, 
   3.812371881288307*^9, {3.812372611879656*^9, 3.812372612208728*^9}, 
   3.812384494233974*^9, {3.812384842069067*^9, 3.8123848422772017`*^9}, {
   3.812795081235359*^9, 3.812795086392118*^9}, {3.812795301804785*^9, 
   3.8127953071042967`*^9}, {3.8127953479462748`*^9, 3.8127953520440683`*^9}, 
   3.812795436585795*^9, 3.812795797107657*^9, 3.812797148013517*^9, {
   3.812797382210747*^9, 3.812797440962048*^9}, {3.8128005489975157`*^9, 
   3.8128005517872667`*^9}, {3.812801021756875*^9, 3.812801027028368*^9}, {
   3.812802958342555*^9, 3.812802960888218*^9}, {3.812805893983086*^9, 
   3.81280590944748*^9}, {3.812806144508811*^9, 3.812806145146657*^9}, 
   3.812806358617276*^9, {3.812807004412549*^9, 3.81280700450077*^9}, {
   3.812807568494753*^9, 3.8128075869683247`*^9}, 3.81280788982948*^9, 
   3.812807982786234*^9, 3.812808448445763*^9, 3.815392456574894*^9, {
   3.8153924910986223`*^9, 3.8153924932919817`*^9}, 3.8154091939671297`*^9, {
   3.815420455657671*^9, 3.815420461818263*^9}, {3.815420739440537*^9, 
   3.815420749473454*^9}, {3.81548152558057*^9, 3.8154815353474483`*^9}, 
   3.8154818671483927`*^9, 3.815482043076226*^9, {3.815482255801271*^9, 
   3.81548226099504*^9}, {3.815482583310355*^9, 3.8154826035509367`*^9}, 
   3.815482684835052*^9, {3.8154830986245327`*^9, 3.81548310579438*^9}, 
   3.815483272864222*^9, {3.815486661091872*^9, 3.8154866638112288`*^9}, {
   3.8159139555267*^9, 3.8159139569204063`*^9}, 3.8159149723318863`*^9, {
   3.815915041089925*^9, 3.815915062540037*^9}, 3.815915380995001*^9, 
   3.815916383845079*^9, {3.815916641301528*^9, 3.815916649413835*^9}, 
   3.815917224064823*^9, {3.815918203085294*^9, 3.815918206072544*^9}, {
   3.81591829975996*^9, 3.8159183150776854`*^9}, {3.8159184301675177`*^9, 
   3.81591843058575*^9}, {3.815918584151145*^9, 3.8159186093304768`*^9}, {
   3.815918954847748*^9, 3.8159189645412397`*^9}, 3.815919113657742*^9, 
   3.815919233705534*^9, 3.8159194095440397`*^9, {3.815919788284932*^9, 
   3.815919815751526*^9}, {3.815919948081991*^9, 3.815919950871983*^9}, {
   3.815920006604652*^9, 3.815920007698666*^9}, {3.815920568339011*^9, 
   3.815920589907031*^9}, {3.815920640279356*^9, 3.8159207195615892`*^9}, {
   3.815920761910174*^9, 3.815920773971862*^9}, {3.815920869314396*^9, 
   3.815920885229498*^9}, {3.815930018553606*^9, 3.815930030370185*^9}, {
   3.8159300993183804`*^9, 3.815930104854281*^9}, {3.815930280848421*^9, 
   3.815930281411166*^9}, 3.8159307952277603`*^9, {3.815930894575426*^9, 
   3.815930926817258*^9}, {3.815931035038281*^9, 3.815931044687581*^9}, {
   3.8159313471231833`*^9, 3.815931347503419*^9}, 3.8159326163837757`*^9, 
   3.815936848444516*^9, 3.8159368833165607`*^9, {3.815937798741325*^9, 
   3.815937803842284*^9}, {3.8159996734540243`*^9, 3.8159996767795763`*^9}, {
   3.816002086906713*^9, 3.816002102557796*^9}, {3.816016755903861*^9, 
   3.816016774490835*^9}, {3.816020002681027*^9, 3.8160200155130577`*^9}, {
   3.8160218476429863`*^9, 3.8160218694894114`*^9}, {3.8163616603472977`*^9, 
   3.816361665536281*^9}, {3.8163617099193974`*^9, 3.816361735667714*^9}, 
   3.8163619198615*^9, {3.816362189468569*^9, 3.816362189621826*^9}, 
   3.816362321737443*^9, {3.816426044168912*^9, 3.816426044896268*^9}, {
   3.816426292718939*^9, 3.8164262930653963`*^9}, 3.816426732321142*^9, {
   3.816427381657016*^9, 3.816427397510449*^9}, {3.816427680221168*^9, 
   3.816427680813863*^9}, {3.8164282197522078`*^9, 3.816428223304237*^9}, {
   3.816428545504732*^9, 3.816428548001968*^9}, {3.816430179671356*^9, 
   3.816430187845997*^9}, 3.816453450333843*^9, 3.816453643376693*^9, 
   3.816528956566112*^9, {3.816529430989718*^9, 3.816529451756939*^9}, 
   3.816530888840198*^9, 3.816532631884363*^9, 3.816532910867793*^9, {
   3.819469768126692*^9, 3.819469768392527*^9}, {3.819471427368273*^9, 
   3.8194714277764482`*^9}, {3.8195397551113462`*^9, 3.819539755207293*^9}, 
   3.819732347489119*^9, 3.819732472573779*^9, {3.819732509755477*^9, 
   3.819732510657901*^9}, 3.8197326514678392`*^9, {3.819733489755109*^9, 
   3.8197334899032583`*^9}, {3.819733753721737*^9, 3.8197337538688602`*^9}, {
   3.819973728536215*^9, 3.819973750862651*^9}, 3.8199741939789667`*^9, 
   3.8199839917428217`*^9, {3.8199841522920103`*^9, 3.819984152409403*^9}, 
   3.819984325901393*^9, {3.819985316457141*^9, 3.81998531699223*^9}, {
   3.819986365898157*^9, 3.819986366053727*^9}, {3.820066251934805*^9, 
   3.820066286175562*^9}, {3.820074549448802*^9, 3.820074551712153*^9}, 
   3.8200745995815783`*^9, {3.8200750984704847`*^9, 3.8200751002196407`*^9}, 
   3.820075368114395*^9, 3.8200760629103727`*^9, 3.8200853626833887`*^9, 
   3.820085422630908*^9, {3.8200854581242332`*^9, 3.8200854583887787`*^9}, {
   3.820146074239078*^9, 3.820146074337578*^9}, {3.820146290485989*^9, 
   3.820146310921031*^9}, 3.8201464619265127`*^9, {3.82024751836342*^9, 
   3.820247545839881*^9}, {3.8202482745550222`*^9, 3.820248274913644*^9}, {
   3.820677800071128*^9, 3.8206778305654593`*^9}, 3.8206796433676567`*^9, 
   3.820684433922215*^9, {3.8206854995695667`*^9, 3.820685499643573*^9}, {
   3.820761139348852*^9, 3.820761139412613*^9}, {3.82137115283561*^9, 
   3.821371153169524*^9}, 3.82137215989401*^9, {3.821372208844553*^9, 
   3.821372211136488*^9}, {3.821372440580955*^9, 3.821372442082673*^9}, {
   3.8213726073436832`*^9, 3.821372612101767*^9}, {3.821372644026196*^9, 
   3.8213726546857862`*^9}, 3.8213727452764673`*^9, 3.821372816933597*^9, {
   3.821377424029314*^9, 3.8213774252807713`*^9}, {3.821377508962756*^9, 
   3.821377510839323*^9}, {3.821377644273079*^9, 3.821377670184609*^9}, {
   3.8213778053627453`*^9, 3.8213778322697363`*^9}, 3.8213779415368853`*^9, {
   3.8213779754501762`*^9, 3.82137797707434*^9}, {3.8213780900463448`*^9, 
   3.821378090219864*^9}, {3.821378130245943*^9, 3.821378134664302*^9}, {
   3.821378195057282*^9, 3.8213781951589937`*^9}, {3.821379029640356*^9, 
   3.821379041234646*^9}, {3.821379213741037*^9, 3.82137921381059*^9}, {
   3.821379268293709*^9, 3.8213792822376823`*^9}, {3.821383603372635*^9, 
   3.8213836034958773`*^9}, 3.821529676764312*^9, {3.8219647332976217`*^9, 
   3.82196477821877*^9}, {3.8220540927677803`*^9, 3.8220540929477777`*^9}, 
   3.822059062776175*^9, {3.8231867218009977`*^9, 3.823186746701519*^9}, 
   3.823186900972728*^9, 3.823186985900272*^9, 3.8231872684630527`*^9, 
   3.823258828213273*^9, {3.823276751222258*^9, 3.823276751878454*^9}, {
   3.823277248269758*^9, 3.8232772502235403`*^9}, {3.823277301608987*^9, 
   3.82327732372266*^9}, {3.8232773768488493`*^9, 3.823277385161632*^9}, {
   3.823354329853963*^9, 3.823354374633051*^9}, {3.8233550672152653`*^9, 
   3.82335510483569*^9}, {3.823355846025666*^9, 3.823355850400877*^9}, {
   3.823356375650487*^9, 3.82335638718099*^9}, 3.823356638611661*^9, {
   3.823358759979453*^9, 3.823358829038639*^9}, {3.823360495787045*^9, 
   3.8233606155880938`*^9}, 3.823360709185259*^9, {3.823360782068413*^9, 
   3.823360828074048*^9}, 3.823360862774787*^9, {3.8233612456969233`*^9, 
   3.8233612785627623`*^9}, {3.823361338042308*^9, 3.8233614014767847`*^9}, {
   3.823361819034419*^9, 3.8233618583386602`*^9}, {3.823362352144032*^9, 
   3.823362357554614*^9}, {3.823603336887515*^9, 3.8236033555068197`*^9}, {
   3.823604333338599*^9, 3.823604337121241*^9}, {3.823604701358395*^9, 
   3.8236047167944813`*^9}, {3.8236061896258087`*^9, 3.823606195963368*^9}, {
   3.823623453703115*^9, 3.8236234598786716`*^9}, {3.823624100539509*^9, 
   3.8236241030694036`*^9}, 3.823687963639204*^9, {3.823690138435788*^9, 
   3.8236902046651917`*^9}, {3.82369040312543*^9, 3.82369041339793*^9}, {
   3.823690458075992*^9, 3.82369049436409*^9}, 3.823690563294881*^9, {
   3.823690637516633*^9, 3.8236906499605103`*^9}, {3.823693810324979*^9, 
   3.8236938257007113`*^9}, {3.823694186027019*^9, 3.823694188000073*^9}, {
   3.82369492344376*^9, 3.823694962858471*^9}, 3.823698542738264*^9, {
   3.823701259313792*^9, 3.8237012823288603`*^9}, {3.8237132954891*^9, 
   3.823713298141306*^9}, 3.823771801735714*^9, {3.823774556281911*^9, 
   3.823774579833008*^9}, {3.823952427717947*^9, 3.823952428935265*^9}, {
   3.8239686334819813`*^9, 3.823968637478758*^9}, 3.823973993111155*^9, {
   3.823974052379888*^9, 3.823974056905164*^9}, {3.82397450486392*^9, 
   3.8239745055059557`*^9}, 3.823975827152975*^9, 3.8241414266896353`*^9, {
   3.82437945545656*^9, 3.824379460402397*^9}, {3.824382739750244*^9, 
   3.8243827528636627`*^9}, 3.824410437296386*^9, {3.8244106372051888`*^9, 
   3.824410637511156*^9}, 3.824410710032381*^9, 3.824411228990996*^9, {
   3.8244120207630577`*^9, 3.8244120208595457`*^9}, {3.824412242525154*^9, 
   3.824412243922002*^9}, 3.8244131483226852`*^9, {3.824413714508953*^9, 
   3.824413743114452*^9}, {3.824414105345402*^9, 3.824414131395782*^9}, 
   3.8244612479124517`*^9, {3.824468749222046*^9, 3.82446874943324*^9}, {
   3.824469071604707*^9, 3.8244690717245617`*^9}, {3.824469318281825*^9, 
   3.824469318642276*^9}, {3.824471026764824*^9, 3.82447103034974*^9}, 
   3.8244769680875*^9, 3.8244804096464252`*^9, {3.8244814964120073`*^9, 
   3.824481496562376*^9}, {3.824482169296081*^9, 3.824482169422476*^9}, {
   3.8244833223144903`*^9, 3.824483322419058*^9}, {3.824484288383286*^9, 
   3.824484288426372*^9}, {3.824484959879208*^9, 3.824484960037682*^9}, 
   3.824485799017062*^9, {3.824491712874806*^9, 3.82449172130261*^9}, {
   3.824491755639037*^9, 3.824491758953329*^9}, {3.8244919774923697`*^9, 
   3.824491978651677*^9}, {3.824492086034543*^9, 3.8244920968926687`*^9}, {
   3.824492480633847*^9, 3.8244924911383247`*^9}, {3.82449260822738*^9, 
   3.824492614245009*^9}, {3.8244930134148197`*^9, 3.8244930154494333`*^9}, {
   3.824493397517308*^9, 3.824493400331118*^9}, 3.824493536577374*^9, {
   3.824493571493371*^9, 3.824493589311504*^9}, {3.824493629915061*^9, 
   3.824493633585231*^9}, 3.824493697695731*^9, {3.824493744671885*^9, 
   3.824493768692247*^9}, 3.824493819105916*^9, {3.82449390608992*^9, 
   3.824493916437793*^9}, 3.824493963513588*^9, 3.824494024476259*^9, 
   3.824494093610952*^9, {3.824494167886512*^9, 3.824494169475438*^9}, {
   3.824494248737742*^9, 3.824494259671406*^9}, {3.8244943498896427`*^9, 
   3.824494368208419*^9}, {3.824494451038209*^9, 3.824494464193882*^9}, 
   3.824494571682438*^9, {3.824494633085661*^9, 3.8244946434411592`*^9}, {
   3.8244947089862633`*^9, 3.824494710109528*^9}, {3.824494838064609*^9, 
   3.8244948441623793`*^9}, 3.824494899517166*^9, {3.824494942376474*^9, 
   3.824494967400099*^9}, 3.824495336195929*^9, {3.82449538416643*^9, 
   3.824495391778504*^9}, {3.824495485962654*^9, 3.824495486123534*^9}, 
   3.824496946764797*^9, 3.824497147041007*^9, 3.824498670139642*^9, {
   3.824499554970436*^9, 3.824499555125655*^9}, {3.8245008899777737`*^9, 
   3.824500907407921*^9}, 3.8245009721617813`*^9, {3.824501028593796*^9, 
   3.8245010384600267`*^9}, {3.824501397182929*^9, 3.8245013990754843`*^9}, 
   3.824501472054173*^9, 3.824502314631413*^9, {3.824502547756926*^9, 
   3.8245025481770267`*^9}, {3.824502654600952*^9, 3.8245026642703047`*^9}, {
   3.8245027038038797`*^9, 3.824502704137587*^9}, 3.82450273723881*^9, {
   3.8245033133834877`*^9, 3.824503318344039*^9}, {3.8245042451583147`*^9, 
   3.824504252210175*^9}, {3.82454576558545*^9, 3.8245457673866673`*^9}, {
   3.824545847422228*^9, 3.824545870640326*^9}, {3.8245464363513403`*^9, 
   3.824546449058463*^9}, 3.8245465218414593`*^9, {3.824549811953105*^9, 
   3.824549821934454*^9}, {3.824554475371049*^9, 3.8245544861120462`*^9}, 
   3.824554720899143*^9, {3.824555032528363*^9, 3.8245550383537292`*^9}, {
   3.824555798381572*^9, 3.824555816983818*^9}, {3.8245560706075077`*^9, 
   3.824556078281468*^9}, 3.824558601993348*^9, 3.82456034035841*^9, {
   3.8245687882784357`*^9, 3.824568789462473*^9}, {3.824568823504283*^9, 
   3.824568832453084*^9}, 3.824569055012978*^9, {3.8245692045752897`*^9, 
   3.824569204990238*^9}, {3.824570037456352*^9, 3.8245700403411713`*^9}, 
   3.824570491975258*^9, 3.82457340064336*^9, {3.824576041462823*^9, 
   3.8245760414988127`*^9}, {3.824577712495678*^9, 3.824577723480227*^9}, {
   3.824578342643298*^9, 3.8245783448748693`*^9}, {3.824579240866201*^9, 
   3.82457924404547*^9}, {3.8245797070453672`*^9, 3.824579707207906*^9}, 
   3.824579785278674*^9, 3.824581852931054*^9, 3.824582293024435*^9, {
   3.824585253539732*^9, 3.824585277832926*^9}, {3.824588480019827*^9, 
   3.824588480037505*^9}, {3.824594074581046*^9, 3.824594161539977*^9}, 
   3.824601844011273*^9, 3.8246511022486563`*^9, {3.824652240962541*^9, 
   3.8246522423486233`*^9}, 3.824656140520975*^9, 3.82465629569659*^9, {
   3.8246574793187943`*^9, 3.824657480083178*^9}, 3.824658352124757*^9, {
   3.824674736855955*^9, 3.824674737105611*^9}, {3.824674942633939*^9, 
   3.824674946285067*^9}, 3.824675407614192*^9, {3.824675722041827*^9, 
   3.824675722164247*^9}, {3.8246758595024767`*^9, 3.82467585959861*^9}, {
   3.824676023944257*^9, 3.8246760305146646`*^9}, {3.8246761199662952`*^9, 
   3.8246761200541773`*^9}, {3.82467792839406*^9, 3.824677928509223*^9}, {
   3.824677996975586*^9, 3.824677997073854*^9}, 3.82468273307833*^9, 
   3.824689538610014*^9, 3.824689621153789*^9, {3.824689725170753*^9, 
   3.824689725265126*^9}, {3.824719738878327*^9, 3.824719739082161*^9}, {
   3.824720415237578*^9, 3.824720415370283*^9}, {3.82472047587001*^9, 
   3.824720475962554*^9}, {3.82472209174585*^9, 3.824722092555276*^9}, {
   3.824846984935656*^9, 3.824846988008669*^9}, {3.829989514742341*^9, 
   3.829989602037312*^9}, 3.829989655798883*^9, {3.829989880716971*^9, 
   3.829989912460012*^9}, {3.830511435622458*^9, 3.830511446859633*^9}, 
   3.830511496759448*^9, {3.830514691728743*^9, 3.830514692214171*^9}, {
   3.8305254813218613`*^9, 3.83052548134723*^9}, {3.8305371218954067`*^9, 
   3.830537126759416*^9}, {3.830611589326541*^9, 3.8306115894371777`*^9}, 
   3.830616594177703*^9, {3.8306170798734417`*^9, 3.830617080022849*^9}, {
   3.831031097528778*^9, 3.831031097546574*^9}, {3.831035643256023*^9, 
   3.831035643372965*^9}, {3.831036222157131*^9, 3.831036222317141*^9}, {
   3.831203221033771*^9, 3.831203221117064*^9}, {3.831476778419798*^9, 
   3.8314767785441303`*^9}, {3.831477015672556*^9, 3.8314770158556557`*^9}, 
   3.831486658447269*^9, {3.831544056489176*^9, 3.83154413658794*^9}, {
   3.831544599900083*^9, 3.83154468161555*^9}, {3.831548920748048*^9, 
   3.8315489458955383`*^9}, {3.831553516871561*^9, 3.831553529130679*^9}, 
   3.831573399506818*^9, 3.8315735584235573`*^9, 3.8315755661067963`*^9, 
   3.8316325217849417`*^9, 3.831633842935753*^9, {3.831647630350892*^9, 
   3.831647635514162*^9}, 3.831653324726994*^9, 3.8317170830317717`*^9, {
   3.8317183741894627`*^9, 3.831718393256557*^9}, 3.83174089517389*^9, {
   3.831740964587123*^9, 3.8317409791590977`*^9}, {3.831741075273628*^9, 
   3.831741076006957*^9}, 3.831742650355434*^9, {3.8317530613161907`*^9, 
   3.8317530698014717`*^9}, {3.83180315367906*^9, 3.8318031645040617`*^9}, {
   3.831808008107655*^9, 3.83180801329858*^9}, {3.831808334861651*^9, 
   3.8318083349965067`*^9}, 3.831808466750003*^9, 3.8318085281197433`*^9, {
   3.83181949147539*^9, 3.831819498531075*^9}, {3.8318277996031103`*^9, 
   3.8318278065353823`*^9}, 3.8320705206555233`*^9, 3.832070803004136*^9, {
   3.8322415756194344`*^9, 3.832241584028809*^9}, {3.832257402359761*^9, 
   3.8322574025671663`*^9}, 3.832258770055026*^9, {3.832260820094532*^9, 
   3.8322608250997057`*^9}, 3.83241838916847*^9, 3.8326849628407383`*^9, 
   3.832685459921321*^9, {3.8326857345663433`*^9, 3.832685735133979*^9}, 
   3.832693828731742*^9, {3.8326982988300533`*^9, 3.8326982989760227`*^9}, {
   3.832757692030427*^9, 3.8327576935318527`*^9}, 3.832758487325899*^9, {
   3.832758522611813*^9, 3.832758522757524*^9}, 3.832759903125404*^9, 
   3.832771761854797*^9, 3.832772092312181*^9, 3.832772378871694*^9, 
   3.8327777721299334`*^9, {3.832778255116062*^9, 3.83277825519536*^9}, 
   3.8327786087437077`*^9, {3.832782177853518*^9, 3.832782183394588*^9}, {
   3.832847775396257*^9, 3.832847779696179*^9}, {3.8328621967317743`*^9, 
   3.8328622000722723`*^9}, {3.8328638174477158`*^9, 3.832863817567882*^9}, {
   3.832867375595811*^9, 3.8328673841460533`*^9}, 3.832941338809259*^9, {
   3.8329459277243223`*^9, 3.832945930607555*^9}, {3.8329463695397167`*^9, 
   3.832946369653263*^9}, {3.832948192190167*^9, 3.8329481925418587`*^9}, {
   3.833293493616825*^9, 3.833293494777278*^9}, {3.833383110923499*^9, 
   3.833383115198398*^9}, {3.833383241423523*^9, 3.833383241521731*^9}, {
   3.833466334050963*^9, 3.8334663343377953`*^9}, 3.833466435874208*^9, {
   3.83459398735355*^9, 3.8345939876539392`*^9}, {3.834594184089438*^9, 
   3.834594187210463*^9}, {3.8345948106412897`*^9, 3.834594823251266*^9}, 
   3.834596447974815*^9, 3.834655746933361*^9, 3.8346572644287853`*^9, {
   3.8347428950473137`*^9, 3.834742904732718*^9}, 3.834743186730094*^9, {
   3.834751187708606*^9, 3.8347511959038153`*^9}, {3.834757030334469*^9, 
   3.834757030811183*^9}, {3.834763148343298*^9, 3.834763148664187*^9}, {
   3.834766072634737*^9, 3.834766072984228*^9}, 3.834766238874166*^9, {
   3.834827633670229*^9, 3.834827633759055*^9}, 3.8348299177042627`*^9, 
   3.834830258998584*^9, {3.834831426450355*^9, 3.834831426756007*^9}, 
   3.834832584831909*^9, {3.834832631975512*^9, 3.834832639735272*^9}, {
   3.834833061993587*^9, 3.834833079479603*^9}, 3.834833745270382*^9, {
   3.834833842628992*^9, 3.8348338429009247`*^9}, {3.8348344139582157`*^9, 
   3.834834414147791*^9}, 3.834834529284032*^9, {3.8348357860657597`*^9, 
   3.8348357877192698`*^9}, {3.834835880103257*^9, 3.834835880434967*^9}, {
   3.834836662637192*^9, 3.834836662929764*^9}, 3.834841381848423*^9, 
   3.834842046548567*^9, 3.834842961463656*^9, 3.834850075221129*^9, 
   3.834850364692037*^9, 3.834850461031384*^9, {3.835092175421053*^9, 
   3.83509218194565*^9}, {3.835092328099895*^9, 3.8350923310084867`*^9}, 
   3.835092706819311*^9, 3.835102266505163*^9, 3.8351038868303137`*^9, 
   3.835108364156933*^9, 3.835109580777031*^9, {3.835112258570853*^9, 
   3.835112258705514*^9}, {3.835173483449799*^9, 3.8351735117482433`*^9}, {
   3.835176216520455*^9, 3.835176253916696*^9}, {3.835177054432707*^9, 
   3.835177067186037*^9}, {3.8351771007968273`*^9, 3.83517710482305*^9}, {
   3.835177159410508*^9, 3.835177200576289*^9}, {3.8351772310191507`*^9, 
   3.8351772705377493`*^9}, {3.83517834205418*^9, 3.835178347141088*^9}, {
   3.835178672135365*^9, 3.835178678117738*^9}, {3.83517915086117*^9, 
   3.835179154147079*^9}, 3.835179525346792*^9, {3.8351802759779873`*^9, 
   3.835180289941236*^9}, {3.835180498897543*^9, 3.835180504203664*^9}, {
   3.835183018823934*^9, 3.8351830219316473`*^9}, {3.835183597851571*^9, 
   3.835183617144773*^9}, {3.835183655857258*^9, 3.835183687056574*^9}, {
   3.835190391192082*^9, 3.835190400234989*^9}, {3.8351905837746162`*^9, 
   3.835190587045301*^9}, {3.83519064362633*^9, 3.8351906511441917`*^9}, {
   3.83519186009225*^9, 3.835191869926903*^9}, {3.835191917899403*^9, 
   3.83519195426164*^9}, {3.8351922962058687`*^9, 3.835192305683522*^9}, {
   3.835192619837935*^9, 3.835192633864287*^9}, {3.835193841240609*^9, 
   3.8351938890020742`*^9}, 3.835194444602276*^9, {3.83519448162547*^9, 
   3.835194538835277*^9}, {3.835194907201537*^9, 3.835194916678535*^9}, {
   3.835194947434949*^9, 3.8351949905566683`*^9}, {3.8351955693291397`*^9, 
   3.8351955917207613`*^9}, {3.835196291656901*^9, 3.835196309269205*^9}, {
   3.835196616581573*^9, 3.8351966277784367`*^9}, {3.83519692409805*^9, 
   3.8351969242456293`*^9}, {3.835197301387293*^9, 3.835197331978176*^9}, {
   3.8351974330644217`*^9, 3.835197455358531*^9}, {3.8351980064986134`*^9, 
   3.8351980093630533`*^9}, {3.835198540360824*^9, 3.8351985674301577`*^9}, {
   3.835199980671433*^9, 3.835199997392323*^9}, {3.835262653606791*^9, 
   3.835262659369582*^9}, {3.8352641687219563`*^9, 3.835264182288313*^9}, {
   3.835265007621646*^9, 3.835265132978218*^9}, {3.83526750968114*^9, 
   3.8352675263953543`*^9}, {3.835271134430439*^9, 3.835271146591187*^9}, {
   3.83527130610849*^9, 3.835271311219296*^9}, {3.8352742557555447`*^9, 
   3.835274275833157*^9}, 3.835274945567725*^9, {3.835275277576985*^9, 
   3.835275282738942*^9}, {3.835275894244038*^9, 3.835275939446355*^9}, {
   3.835277330881167*^9, 3.8352773529746933`*^9}, {3.835283561746182*^9, 
   3.835283604033843*^9}, {3.835283637618505*^9, 3.835283684536867*^9}, {
   3.8352837568884163`*^9, 3.835283758394034*^9}, {3.835286066992778*^9, 
   3.835286121980225*^9}, {3.8352861521159563`*^9, 3.8352861740771103`*^9}, {
   3.835286929010169*^9, 3.835286949591872*^9}, {3.835346665145402*^9, 
   3.835346708448056*^9}, {3.835346748575014*^9, 3.835346751318446*^9}, {
   3.835348911533306*^9, 3.835348912124097*^9}, {3.8353499436118383`*^9, 
   3.835349943766489*^9}, 3.835351095623351*^9, 3.835351553646503*^9, {
   3.83535224593209*^9, 3.835352258572028*^9}, {3.835352898069886*^9, 
   3.835352898319632*^9}, {3.835353409021864*^9, 3.835353412004641*^9}, {
   3.8353541756512814`*^9, 3.835354178343213*^9}, {3.835354412700335*^9, 
   3.835354412950841*^9}, {3.835354931938403*^9, 3.8353549343379583`*^9}, {
   3.835355161350313*^9, 3.835355167350568*^9}, {3.8353558221950293`*^9, 
   3.835355824250682*^9}, {3.835360617316148*^9, 3.8353606259054737`*^9}, 
   3.835360673007964*^9, {3.835364774664802*^9, 3.835364776340891*^9}, {
   3.8353688435005817`*^9, 3.835368870273938*^9}, 3.8353689722912083`*^9, {
   3.835369578201137*^9, 3.835369582833392*^9}, {3.83536963212061*^9, 
   3.835369633568508*^9}, {3.835371380549184*^9, 3.8353713994237347`*^9}, {
   3.835371884758871*^9, 3.835371945507621*^9}, {3.835371982429647*^9, 
   3.8353720053134327`*^9}, {3.8353729727011023`*^9, 3.835372979807404*^9}, {
   3.835373028339613*^9, 3.8353730376604233`*^9}, {3.8353734882641706`*^9, 
   3.835373503501165*^9}, {3.835373751119479*^9, 3.83537375255504*^9}, {
   3.8353748752585487`*^9, 3.8353748986556387`*^9}, {3.83543112747535*^9, 
   3.835431133284197*^9}, 3.835431780158753*^9, {3.835434725362328*^9, 
   3.835434730509069*^9}, 3.835435581031542*^9, {3.835436075556943*^9, 
   3.835436088857777*^9}, {3.835449989881668*^9, 3.835449997240096*^9}, {
   3.835450047437291*^9, 3.835450150465197*^9}, {3.835450184519182*^9, 
   3.835450211022769*^9}, {3.835450241129047*^9, 3.8354502501391153`*^9}, {
   3.835450449733766*^9, 3.835450482384078*^9}, {3.83545053204344*^9, 
   3.835450532732201*^9}, 3.835450566369425*^9, {3.835450607308566*^9, 
   3.835450612043315*^9}, {3.8354506708582478`*^9, 3.8354506723840857`*^9}, {
   3.835450746151566*^9, 3.8354507661763077`*^9}, {3.8354508356997128`*^9, 
   3.835450836709855*^9}, {3.835452653002746*^9, 3.8354527282415743`*^9}, {
   3.835455036538165*^9, 3.835455040704797*^9}, {3.8354577006925583`*^9, 
   3.8354577028434896`*^9}, 3.835461486316723*^9, {3.835466907853498*^9, 
   3.8354669154835997`*^9}, {3.835467685744318*^9, 3.835467686168734*^9}, {
   3.835468880099365*^9, 3.835468885705039*^9}, {3.835469821946382*^9, 
   3.835469824622767*^9}, {3.835472690329018*^9, 3.835472691972723*^9}, {
   3.8354732847283792`*^9, 3.835473287388708*^9}, {3.835519280721225*^9, 
   3.835519283818404*^9}, 3.835521766234023*^9, 3.835521948917666*^9, {
   3.835523291398349*^9, 3.8355233186131077`*^9}, 3.8355359645462427`*^9, {
   3.83553711333989*^9, 3.835537114966844*^9}, {3.835539674320301*^9, 
   3.835539678283692*^9}, {3.8355415291356497`*^9, 3.8355415324263687`*^9}, {
   3.835546362952829*^9, 3.835546367829172*^9}, 3.835546673058127*^9, {
   3.835546833175252*^9, 3.835546840542079*^9}, {3.835546955684126*^9, 
   3.8355469615753813`*^9}, {3.8355472090657053`*^9, 3.835547211679345*^9}, {
   3.835547386125451*^9, 3.835547388157769*^9}, {3.835547626539917*^9, 
   3.835547628945211*^9}, {3.835547984096633*^9, 3.835547989772773*^9}, 
   3.835548426857147*^9, {3.835548499977034*^9, 3.835548514670495*^9}, 
   3.835549605298604*^9, {3.8355497885470448`*^9, 3.835549791683075*^9}, 
   3.835550340418297*^9, 3.8356065638774*^9, {3.835607076940117*^9, 
   3.8356070888782473`*^9}, {3.8356083067952414`*^9, 3.83560831388662*^9}, 
   3.835608960731229*^9, {3.835609165966236*^9, 3.835609185065641*^9}, 
   3.835609587694675*^9, 3.835610386850667*^9, {3.835611258261477*^9, 
   3.835611258653234*^9}, 3.835612084281921*^9, {3.835631032993718*^9, 
   3.835631033476293*^9}, 3.8356316742168207`*^9, {3.835632848002099*^9, 
   3.83563284837582*^9}, {3.8356329590294933`*^9, 3.835632963708612*^9}, {
   3.835633587298517*^9, 3.83563359045725*^9}, {3.835633682759083*^9, 
   3.835633684884879*^9}, {3.8356339098124847`*^9, 3.835633914307781*^9}, {
   3.8356346493227654`*^9, 3.835634652954937*^9}, {3.835634853499305*^9, 
   3.8356348588756533`*^9}, {3.8356352393159437`*^9, 3.835635239741207*^9}, {
   3.835635786069881*^9, 3.835635786073039*^9}, {3.8356358676266413`*^9, 
   3.835635874615375*^9}, {3.8356368728934507`*^9, 3.8356368760176477`*^9}, {
   3.835637301966064*^9, 3.835637304644854*^9}, {3.835637369520919*^9, 
   3.8356373709042253`*^9}, {3.835637915749569*^9, 3.8356379262336073`*^9}, {
   3.8356380051986523`*^9, 3.835638005346799*^9}, {3.835638246143506*^9, 
   3.8356382467267942`*^9}, {3.835638598823629*^9, 3.835638599625251*^9}, {
   3.83563874615102*^9, 3.835638746279097*^9}, 3.835638838643261*^9, 
   3.835639039679661*^9, {3.835640259786871*^9, 3.835640265114506*^9}, {
   3.8356415594544497`*^9, 3.835641566351548*^9}, 3.835641859324967*^9, {
   3.835642344618906*^9, 3.835642346991308*^9}, {3.835642410074106*^9, 
   3.835642410213546*^9}, {3.835643503225967*^9, 3.835643506103808*^9}, {
   3.83564433258225*^9, 3.8356443418775253`*^9}, {3.835645449767379*^9, 
   3.835645454387128*^9}, 3.835645940890593*^9, {3.835647200865821*^9, 
   3.8356472325129547`*^9}, {3.835656395345228*^9, 3.835656395585311*^9}, {
   3.835658828581891*^9, 3.835658828731573*^9}, 3.835687781607276*^9, {
   3.835689309339093*^9, 3.835689309430286*^9}, {3.8356897474863358`*^9, 
   3.835689747647252*^9}, {3.8356901381106167`*^9, 3.835690140850317*^9}, {
   3.8357002722020597`*^9, 3.8357002923498697`*^9}, 3.835708602650674*^9, 
   3.8357117569791803`*^9, {3.835712066430442*^9, 3.835712081564542*^9}, {
   3.835719042647882*^9, 3.835719072096448*^9}, {3.835720657054874*^9, 
   3.835720671166284*^9}, {3.835790333656633*^9, 3.835790337720249*^9}, 
   3.835794047888351*^9, 3.8357995109153*^9, {3.835804592920411*^9, 
   3.83580460131318*^9}, {3.835811405811571*^9, 3.835811409366666*^9}, {
   3.836139551074511*^9, 3.8361396266117687`*^9}, {3.8361400933260107`*^9, 
   3.836140099034227*^9}, {3.836140567088771*^9, 3.836140622028061*^9}, {
   3.836140689910894*^9, 3.836140701283955*^9}, {3.8361424866459913`*^9, 
   3.836142489847726*^9}, {3.836143553958946*^9, 3.836143561141139*^9}, 
   3.8361480221739283`*^9, {3.836150261136323*^9, 3.8361502685676937`*^9}, 
   3.836152530262444*^9, {3.836155684858142*^9, 3.836155690035212*^9}, 
   3.836159593904134*^9, {3.836164581603735*^9, 3.836164587280181*^9}, 
   3.83616931652707*^9, {3.836171930371501*^9, 3.836171930467889*^9}, {
   3.8361792812940407`*^9, 3.836179301388916*^9}, {3.836207766874269*^9, 
   3.836207780686399*^9}, 3.836213120778802*^9, 3.83621950231288*^9, 
   3.836220074288919*^9, 3.836221718670507*^9, {3.836224190539587*^9, 
   3.8362241933496513`*^9}, {3.836224318363078*^9, 3.836224340019734*^9}, {
   3.8362243754856987`*^9, 3.836224375584313*^9}, {3.836227540199216*^9, 
   3.8362275440004997`*^9}, {3.8362300630609627`*^9, 3.836230063816594*^9}, {
   3.836232275208941*^9, 3.8362322784917603`*^9}, 3.83623423086828*^9, 
   3.8362371960657*^9, {3.8362385438609324`*^9, 3.8362385442771997`*^9}, {
   3.836240598201318*^9, 3.83624059901373*^9}, {3.8362419613204317`*^9, 
   3.836241962006974*^9}, {3.83624338389583*^9, 3.836243384793947*^9}, {
   3.836256376651741*^9, 3.836256391781005*^9}, {3.836259012441062*^9, 
   3.8362590168238707`*^9}, 3.836294694579359*^9, 3.8362963086328983`*^9, 
   3.836299776081442*^9, {3.8363023252655478`*^9, 3.836302346654272*^9}, {
   3.8363031624011793`*^9, 3.836303184212966*^9}, {3.836303215468656*^9, 
   3.836303217392302*^9}, 3.836305727883378*^9, 3.836308520510829*^9, {
   3.836315249495007*^9, 3.836315250856617*^9}, 3.8363199647469587`*^9, 
   3.836325363334527*^9, {3.836329104346115*^9, 3.836329105527258*^9}, 
   3.83633309663033*^9, {3.8363430376918373`*^9, 3.836343052316739*^9}, {
   3.8364698341121607`*^9, 3.836469853862442*^9}, {3.836492760426173*^9, 
   3.836492767372239*^9}, {3.8365182432862473`*^9, 3.836518250892527*^9}, {
   3.837074391993764*^9, 3.837074451397306*^9}, {3.837074829632812*^9, 
   3.837074850303533*^9}, {3.841481488241457*^9, 3.841481500423806*^9}, {
   3.841481914425673*^9, 3.8414819166717167`*^9}, 3.8419983944730663`*^9, 
   3.8420010769030933`*^9, {3.842002054336804*^9, 3.8420020722470903`*^9}, {
   3.8420023093998613`*^9, 3.842002317518053*^9}, 3.8420052874649277`*^9, 
   3.842005721173195*^9, {3.8426895741405697`*^9, 3.842689589532139*^9}, {
   3.84322697302175*^9, 3.843226973332077*^9}, {3.843227062327504*^9, 
   3.843227071861596*^9}, {3.843239909135166*^9, 3.8432399219784307`*^9}, {
   3.843739778925325*^9, 3.843739779062771*^9}, 3.843740527267536*^9, {
   3.843740708989615*^9, 3.843740709077368*^9}, {3.8437408915470047`*^9, 
   3.843740897230722*^9}, {3.843742533643969*^9, 3.843742533814537*^9}, {
   3.843748428243691*^9, 3.843748432344982*^9}, 3.843748654350521*^9, {
   3.8437488637223663`*^9, 3.843748875313971*^9}, 3.8437518895708857`*^9, 
   3.84391459188412*^9, {3.84391519039119*^9, 3.8439151920700703`*^9}, 
   3.843915300920294*^9, {3.843915463046009*^9, 3.843915477643146*^9}, {
   3.84391574428614*^9, 3.8439157468111973`*^9}, 3.84391699649901*^9, 
   3.8439178882601337`*^9, 3.843922788105219*^9, 3.844166209124114*^9, 
   3.8442538518093643`*^9, 3.844260135659666*^9, {3.844845788879637*^9, 
   3.8448457937229137`*^9}, {3.844846166863648*^9, 3.844846167199209*^9}, {
   3.8448462901885366`*^9, 3.8448463242268333`*^9}, 3.8448480363554783`*^9, 
   3.844855844867051*^9, {3.844856065873721*^9, 3.844856069574379*^9}, {
   3.844856199674197*^9, 3.844856201403325*^9}, {3.844863113254751*^9, 
   3.844863115275509*^9}, {3.844864888725334*^9, 3.8448648900974607`*^9}, 
   3.8448700641497107`*^9, 3.844872783899458*^9, 3.8448747701052027`*^9, 
   3.8448752190916*^9, {3.844877282835391*^9, 3.8448773101011877`*^9}, {
   3.8448783221815*^9, 3.8448783254313793`*^9}, 3.844879614347968*^9, 
   3.844882007921904*^9, 3.8448823232380543`*^9, {3.844941950726104*^9, 
   3.844941975824149*^9}, {3.844942108145712*^9, 3.844942114142436*^9}, {
   3.8449455810649347`*^9, 3.844945584216565*^9}, {3.844945754223756*^9, 
   3.844945769120434*^9}, 3.844947593750298*^9, {3.844947966681582*^9, 
   3.8449480102506227`*^9}, 3.844948244106728*^9, 3.8449489530189667`*^9, {
   3.844950044011249*^9, 3.844950044277495*^9}, 3.844957071543461*^9, {
   3.844961001362109*^9, 3.844961025831657*^9}, {3.8449612377671432`*^9, 
   3.844961238206471*^9}, 3.8449614029897547`*^9, {3.8449614775793047`*^9, 
   3.844961489501568*^9}, {3.84496345597742*^9, 3.8449634595041847`*^9}, 
   3.844963568427742*^9, {3.8449637079596157`*^9, 3.844963721997798*^9}, 
   3.844965691083585*^9, 3.844966417979518*^9, {3.844966711895177*^9, 
   3.844966714710401*^9}, {3.845031107294063*^9, 3.845031146331912*^9}, 
   3.845109906477491*^9, 3.845110620083844*^9, {3.845112470725471*^9, 
   3.845112472880999*^9}, {3.845121835780406*^9, 3.845121839078734*^9}, {
   3.845121879243977*^9, 3.845121907778674*^9}, {3.8451219582394333`*^9, 
   3.845121958434967*^9}, {3.845122654842204*^9, 3.845122656282112*^9}, 
   3.8451238952597313`*^9, {3.845125527907577*^9, 3.8451255295032463`*^9}, 
   3.845126555029566*^9, 3.845128339891942*^9, {3.845129406977528*^9, 
   3.845129414235044*^9}, {3.8451300202456408`*^9, 3.845130023680265*^9}, {
   3.84513031488309*^9, 3.845130315194708*^9}, {3.8451305464527607`*^9, 
   3.845130551832087*^9}, 3.845131523591223*^9, {3.8451322107048273`*^9, 
   3.8451322113338537`*^9}, 3.845133037532124*^9, {3.845133261341919*^9, 
   3.845133265152855*^9}, {3.845133883852376*^9, 3.8451338847530527`*^9}, {
   3.845135210086274*^9, 3.84513521227221*^9}, {3.845136814732891*^9, 
   3.8451368280821743`*^9}, 3.8451374768089323`*^9, {3.845137998774135*^9, 
   3.845138000670699*^9}, {3.8453716230677347`*^9, 3.8453716325363092`*^9}, {
   3.845373165097043*^9, 3.8453731699543447`*^9}, {3.845374544619669*^9, 
   3.845374551899081*^9}, {3.8453754240594187`*^9, 3.8453754286031113`*^9}, 
   3.845375542464628*^9, {3.845376104135931*^9, 3.8453761047068872`*^9}, {
   3.8453787925904827`*^9, 3.84537879537341*^9}, {3.845379477103894*^9, 
   3.845379481513034*^9}, {3.845380094411549*^9, 3.845380095755999*^9}, 
   3.845380692592964*^9, {3.845382784875369*^9, 3.845382784989209*^9}, {
   3.8453837236176367`*^9, 3.8453837292851763`*^9}, 3.8453840901462917`*^9, {
   3.8453847238023233`*^9, 3.845384750130554*^9}, 3.845384934196032*^9, 
   3.845386511048645*^9, {3.8453868200358458`*^9, 3.8453868201331263`*^9}, {
   3.845387594128537*^9, 3.8453875973352547`*^9}, {3.84538937054486*^9, 
   3.8453893707212677`*^9}, 3.845394100651428*^9, {3.8453942633929157`*^9, 
   3.845394269942133*^9}, 3.845394568599805*^9, {3.845394747299581*^9, 
   3.845394747395973*^9}, 3.845396550316617*^9, {3.845396584421588*^9, 
   3.8453966234424667`*^9}, {3.845397124714779*^9, 3.8453971267746067`*^9}, 
   3.84539735809081*^9, {3.845398088537994*^9, 3.845398088811008*^9}, 
   3.845398502588813*^9, {3.8453986354820347`*^9, 3.845398638301716*^9}, 
   3.845399020309443*^9, {3.84539911260933*^9, 3.845399112696456*^9}, 
   3.8453994742589006`*^9, {3.8453995493083153`*^9, 3.845399549761314*^9}, {
   3.84539996273059*^9, 3.8453999638778954`*^9}, 3.8454003126101227`*^9, 
   3.845400446817849*^9, 3.84540065305075*^9, 3.8454007946740913`*^9, {
   3.845403258897007*^9, 3.845403259094369*^9}, {3.845403379435788*^9, 
   3.845403379520666*^9}, 3.84540455937351*^9, 3.845460390303298*^9, 
   3.8454622198365927`*^9, 3.845463411035866*^9, 3.845469465675424*^9, 
   3.845470341375732*^9, {3.845477259878932*^9, 3.8454772894729424`*^9}, {
   3.845477820087738*^9, 3.845477824259544*^9}, {3.8454788659655237`*^9, 
   3.845478871046484*^9}, {3.8454795282431498`*^9, 3.845479528594211*^9}, {
   3.845480946064417*^9, 3.845480946411735*^9}, {3.845481838003016*^9, 
   3.845481838244751*^9}, 3.84548204062394*^9, {3.845482449918721*^9, 
   3.8454824526457233`*^9}, {3.8454856398320932`*^9, 3.8454856467284603`*^9}, 
   3.845510314535274*^9, {3.845510750208535*^9, 3.8455108985858927`*^9}, 
   3.845512251851364*^9, {3.8455420317891197`*^9, 3.845542086235256*^9}, 
   3.845542568355424*^9, {3.8455433160664463`*^9, 3.8455433216870728`*^9}, {
   3.84554354455905*^9, 3.845543550010841*^9}, {3.845543794051914*^9, 
   3.845543800903819*^9}, {3.8455439071809397`*^9, 3.8455439123440943`*^9}, {
   3.845544837962225*^9, 3.8455448380459213`*^9}, {3.8455466991081533`*^9, 
   3.845546707142412*^9}, {3.8455473314535637`*^9, 3.8455474258190813`*^9}, {
   3.845547668277995*^9, 3.8455476867311993`*^9}, {3.845548882250566*^9, 
   3.845548891799768*^9}, 3.845549507219761*^9, 3.8455504003116503`*^9, 
   3.845550438539719*^9, {3.8455522988813047`*^9, 3.845552309940572*^9}, 
   3.8455535745182056`*^9, {3.8456339983424177`*^9, 3.8456340278154182`*^9}, 
   3.845634404951208*^9, {3.845634616948501*^9, 3.845634618063878*^9}, {
   3.845666864282341*^9, 3.845666905268319*^9}, 3.845669396158519*^9, {
   3.845718918103591*^9, 3.845718950171109*^9}, {3.845719914569866*^9, 
   3.8457199264639807`*^9}, {3.845720920180537*^9, 3.845720922307621*^9}, {
   3.845723466055427*^9, 3.8457234875431833`*^9}, 3.845725146116794*^9, {
   3.84572988028605*^9, 3.845729893018579*^9}, {3.845733899488557*^9, 
   3.845733900961162*^9}, 3.8457340563548326`*^9, {3.845734752706788*^9, 
   3.845734756190999*^9}, {3.845735351348439*^9, 3.845735358945818*^9}, {
   3.845735475104451*^9, 3.845735487397901*^9}, {3.8457361179403*^9, 
   3.845736119971333*^9}, 3.845736451232605*^9, {3.845772817389077*^9, 
   3.845772850261087*^9}, {3.845773856911923*^9, 3.8457738671594687`*^9}, 
   3.8457742454213953`*^9, 3.845775151713622*^9, {3.84577518517446*^9, 
   3.845775194676414*^9}, {3.845775564905182*^9, 3.845775568265974*^9}, {
   3.8457758989926243`*^9, 3.84577590411569*^9}, 3.845777017396832*^9, 
   3.84577724528966*^9, 3.845806348149075*^9, {3.8458064561091423`*^9, 
   3.84580645623592*^9}, 3.84582054406318*^9, 3.8458232348384933`*^9, {
   3.845828099627614*^9, 3.84582810397183*^9}, {3.8458519265895433`*^9, 
   3.845851947532864*^9}, {3.8458523600133*^9, 3.845852367555155*^9}, {
   3.8458572057582483`*^9, 3.845857209451457*^9}, {3.8458601131128902`*^9, 
   3.845860114304945*^9}, {3.845860460749896*^9, 3.845860478598433*^9}, {
   3.845860617673667*^9, 3.845860622398219*^9}, {3.845883838114304*^9, 
   3.845883838190744*^9}, 3.845884850265476*^9, {3.845899723293129*^9, 
   3.845899729817514*^9}, {3.845900004445265*^9, 3.845900021044262*^9}, {
   3.8459042537917643`*^9, 3.845904255515436*^9}, {3.845904832324946*^9, 
   3.845904836706017*^9}, {3.845922027908476*^9, 3.845922069525816*^9}, {
   3.8459344633891687`*^9, 3.845934473176676*^9}, 3.8459356479125547`*^9, 
   3.8459366029747458`*^9, {3.845979783954608*^9, 3.845979795637617*^9}, {
   3.846008142921769*^9, 3.84600814599763*^9}, 3.846015669703974*^9, {
   3.846017990389263*^9, 3.846017990400298*^9}, {3.846776554532737*^9, 
   3.846776567977831*^9}, {3.84677671315165*^9, 3.846776721940804*^9}, {
   3.846777409357435*^9, 3.846777439037518*^9}, {3.8467776175458508`*^9, 
   3.846777650074782*^9}, 3.846777736728574*^9, {3.850990507051817*^9, 
   3.850990521320304*^9}, 3.850990914518853*^9, {3.850990984122566*^9, 
   3.850990984275181*^9}, 3.850991302353074*^9, {3.851005567811549*^9, 
   3.8510055712513113`*^9}, 3.851006481424851*^9, {3.8510984381947947`*^9, 
   3.851098446830113*^9}, {3.851098484257711*^9, 3.851098492545776*^9}, 
   3.8510985557205753`*^9, {3.8511624704529037`*^9, 3.851162498775166*^9}, {
   3.851162778608416*^9, 3.851162803156255*^9}, {3.851162907230542*^9, 
   3.851162907705299*^9}, 3.851163011717169*^9, {3.851163066209427*^9, 
   3.85116307018864*^9}, 3.85116347753967*^9, {3.8511635511018667`*^9, 
   3.8511635623094273`*^9}, {3.851163705401779*^9, 3.8511637106493397`*^9}, {
   3.851163967420866*^9, 3.851163967836048*^9}, {3.851164172868635*^9, 
   3.851164176178014*^9}, {3.851166428624505*^9, 3.8511664452951813`*^9}, {
   3.8511677145514297`*^9, 3.85116772973032*^9}, {3.851168244889882*^9, 
   3.851168245590848*^9}, 3.851169073658041*^9, {3.8511696711888037`*^9, 
   3.851169671588922*^9}, {3.853499410971225*^9, 3.8534994136369658`*^9}, {
   3.8539501946110163`*^9, 3.853950194765171*^9}, {3.854099320734169*^9, 
   3.854099326130427*^9}, {3.854099497899685*^9, 3.854099513234441*^9}, 
   3.8540999549064493`*^9, {3.854100075474039*^9, 3.854100171888076*^9}, {
   3.85410043142177*^9, 3.854100432614698*^9}, {3.854100793136633*^9, 
   3.854100802170246*^9}, {3.85410083450183*^9, 3.854100834610186*^9}, 
   3.854100906300597*^9, 3.854105036660687*^9, {3.854106687617216*^9, 
   3.854106697883758*^9}, {3.854445447011832*^9, 3.854445499984994*^9}, {
   3.854448081007832*^9, 3.854448085984467*^9}, {3.854449321558072*^9, 
   3.8544493302860603`*^9}, {3.85447368633494*^9, 3.85447369007165*^9}, {
   3.8544750772530527`*^9, 3.854475080493394*^9}, {3.854476153105608*^9, 
   3.854476159523871*^9}, {3.854532244182086*^9, 3.854532248493373*^9}, 
   3.854532698051196*^9, 3.854534224562451*^9, 3.8545366998853416`*^9, 
   3.854538881128544*^9, 3.854540038741282*^9, 3.854541685124447*^9, 
   3.854553722912842*^9, 3.8545547472220097`*^9, {3.8546159578510513`*^9, 
   3.854615960265827*^9}, {3.854617058936112*^9, 3.854617064239244*^9}, 
   3.8546225783823433`*^9, 3.854623949708995*^9, 3.854624253972166*^9, 
   3.85463668937184*^9, {3.8546419067981863`*^9, 3.854641906908249*^9}, 
   3.8546430531571074`*^9, 3.854646449790228*^9, {3.854702894158869*^9, 
   3.854702898647691*^9}, 3.8547065085041227`*^9, {3.854707875304266*^9, 
   3.854707876274675*^9}, 3.8547130181552973`*^9, 3.854714246808654*^9, 
   3.854724993388075*^9, 3.854733298553906*^9, {3.854785270341319*^9, 
   3.8547852942578907`*^9}, {3.8547855400983067`*^9, 3.854785541025112*^9}, {
   3.8547887353449173`*^9, 3.854788762826858*^9}, {3.854791511301353*^9, 
   3.85479151525063*^9}, {3.8547920150621653`*^9, 3.8547920194040728`*^9}, {
   3.855047956741419*^9, 3.8550479843832693`*^9}, 3.855052257598361*^9, {
   3.855055073808415*^9, 3.855055074128663*^9}, {3.85505531600931*^9, 
   3.855055316082065*^9}, 3.855055692898889*^9, {3.85505589022523*^9, 
   3.855055891151684*^9}, {3.8550560893588467`*^9, 3.8550560966519623`*^9}, {
   3.855148318880033*^9, 3.855148320150077*^9}, {3.855154975206047*^9, 
   3.855154977413459*^9}, {3.855155053397197*^9, 3.855155054023333*^9}, {
   3.8551599747767763`*^9, 3.855159991390624*^9}, 3.855187920069433*^9, {
   3.85523989366357*^9, 3.85523990380121*^9}, {3.855247590295889*^9, 
   3.85524759993943*^9}, 3.855247764531158*^9, 3.855254707077674*^9, {
   3.855310708005664*^9, 3.855310711213787*^9}, {3.855311738312851*^9, 
   3.855311740805813*^9}, 3.855312826467784*^9, 3.855325389886937*^9, {
   3.855338751840206*^9, 3.8553387518497887`*^9}, 3.855340138745021*^9, 
   3.8553415886282997`*^9, 3.8553429702009563`*^9, 3.85535145644131*^9, 
   3.855396113261153*^9, 3.8554207668026247`*^9, {3.8554327317999067`*^9, 
   3.855432734418141*^9}, {3.8555226522559557`*^9, 3.855522655105702*^9}, {
   3.861272896330673*^9, 3.8612729027430058`*^9}, 3.8613574332511053`*^9, 
   3.8613574742411327`*^9, 3.861373426696055*^9, 3.861810082280422*^9, {
   3.8618131475796967`*^9, 3.8618131698780203`*^9}, 3.861815655211836*^9, 
   3.8618157721544437`*^9, 3.861873548359015*^9, {3.861876350566114*^9, 
   3.861876353062379*^9}, 3.86188691698158*^9, {3.8618904386332684`*^9, 
   3.861890438699481*^9}, 3.8618971540081797`*^9, 3.8619104181419563`*^9, {
   3.86191670092295*^9, 3.861916700961287*^9}, 3.8619574820358677`*^9, 
   3.8619578972220917`*^9, 3.861977664380062*^9, 3.861977829958987*^9, {
   3.861983804605852*^9, 3.86198381437387*^9}, {3.861984975409629*^9, 
   3.861984993775919*^9}, {3.862050582113213*^9, 3.862050595364005*^9}, {
   3.862476881431806*^9, 3.862476881536312*^9}, 3.8635498564256563`*^9, {
   3.863550870854823*^9, 3.863550910396307*^9}, 3.8635978463099194`*^9, {
   3.863598182397912*^9, 3.863598190270442*^9}, {3.8635983258264713`*^9, 
   3.86359832814491*^9}, 3.863598387062508*^9, 3.86361918953817*^9, 
   3.863706102070169*^9, 3.86370667656982*^9, {3.8637072236360207`*^9, 
   3.863707231290745*^9}, {3.8637076941267967`*^9, 3.863707695272702*^9}, {
   3.863708211663434*^9, 3.8637082130835037`*^9}, {3.8637087104006643`*^9, 
   3.863708711479844*^9}, {3.863708937375023*^9, 3.863708942992313*^9}, {
   3.863709891379531*^9, 3.863709905139497*^9}, {3.863709999196258*^9, 
   3.863710001908877*^9}, {3.863710052189063*^9, 3.863710063669538*^9}, {
   3.863711086776588*^9, 3.863711086960847*^9}, 3.86371113347409*^9, {
   3.863713334506444*^9, 3.863713352597397*^9}, {3.863713389476039*^9, 
   3.8637133896239758`*^9}, 3.863714414200577*^9, {3.863714487353479*^9, 
   3.8637144874959183`*^9}, 3.863714700096484*^9, {3.863714952005862*^9, 
   3.863714952130862*^9}, {3.863716847602275*^9, 3.8637168477755737`*^9}, 
   3.8637171215389013`*^9, 3.863718164062023*^9, {3.863718489367236*^9, 
   3.863718493152401*^9}, {3.863718761734376*^9, 3.863718764524254*^9}, {
   3.863718806407852*^9, 3.863718807010518*^9}, {3.863719539860918*^9, 
   3.863719546465582*^9}, {3.86376955747388*^9, 3.8637695598141403`*^9}, {
   3.86377356865514*^9, 3.863773571055416*^9}, 3.8638602416315727`*^9, {
   3.863874295756915*^9, 3.86387429726853*^9}, {3.863884699016305*^9, 
   3.863884700817925*^9}, {3.8638852312527246`*^9, 3.863885234513459*^9}, {
   3.864213828077104*^9, 3.8642138504750957`*^9}, {3.864214921208817*^9, 
   3.864214927349419*^9}, 3.864298436838125*^9, 3.8642986245130796`*^9, {
   3.8649922520791883`*^9, 3.8649922549983053`*^9}, {3.864993778275032*^9, 
   3.864993814387432*^9}, {3.8649988473549147`*^9, 3.86499884794245*^9}, 
   3.864999597647356*^9, {3.864999922667997*^9, 3.864999923974473*^9}, {
   3.8650005407503033`*^9, 3.865000542046081*^9}, {3.86500928165707*^9, 
   3.865009283210617*^9}, {3.865345818147499*^9, 3.865345821116542*^9}, {
   3.865419130863646*^9, 3.86541913709447*^9}, {3.86542161736415*^9, 
   3.865421623514044*^9}, {3.865421888396118*^9, 3.865421891361083*^9}, {
   3.865421947892705*^9, 3.865421952849555*^9}, {3.8654389239276867`*^9, 
   3.865438926454301*^9}, {3.865439005893091*^9, 3.865439008584065*^9}, {
   3.865450137565256*^9, 3.865450139204981*^9}, {3.865450344574107*^9, 
   3.86545034624646*^9}, {3.865497379421686*^9, 3.865497386722864*^9}, {
   3.865506649006497*^9, 3.865506655546296*^9}, {3.865507008168388*^9, 
   3.86550701314931*^9}, {3.865510003559155*^9, 3.865510006956059*^9}, {
   3.8655105352956667`*^9, 3.865510540882622*^9}, {3.8655112335737677`*^9, 
   3.86551123428265*^9}, 3.865511363438465*^9, {3.865511496809556*^9, 
   3.865511497919628*^9}, {3.865511701113881*^9, 3.865511704375434*^9}, {
   3.8655117570853577`*^9, 3.865511757244879*^9}, {3.865512242387883*^9, 
   3.865512254418377*^9}, {3.865517640718791*^9, 3.8655176428771152`*^9}, {
   3.865518129196974*^9, 3.865518132775367*^9}, {3.865519080042233*^9, 
   3.8655190830699577`*^9}, 3.8655191959836617`*^9, {3.8655194186088057`*^9, 
   3.8655194187194767`*^9}, {3.865519570631818*^9, 3.865519580947064*^9}, {
   3.8655196139236317`*^9, 3.865519614938486*^9}, 3.865520026301342*^9, {
   3.865529793899891*^9, 3.865529813957786*^9}, {3.865535227890623*^9, 
   3.865535230884951*^9}, {3.865536387503278*^9, 3.865536394460799*^9}, {
   3.8655839794969683`*^9, 3.865583987537607*^9}, {3.86558715640237*^9, 
   3.865587170178591*^9}, 3.86558741112888*^9, {3.865588228875992*^9, 
   3.865588229039997*^9}, 3.865588409708591*^9, {3.865593762287416*^9, 
   3.8655937643049603`*^9}, {3.8656024356823273`*^9, 3.865602441501288*^9}, {
   3.865602474737474*^9, 3.865602475231875*^9}, {3.866120196925111*^9, 
   3.86612021673785*^9}, {3.866120266087544*^9, 3.86612026730302*^9}, 
   3.866120327698739*^9, {3.866120529976769*^9, 3.866120530901843*^9}, 
   3.866121667439666*^9, {3.86612381566531*^9, 3.866123857035081*^9}, {
   3.8661241579644413`*^9, 3.866124176876491*^9}, {3.8661909399968863`*^9, 
   3.866190945346902*^9}, {3.866209947976056*^9, 3.866209985670021*^9}, {
   3.866210226471537*^9, 3.866210234268833*^9}, {3.86621517377628*^9, 
   3.866215180626154*^9}, 3.8662153987253523`*^9, 3.8662163247035427`*^9, 
   3.866216399525339*^9, 3.86621854082298*^9, {3.86622254984372*^9, 
   3.8662225574581537`*^9}, 3.866223714963975*^9, {3.866224648058709*^9, 
   3.866224648296446*^9}, 3.866228287489895*^9, 3.866274093172863*^9, {
   3.8662779796551456`*^9, 3.8662779831047173`*^9}, 3.866280123078924*^9, 
   3.866289416223378*^9, {3.866289979798893*^9, 3.866289980256996*^9}, {
   3.86629458153373*^9, 3.866294582999482*^9}, {3.8662991535488367`*^9, 
   3.8662991536299753`*^9}, {3.866304213867861*^9, 3.8663042139003067`*^9}, {
   3.866305325595355*^9, 3.8663053275780487`*^9}, {3.866535488723257*^9, 
   3.8665354888629627`*^9}, {3.86653613077682*^9, 3.8665361309260073`*^9}, {
   3.866536610341976*^9, 3.866536610553406*^9}, {3.866538080622509*^9, 
   3.866538094119775*^9}, {3.8665391861060457`*^9, 3.866539186497319*^9}, {
   3.866540234001492*^9, 3.866540269834159*^9}, {3.86654069309691*^9, 
   3.866540693244561*^9}, 3.866541556482946*^9, {3.866551025899425*^9, 
   3.866551025952456*^9}, {3.8665855742994423`*^9, 3.866585574311821*^9}, {
   3.867162428733755*^9, 3.8671624288507013`*^9}, {3.867165947411831*^9, 
   3.867165947532797*^9}, 3.867317640190954*^9, {3.8674169946172028`*^9, 
   3.867416994716956*^9}, 3.867501968530518*^9, {3.871998005551359*^9, 
   3.8719980077567873`*^9}, 3.872943698251274*^9, 3.8731051734666767`*^9, {
   3.873105716043888*^9, 3.8731057162833853`*^9}, 3.873195739870438*^9, 
   3.873230174523367*^9, 3.874524154881734*^9, {3.8745754980073967`*^9, 
   3.874575498151325*^9}, 3.874577139358477*^9, 3.874580570027052*^9, {
   3.8745811750541897`*^9, 3.874581175236602*^9}, 3.8745890270180073`*^9, 
   3.875280558930822*^9, 3.875312273824181*^9, {3.87582734610553*^9, 
   3.87582734627415*^9}, 3.87582791249074*^9, {3.875896171113071*^9, 
   3.875896172009226*^9}, {3.8758995844132223`*^9, 3.875899587629306*^9}, {
   3.875906562473854*^9, 3.8759065626154213`*^9}, {3.875954855414806*^9, 
   3.875954856064837*^9}, {3.875955570710454*^9, 3.875955571361586*^9}, 
   3.878647261552334*^9, {3.878649909210617*^9, 3.878649920462659*^9}, {
   3.8786500141443853`*^9, 3.8786500179202557`*^9}, 3.878650179505858*^9, {
   3.8786504216988487`*^9, 3.878650447820487*^9}, {3.8786505982289867`*^9, 
   3.878650630961873*^9}, {3.878651431680567*^9, 3.878651555891334*^9}, {
   3.878651669671736*^9, 3.878651717275072*^9}, {3.878651813735951*^9, 
   3.8786518673511963`*^9}, {3.878651910441655*^9, 3.8786521724428368`*^9}, {
   3.8786522785313272`*^9, 3.8786523468665667`*^9}, {3.87865240574079*^9, 
   3.878652493732451*^9}, {3.8786530452136793`*^9, 3.8786530705714483`*^9}, {
   3.878841040474708*^9, 3.8788410513437147`*^9}, {3.878841558206483*^9, 
   3.8788415591319304`*^9}, {3.878844596840703*^9, 3.878844596869623*^9}, 
   3.878903172523497*^9, 3.878903607904133*^9, {3.878907915975213*^9, 
   3.8789079161446257`*^9}, {3.878912277620202*^9, 3.8789122781313343`*^9}, 
   3.878920029549008*^9, 3.878925242619872*^9, {3.878925388908709*^9, 
   3.8789253896399927`*^9}, 3.8792468040173073`*^9, 3.879247084685145*^9, 
   3.8792479037112103`*^9, 3.879248257703446*^9, 3.879248453631956*^9, {
   3.879248698424008*^9, 3.8792487273607893`*^9}, 3.8792510950550003`*^9, 
   3.8792522176385717`*^9, {3.879252456737063*^9, 3.879252459910338*^9}, 
   3.879255120153013*^9, 3.879256050226903*^9, 3.879262187382983*^9, 
   3.8792630862180233`*^9, 3.8792647268315487`*^9, {3.879342657904155*^9, 
   3.879342691350038*^9}, 3.879342763446353*^9, 3.879342808171959*^9, 
   3.879342963209519*^9, {3.879343010450186*^9, 3.879343011245919*^9}, 
   3.879343698279169*^9, 3.879353726424925*^9, {3.879611259433186*^9, 
   3.879611290607493*^9}, {3.880446186080056*^9, 3.8804461885280027`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"b81b638a-04f2-467d-b18c-b77d42131f74"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainedNet", "=", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{
     RowBox[{"NetTake", "[", 
      RowBox[{
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
       "\"\<prediction\>\""}], "]"}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Image\>\"", ",", "\"\<Grayscale\>\""}], "}"}], "]"}]}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<GC-Net7.wlnet\>\"", ",", " ", "trainedNet"}], "]"}]}], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.879343015774231*^9, 3.8793430749588413`*^9}, {
   3.879343107574505*^9, 3.8793431196837053`*^9}, {3.87961183710922*^9, 
   3.8796118678464127`*^9}, 
   3.880472958826741*^9},ExpressionUUID->"34996a95-dfb2-4754-b231-\
43aaa57bc6fa"],

Cell[BoxData[
 TemplateBox[{
  "NetTake", "netarg1", "\"First argument should be a valid net.\"", 2, 60, 6,
    29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.880400275355811*^9, 3.880409159127511*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[60]:=",ExpressionUUID->"2f33ad67-59c0-4a45-b606-0175ba932613"],

Cell[BoxData[
 TemplateBox[{
  "NetReplacePart", "netarg1", "\"First argument should be a valid net.\"", 2,
    60, 7, 29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.880400275355811*^9, 3.8804091591310997`*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[60]:=",ExpressionUUID->"268b4ad5-690d-45cd-a7a0-b2b72305bb36"],

Cell[BoxData[
 TemplateBox[{
  "Export", "invnet2", 
   "\"The second argument in \\!\\(\\*RowBox[{\\\"Export\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"/Users/santi/GC-Net.wlnet\\\\\\\"\\\", \\\",\\\", \
\\\"$Failed\\\"}], \\\"]\\\"}]\\) is not a valid net.\"", 2, 61, 8, 
   29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.880400275355811*^9, 3.880409159137683*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[60]:=",ExpressionUUID->"f312b967-4a62-4168-8d94-4b2670bc3577"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.879696751956573*^9, 3.8804002753707047`*^9, 
  3.880409159140749*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"494292bc-aee7-4558-90c7-86a2658d10f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"predictions", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"trainedNet", "[", 
      RowBox[{"#", ",", 
       RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}], "&"}], "/@", 
    "dataTest"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"predictions", "//", "Dimensions"}], "\[IndentingNewLine]", 
 RowBox[{"predictions", "[", 
  RowBox[{"[", "1", "]"}], "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8793431228953123`*^9, 3.879343205786569*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"c08eb362-196b-4211-b021-5cef8341eb8a"],

Cell[BoxData[
 RowBox[{"{", "10", "}"}]], "Output",
 CellChangeTimes->{3.8796967520097113`*^9, 3.8804002753776693`*^9, 
  3.880409159149077*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"098c23a5-f7e8-42ed-8fe2-14c65d2afd80"],

Cell[BoxData[
 RowBox[{"$Failed", "[", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"dims\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"120", ",", "68"}], "}"}]}], ",", 
     RowBox[{"\<\"leftName\"\>", 
      "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/left/043.\
png\"\>"}], ",", 
     RowBox[{"\<\"rightName\"\>", 
      "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/right/043.\
png\"\>"}], ",", 
     RowBox[{"\<\"dispName\"\>", 
      "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/disp/043.\
png\"\>"}], ",", 
     RowBox[{"\<\"iLeft\"\>", "\[Rule]", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1: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
fd66auizwHeT2pw/IPZH2K6co0aN3qs8kuooRa1fmpvD2HoGE8YSFpzbMMdP
sbRqwKhagVXdupQHRE8SOmoQPA6JzOiVfLPwXyIzbdjdUl+V8mig4ZNFPrUH
G2sYK2bRbxp4G994X5O3MQSGdrFO4fM1MmygMQS+wgMJTruCjd7q5TU3qxmE
g04c7W3i6dUBpkdVWF9doE9wSFhJfdXje9NvhRf3N64leMzaMRKflTfrBcsW
kfe8km6LuhJYivsz+BqfUeiq8NrCc4m+myjEWdNebG1lUSyl2Bu8KBWTKOST
SMajyGfiCITpr+LElvwtktfpbJReJIz93AlxuMAxNXOPmNa3zsizM2xtX6BI
Da7Xz6W+ub9NPgpMC6c4yh3SOxE/4nWwdYnqNmuhfIrS1im26qfYrV3giNc7
2tthvxUe7BRZXqdSvUSRtRBlHS3MLEI24cLQtB/KhRim1kKYJSfUg30Y6+vE
hGoICytLxI54eoXfZN8V6xLEzh3zSbhLPdnZ6M2iR0rrRN7G2pQYX65DCC0W
XJV4+8bDGt+s2Xy5tuOJ+qUsK3AVx4hh5nGbpRgen+Y4d0H09/djr15ElXO8
tDCDmakxGM0GiZMiCwhNML8ZVmJ9tF+QcMhlYwhy/hPJ6C+3B1sZbPE6ddbN
y8dlXJ3k8PQ8j7PDLPZ30tTSNHmVxYdPKvirP3iMVydF/Lvff4wvPtmBlxn9
/GURP/hsFz/9YA8/eFnHD9+r43e/tYsv3q3ip9/exe9/sovP393BcYl+N3OJ
E4ELMdiunVA/j4nVPgr0x1VisVd9hG1yuUIcd6oHOKrt4JAavs16yNM/Z7YO
2Qu2ka7uIVk/ot4fYHP3CJUzbo8PkeF1Y7xOmvhmiW+KHO5RLGNgzIrBcTv6
xuyYm1+TMB3u74NmoBNDXS3oaX6ImdlJOOgVVumrVq0uCU+x1iewFlwV2ajh
u8hVa2MrDbvIyB6JB+vOhv6K+RdrijpJi72SRgisBf6Cw8ILx9nDstkICoUo
e04CP3q1hb/4wTEeHWTxG1/9BkJ+J7YqaYm7GmqNybCCT55W8C3i8MnzKn7z
vRp+83UN33q8if/9F8/xb398ib/8zRP8+L0d/HffP8WffHqI/57bv/zeCf6n
H57j3//+I/wvv3uJf/+TK/wdcfy7P3yMv//FE/zDHz/F//tvnuMffvEM/+fP
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
         "], {{0, 68.}, {120., 0}}, {0, 255},
         ColorFunction->RGBColor,
         ImageResolution->{72, 72}],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, 
         MetaInformation -> <|
          "Exif" -> <|
            "ImageWidth" -> 1200, "ImageLength" -> 680, "XResolution" -> 72, 
             "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
             "Created with the Wolfram Language : www.wolfram.com", 
             "DateTime" -> 
             DateObject[{2022, 12, 6, 13, 38, 24.}, "Instant", 
               "Gregorian", -5.], "TimeZoneOffset" -> -5|>, 
           "Comments" -> <|
            "Software" -> 
             "Created with the Wolfram Language : www.wolfram.com", 
             "Creation Time" -> 
             DateObject[{2022, 12, 6, 13, 38, 24.}, "Instant"]|>|>],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{120., 68.},
       PlotRange->{{0, 120.}, {0, 68.}}]}], ",", 
     RowBox[{"\<\"iRight\"\>", "\[Rule]", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxUvPeXZPl9HYYjUseS6WMaEsAFdndy6JyqU3VXdVV3dVfnHCrnnHNO3dXV
OXdPnp2Znd3FLhYbQCxBACJBChRB8UCJoo8t+VjHxyLtQ9O2pGP/B9f3WzUL
yT985lV49erV937u/dz7qnpuOaKrnr/zjW98I/n3+M+qPTuWSNjza/8d72xE
kn5vxO2aiaTcXndC6vgNPjjByrF+k7VksGPFyDLZscytxubEhtWBNbOj/rjB
4YTZ64KJZQm4oHX85+eNHic8cU+9nBE3bCEXrEEXbCwX7/v4uMXfeK3BLV7L
sjuhd/JYPjf0Lhd0TlFO2AMemDxuWP1uuMIeOELcRjywB91wsLwxD4zuxr5u
8Tj3t/kbrzG43HyuUc6gB+6wF66Ql+fHcwmI43jh4DFNfE+DOBe+xszbFj5n
5f4OHs/G9xNbO1+r53EMbg/Pxcv34H0e3+bzwhP2wRfz8fx88ER8CKcCyFVC
2NwJIVcKIJULIpoJwBPzIpT08/O6sWZxYd3qhsbu5rl6uJZiTRol3ke8pzvu
hYmfW8v7Oldj31W+Zp2vX+ftZbOrfpxVbpdNLmLF4u0NPqd1eqATx+Xn1fOY
On6uenn5GXh/2ejg+ztg4ee2+cVacf24Fk5+dj2xXNLbsWFxQmN1QvcGHzNx
sXON7FwTd5w4Jj1wxdx1jJ1RcY7OOp6eKNco0MBbbEWfiPfREyM99xG9InA2
8HOtW511/DU8vjiuI9wogZON+4hj2YjpulUcj7gEGhgZBVb8LGZ+RrvAgFiK
HvFyjf1J4srzCeSIRcGHZMWPYNrH8+PasK/Eehq9jXV2fr3OPnHsBq5GYmxi
6bnOOq6l0dXoqUDCz/Mh1nEf0qUgStshHJ1EUNgMIlkMIJzx8b35fEL0gr/e
K/We4Tka+H62sHgv0Uti3bzsMw80ToEV18Hmxoaor3G1Nh4TpbF5sGoi9pZG
Cew17Id1sd5cY43XAY2b5XA0eMhaMdjrGK+YGpwUHBb8NLmd8Aq8uJb+KM+B
56clzlriYOTaiDU3kL+Cm1/jKnAOZcVncfDcG1x2RNgLocY+gpPuiMCK+8Y8
9X4SXDaJY9sbvSPKn/AgTkw83CfMdfJy7f0xb31/jY3Y2Jx1TK1c6wa+7COf
4G2DWyZxn2sWSPvh5rECWS/sfE8He8TLNRfrqRc9Qe6ahW74xbo37tvZHzb2
VB0Tl6fOPZOb3HBwH3LFyPV0kuN27uMml+P5APJl8jbr53k3cA1n+L48X1/K
V9+nfmy+xwb7RCP45ha9KfSkURpHA08N32PD7qlvBa5rlq8f521+7hUL8SFO
q1aBHXWIr3VEA3DGw3AkY3DGknBFc7AlCrCnc+zDwq/xrZehUasmsbXDxvNK
5Nn37P1Mgb0fExrV0E4zdVfHHtCQi2afizzg+3mJTYrrHHvDaa6pye+q94HQ
RcG7AB93EnsHMXeF3XXNNXsa2moRuBBDu1/0gRfOkKeOrShftMFNwWGxr9A6
gWN9y7J4RA/4+ZqGngouaMlTi+jPjBcBcspOfPV8L8ElfZ27QoOEPvvqayXK
EvSyB/zknsDIz3NucFBPvHU8pugjR1DoPWdARHDYD2+UfI74EaJex6jRYWp0
lLiHiHmQFcr5ESsE6/wV3NQ6hD77+FlFLwqd8FIbBZ5OctaJRbH+3K5ZhZ7x
3NwBrlGQvE/Ckymwp7ZQqu5g56CK6s4hcnvnKNYeYHfrMUq1x0gePUR275R6
sk98G9gukbdiFn+Nr3jcyB6xesXcdNQxrM9ZYuZNiDVx1zEVWqwlxuK2mHfi
vpifLq6b4KLQW6HL5vrzzjqeomzUayf7RJSYqQaXq85J8RmFVgvM6zPW564f
Sxxb6Lfgpeh945tZJjTUyq0nRO6Qu4LDYratWhozakXMP7vgLtfR39BIgZPu
zWwUPNGSpxoeZ8PZ4InoF6HRYl8Hj2v0Ct32sqe99ftiLos+asxiP/EmZ9OB
esXzQQRT/nrfeJOip8hz8tqTEHPBy/fz1Oeohnq1bnPWPYg4pi1E/EIxciKJ
aCGDTKnK2b6PDPHLVo9RLB+htHOO7f1LHNUe4Zx4nlYOsFs5Qq1ygZ0y8a0+
wObuBfc7RXHriPju/ZqzX9fKf1FrxFnLc9AJnBwNDIUPsQpOkruCw1/7K5/Q
Qc47gZPY3xXw1Oe4wFX4I1dQ8LKBrdhHzF3RM8IrCYwDCW9du8VstgheiRkY
cNcxFfu6uU4bXJOvuacRc1j0PbGzcf1dXGPhf/yciYL7Av+6vr6ZZQLTugcT
M7A+D4kznzfxPC3CUxF7wV3xnFh/0Rs6h6euzUKjxbEE5wweb/21MXI0VQjU
dVpogiMkOM33Jpe98UC9Fww8LwvPy8lZLWa7mFXC62kcfI03xDmVRiy7g0L5
BNnaGQrEbn/3BOd7B7jYvcJx9REOtx+gtn2BLWK4WyW2pYfYL17ipHiGw/QJ
DrJ8jPcPahfY37nAdvWM+5+itnuKEl+zqLVigbVscP5nbI2NrfBUwj8bXa66
7xI8FXys+2fOAjG/zf4Gj+sc9rjq3BW6KjANpb11nRazV+DnI5bCMwmddnAf
g0fgRfyEHyJ+Ds4/8Xp7gH7PZ0WEc0zospfr44176/tqHK66Poa4jnauvdnl
qfse4YNETwjfI44juC2wWre5GhizH0QJzop5JnyOmcdxkYNCQ508vou9Eaa+
+pMB9hj7ySY0iNy2N+ahkdhayTUT30fMajFbg0LHiauZ52Li80LPrSwxQw3u
Bt+FN3Ymw4iXi0iUDxDaOUGKvCyQf5Ua8dp6RA4+RK1MHhZPiNsRTonffvEC
e/mHOOBzB1vEvvwQW4Ur7nOFkwIfSz3EeeoBzgvnONs5xsH2GbY3iW31FNt1
fM94fpvE0Y8lnbU+i1eNnAF6sXXUfZTQZ5OngYHA8muMDa4GD9frWDvrvmeN
M2Nd3CbPVrkVJTyuM9yY1/b/kvvkqOCl8Eri9UIvBUbimKWtHJ69d44NzTIW
ZtVYXZvjuouZ6K2fh5jTfs47nV2cg6eeJ/TORoYR3scdF/1AzQt669wV/Ft/
40MFVmLmWbivmN+Cf2I/D2ethbhZedse9jVwIl/F/l97WoGZmJ0CZ8F9cWw/
/U0mG6Ze8TXc358IUGP9dU0Xr7OHQ5yNFWTra/+I2vkAGWpofvMA+coeNmvn
2NslduTocekCp5kr4kbtzT3AHjW3UrjEdvEB8b3CbukBtvJXqJGvx4UL7neO
g8wlDnl7d4tF/m7xeJXaSV2fxfEdyTPO/1N+vi3mIHd99q6ZuWbESm9rYCn4
KXyS8CpmkZvcDa8r1ndd7G/ifmLO8TWiLwReArc61uSMwdnwX4LH9mAjs4oe
EN5Z4CpyovDPwge4gwH8m7/4BT587xIDkm6oRkegYPnpRSPkmdBeDzEUXBSv
Exz92n9a6jNSeCRP3f98jXEDi4YvrecKYi0+q/DEIj+K+St4Zn6DuS3Q8McB
ZlhbwFfnoY77idks9l8TfSV6g30gtNlYfw3ng9AU0Rv0XdF8qN7TmXwZJ9sn
2C6fY4f6ulU7ZR2zTpAnntXNszrvzqjLZ+VTnKWJb5LanCN3+fwOcT6ocLZu
8j7riBjX9ZnHO84dYKdwgC2+bqt0iZ3SFblxiST7J7F9hHRxB5OGIhYdVRij
J1hYXKuv5+LaWh0Ts1fkgjfXJqjPeuGTAo1rBAJ3nbgWIjKTreGNRHY0+hu5
SORd4YVFZl6hJqyaBOauetYVmcbgbpTwSmI9Re7whINwuvR4/70LFDNRTKkU
WF9dgGZ9EQ6fEwGhn+RZJsXMWYhQXzhHRWYR+aV+uzEn9W84/XVuEucqekG8
v5ip4hqB0Ollk/gMxN7S6DOBqcguok+E1gvdFT581SY+j5/zgu/JPtnbzSKU
CNc1q1BKIBKLIJuMIsGcEuBnCEQC8BDvHDGu5qrU23Mclqm3xLaun2LLeSvw
3eK83KVv2iN/hR7v5rlf5pDzlTpd5lzdZE9scTaXTqjnJ6iIXqmSt6zD3R3s
bu8hx15J8ZhFztvi5hUi7KPwzhHilV0MzXghX4xies2HmTE5FAO9UPV2YmJk
EAsrS/wM9ro+i+sJIgut2Rz1rfXNDK1fKxAz+Y0HExpurl+zcNWfEyX8rMBS
cFb4JZ3zzbUrV+N6jfBLQjP1ditG5DKcHW0hSRyn1GNYWZrF3MwUUlEHLo4z
9esqO5U4np1n4RF+yNnISla+XsyHVbOzcT2LjxuImcPrw8lhHpl0FOlUBH7q
QzQWrm+TyQgOt1Io5eJc3zQ+eFzCOd8jVQsjVAvBx1xb20pytqXxxatt/Mt/
dIEn+1n8uz95iD/4eB8vjgv4i98/xy8/P8RPXm7jh8+q+OnrGn76QQ2fP6vg
Tz7fwYtT4ha7wlnlFHvEoFoVGB1RPw/oj3eZZ86wQ0yq5F+ZXN7aPOQ5beOQ
HBdzNFc7QqpKD52vIl3aQXz7EJnqPkrbBygf76N8Qo/N40a2L5EgvhkeK0F8
49vniNF3D4xb0aeyYWFuFeNyKYb6eqHs74S0qwWS5iZMT4/XfUf9OqNPXDdh
fjI3ro/oifvXWAvNXn8zS7+ew+tvso62fq3IVfc6oucFJqLqfKpfF2rkVaHp
N+/cQzEbrXN0dnoC05MqzM5MIuk34p/96IieMoE/+/wA//onx3j/Ko/XDwp4
QExeXRXw0cMyPmB98nQTv/v+Nj57voUfPNnEv//zZ/jLH5/hX3x5hJ+9quEv
vzrFLz/Zx3/P7b/64hj/5ifn+OtfPMTPP99F+SKK0BG5ehxAgNvDxyn8zT95
hP/zTx/jf//jh/iPf/4Ef/3HV/i//+wx/t9/9hR/Q6z/jz95hP/rl0/wH/7p
E24f42//9BH+9peirvDZI87M2Cln5zlq5GKBWpwUfONszBRqyFbOsVm5RJoc
TTLXlMi7rVOexx5z7dY+4uyDGHNOPLPJDL3N2/uI8vE0sSvtEWdinD08Qmz/
FFFqQarE41AH4uyLKPtocNyMvjETRkYXMTI0AAln3mB3O+SSTjTda6JWz9Lz
0TOEG9cWRfYRc1Z4a4GH8FvCDwvNNvoaOi7w1Lsb15a1zq+vMTeu+4oSnBZc
3niDt9D3dfaNiZmhpVNCvqrx5MEhPE4zhqX91Oh5LM5N49PLHP74wxr+x6+O
8Tdc47/6+SX+p5+e4d+y/tc/vMD/9keX+Os/eoi/+qMH+Pfi9i8uub3A//yz
M2Jzhb/9Jw/rmPwnYvSffvUU/w9v/4c/f4z/yNt//tUhHCUbbGU7vFXmPpaP
ZanY8fpFEb/68hi/+MEBfk7e/uyjXfzkw2387sstfPZsi31VweurMt6/LOG9
syKektdPWI+Pczjb2qnPyMImeUuM0+RYsCaw2EO6vEu+Cc5dErMLxOiN8gfM
ucd7KBLnBDGK8fWJcg2JFLfMUonKNr33Fkq7e9T5XWzt76FytYMUK8jXRujJ
I/kjBHN78FV2IBnRoluuQcfgHFQKBfp7ujDU1Y6BnnZ0tzZTd9fhz9MXpugV
mXU8MXf9erK4flz3Xp7GdY3G9Qt3fUYLrgp8hdep6/GbEpos8BXX5MRW7P/1
9wMb4vq204vZNS2uXb+BDH3oVjkFpWwQypFh6vYwZqfGOI+SeHWUwQ8uC/jZ
y038xY8OyctD/HNq5L/6/Aj/9vfO8O9+dl7H9a/+8SX+lz8mvsT+L3/vBL8k
Pl8+r+Jj4vH0tIALau3Bdorvk4QjbcFGdAPmtAG2vAX2AqtohaNshTljpf9r
eGjhzcT8Flokrn8I3VkwuDDPfCkeFz5O9yZ3L1Hnoqkidg/IQepygnklRTzj
nJ0xZlSRldLkm3g8uneK9Ck193Qf1d1dYrdHDGvIV8tIk+f57D7y9FP54ja1
uYLN3W0c7O3heO8I+9TorYs9pI722Ce79HaiF7YRLu6iqWcGrX1zuN2p4hqO
QtlH/kraMdzbSg63w+E3IZDyIJwS1+zd9esb9hhzBLOflrPWGhL5yUl/7av7
WDGDBYc1bzgsrhEKXRdzWczZVUsjw2rreDe+KxGlrecY0SN+KCbU6BvogWZt
EfOzk5iZUmFCJUfcraNvjOIgF0aV+v3FoxJ+Sg599XwTP/9wBz//aAc/elnF
q8sizvfTqJbjiNHz2D08VwvX3ORGNh1jDnRhZsOBRYGJ2Y0Vux3rwTVoQmvY
4FYf18KU0sPIMqUMsGQNMNRzPjMTfZPe5a33oonHNTi99byxbhGeXlxrZDaL
BelN/HVfEMjkUTw+RIyZN0pvlSycIb55jHCNOkuuJYqHCHO+RohR6dE2drg9
pDbv7e+isk8sa1V6Y2JeOcI2q1rZ5+M72DzZw8HJIS4PT3G6f4j9w2PsHh8x
b+0iW6B+F3bqfXGvexr3e6ZxrUXBNZVhfKgbSmk7RiSt5E4vYskQSlzTYjaA
TfL4eNOPzbAFXsMyPOvTiK+Owzkth2lllp7IU79eZxPX8Oo5ylnP9nXfHWxc
IxTX2kWmEPh+rc9r4nsSUyNDCx23hwN1jZhdnoHWvI5CNULvGMLOTow9HODn
DKGcCVIrtzmTD/HBgzL9SRLhSAgWemnRK/XsRE/tpe8Vvlb4KVFivxp1weIi
NuI6ksMPrdeC9dAKVrzLWPYsYtW/Ak14HdrIRqNi69BwnzXLm2vFxFTrENfq
2NO2N/iyGjiL75uYr9mnenLYE89i85BafE793KF2cu3DGWonvVJwcxcRZph4
bYc9sI+944M6VgKzvdNDbPL+5t4BavRUmyIrs7bZC+WdY5S5z84pc9X5Kc7P
jnF8fMY6xfE+81KNOkD9z1HbewZH0DekRFPvOJSjckgHW9Hd08IZ3IJRWR98
5mUUNqYQ0k7BMiVFamIQmZFuRIY7kJ0aRFLeBdtIFyLjPagaJpDQzaAStWKr
wsxQjMIVbHxvK67HiuuRZnGN2tHIVE56Xivzq5N5xOJqfL8nruuK65J2euNI
JlT/HjWS9CGe9iPODJxmn4WiPgSZbx+epJhBolgS18yFJxDfsZJb4tqTnXri
8PlQKcaxzUon6YnZN25yrpyN0b9FYCPXNkzEOGCBIanFonMB87ZZLDjmifMS
8V6qY77iW8S6V8fz9lFf2Bcubz0Tm8ln8X56R6MMzsY1LDt7yiGKt5PZNPb3
97F5Rs3c20GUnEpkq0hQQ2PlHWSI7zb1+OD4BEeHJzg/PapjViN2pb0zzuFT
VDi7S+RuoXLMDHSK/A6fox+rMjMfEduTk1McHTFnHTNjn51ic/8IFfqywtYe
BqVdzJlymI0aGLUrUCkHMMJ5tzDSD+tIL6LjfXAMdaJLNoDRoT7kpkfgGulB
UNWP/SUZXIpe2OQSJCcH66/18naKz8eWVEga1nBQimIzR03djGOrEMPRdhLn
e5n67Dvk7AtFRF7hujNvimtSkSTxYzYK83b8TdZNJYPY5nFOaglc7KV4jAQ5
HKMfjSNBfbETR/Ob75Fs4hqiuE7o9dazrpE+rrZdxg9/8JI5sgQH+8kfCsLs
EtczfHCmvHCVOPujGsxZZzFtmsIMa846U8d63jaHOdsMlhzL9H+N14jrVxZu
7dRqh7huxds2PifOo95XLBfxdbFfk4UMTulvD8jLHeJcoqfKiqrU6v55i1nn
hM8fCv4RozPiKjCr1kTePUWWnjhR5rxmRTmnI/TbCWbhVJmYs3a3qcs1Hpv9
sUX+5s8Pkb+k9+Yszler0MyNwmmZhl4zjrnZcSzNTkC7ugG3SQcv8c3MyxFa
HoNB2o156QBW6Xe8s0pYBiRwkstOWT8cY0NIzskxLR+ARjnMnuhHfkKCjKIL
yfkRJAN2ZMmXLXLtiHnyuJrCHreb5LfA1SauQ4jvanjbSd66yeFgxEvsfEil
/Mhlg6gUQtTWMMr5EGcFZ0Y+zCyUx8vTDCrZMJLxIKLRAHnNXBNij0SC5HmI
PRLA4W4R/+jH38eXn75APBGFVXx/Td5pbCbq8jJWfcuYtcxArZvABNdhQjsO
tXaifr/+mJYZzTgLp8As6K9j5xXvE21UmO8dYyUSoV9XOhWmZgSRr5RwfEae
HR3jkDOytsv5yXxT3KZm0zNVdg9RvTjBNrHZI0Z79Et7xKxM7OLlY0RLxwjQ
mwWZdULUZj89dbhyiBDndqpMnnK/KrlcIfer5G71gFrO9ytfUqfp69bn+mC1
DyPgmMTa2gh0KypYjZxD40rkqcdeZT+MikGkl1WoLIwgopKivDaGNLV5a02O
BHl7YlQjNCFFSD0Mx+gQbCoZAqpBeEYHsU6N15o0xDKGIHHzi+8Gwj6uv7/x
HYH4vYrw0W++/xXf74rvJ8RvCuLEN0c93iKu+5zB+1sRzs4wznfjOGN971EO
P/r4Et9/vIVn9NRPjlI4rXG/ShhF6nnIZ4PLboTdokM87EEk6ITDqoPNboZl
UQkNNaZN3oNWaRv6qFOyuWEoVxQs5a9rdFUJxfII1BtqYka8svQCuQiKrEoh
Wu9Rsa1wu1mK1e+XeX+Lt2sV3q5s0j8f44DYbp5QX+mR8zt79BTbPBZ9MT1S
8ewA1Tr/jjlfT7BZpg8rHSEgvBd7wU+OB5mXQtRjH3U3zAzsY+bypQ8QzR4y
Ox8jv8djU6c3T9krZ/RifK8q/ZZG2webnrrql8JCnDdt43CvKzDa0Qb3cA+S
s8RqVoH4+AB0zMc6+SCC86OwSRv8tUp74Z4agX+0HynyvDAtQ3ZuBJlZKRLc
aqnr7o1lxFIheDmLfeRlkLgGiK9XfO/5X+Bb/92Fv/H9uVfwl9wt5YPY3Yzg
lN7qZJv6vhXDe6dp5sskPrzK4NmjQzyidwk5NfA46Pt8/vqs8dj1sJm1sFr0
cBJjn9vCtU9ifzuHpMeIlaFmBPVjsDkMkCulePvudfQoezA8OwTZ/HB9OzQj
rdfAJGcT+6FInahQg0q5RpXzjRJYi/4t56L1azNF9kAlT3w5U/LFMvHiejOb
lg85E4ll4ZyZdbfhlzapzVXWFmdu6eAEue0TxPKH8Kb24ckcIFgklsxRfnqq
wF4D32BpD35y38lM7GAOCuWqzFz7je/0eYzK2SFKxLjA4xpWZbCuymHVy7Cx
QpyWh7BM76To74ZNJkFhcQTL8n609/VggvjGOH9Nw90IjfVhe34IbmUvdAOd
iKkHoR8dwFivBLYJHof8jc0M1/EOaJdgo6+2B9z17+7Eb+AEhuK3TNY3+Bp/
fS26odMC31hS4BvCLr3a5R45WyPG1Sg+uMji5UkOnz2s0islUc14yd88Eodf
Yvf1r/Dge7/AxZPXMJs2kAqYEA86kKAne/74pH5t+6waY76i51sbx3uXmzji
XL/ddhf3JU3on+hHv7ofvapeSMYk6B3rRSfnzCh79biWZJ+lqB1pakiKPiJF
P5CuP3bFPHYunqvxMT5/ycefHKZQqVaQzBNb4XlOiOMR9ZjbKnm7R/2s8Xb5
lPw7OEVKXHNivnVlt+DM1BDI1ajFNYR2uKUfjpK3YXqxyE4Vka0tevAtmIvc
FqrU6m2k92pI7TFXHTBPUS+22FNL/AyzY8xExHR5rB+62W5MKVoxw8wzz74O
0Ren1QOYnmIfKCSIKQaQoF8OKSWIE9MwXxfknNbTb7mocePiNdRl4b+EZm8M
98MwPwMH8bUyBwtMxe8yLL5GWd9U/Rqy+O0Ln3MR3wDxjSeIby7EWR3FxUGC
65fE0WYKry+zeHHhx8sXG9g5msLjvRieXOzivR/+C3zwo3+ODz7/JS7e+zm1
fRfOuQHYDKsI+hw4P67i+x89w7PzKvuDx2CPPD0SxytijRnhevttdCu669XB
z9U+1M7qwF3Jfcwtj+P1RYl9lGN/FfDilK/n7H//PIfX5+KxXP2xZ0fZ+j7v
8dgfXGbonypwJ7juIq8Q4/IJs8tJg1tbxHiLfjnLx1PEOrGziyA9tam6A1uN
vDzaYi4mlvviO+NzhGrnzM2niO/WED3mcQ+rMPE1DnFNg6/J1LaQr1VQ3N1B
mZmrQv+2ONYDlawDE2PtWFR1YEHdxYzUhLVl+gnO3ClmpS365PCSHA5qdJK4
RVQDiBP/BDEPq4eQE3N6egjeUQkSnF8h9kGK+Kcm+hAjv5fnpmBl3hfY2t78
5lR8H2B58/2Ozeepf1clHnewxHepPs7oSFT451DdU7lsRs41Bw6O5nB4MYDd
y35EvVLodW1QD0gxN72CWu0CO+zpVDAB/ZoNC7Na9uVC/TsKMX8168vwucx1
jl3tJfHiLItH5NjT4yw5GEGTpAX3iGU787/g8r2eJj7WjLebb8DlWOec38Tj
wwznQgHP2B8Pj9J4cZnHk7McHhLjRxd5PL3K4fI8jTP2zSPOkcJeBYZ8DRH6
qSRxKhwdoMK5WKYP2hLXqcjNYnUThWIepVQe6XCePkFUBgVfDLv2MPZ0Uexq
Y9jbiOBIE8KJxo3jJTvO1GY8kpnwos+KD3r9+Lgngh91Jnif+0hd2FOaoF8c
xtRoD9TybiyrurE41YmBviasalbh40yNTw8jsTiK1Z52rJLf3sUxaPs6ifkI
UtSs6GgvVoZ7kZyWIkstNyqZmccHif0wIvRbcfoXxwI9G72VMyB+5+yE5dfV
+C7REhK/jeFzYSecEXqgkBMebkNJN1LU3kLeC4+bfj44BXfyDnS+a1g29WK8
dx4d126h5dZ1jDR1UYc4S9Q9WByXYlTah+62JkwqZdBuLGFycgzLizPYKXOt
mKvEd1AiZ4nMtc+ZfnWQQTxiw622e/j2je/g7Tvv4t371/E7N9/GO3dv1GeE
uJ58Qo3+4GEBj4nfBT3f01oUl9SYB4kgHsS9uKCveOCJYd8VxB49+rHViR2j
GReaDZwZ1/BkRofPB234Sb8LP+u24OcdDvy0zYIvbmvw/etafO/6Bl69u4Kz
7yzj5K0NXL6twaN3lvHk2ioet2vxoN+Oh91OPLhvweN3dHj57RV873fW8AXr
s9/R4affdeH3btrxQbsJT3qN2NigrhplWFmUYY1eeGOiA7KRdqwHrXVvJLKO
0OIANVg3wiw8QwzFd4iSXgz1SIg7PRjxN3EGi5kcYB7WqcVc7qffViBAzfZO
zyFveQ2L9Tl5+B4qhtcoGJ+gZLpCZXkf5ekEfDO7sE49hHn2If3ABez6QwT0
9BSWI/hsx4iYLxFa2MPYTBOGF95F38AtdH77Prrevkt8b0DyrWbcfesa2lu+
C+VgK+aUgxgf7GHeU0Ahl2NxhudAf5TNMm/lAyiVgswgIdSo/dvlRh1zfmbi
HijZJzfu3sE//O538N3r16DRcL2Z2feYuavM7x9YLHjZPo8XTZP4fscQXg2o
8emdaa7rOH5wx4SvbkbxqjWInT47jqQaXI6N4zHn1un4CF62reDP3rbgn95w
4Cd3nPiT2y786qYbX11z4PPrVry+ZsXDt004JMaVmybkbtuwfc+EvXY7akNO
FMaoZ7IUiuRqrTmMi1tOfHyd/XFdhx+/u47fv7WGP2hew5ddG/isTwPdWj89
5CA0RvohLf3ucCezggTTRx7EJhXMtUpYB7sw19mGTVUfiuRtYlxsx7C9McnZ
3I/0zBDCxDU/p4Chtx0+eisnc9Jody+0cvpz9STya1/AYvkRvPoforT2JUq6
T1GbfoWzngoq3VW4e5/B1fkxc/b3YV16zcz9FLnZ19SOR7CsPOF8f4mo5GMs
Dc9gdUaGjva7aP/WTfS+1YbmW/fR9tY93PvWbVx7510M9tzGSF87bt/8Lgbb
uhFW5dhHD+Fd9SO8HoJfl2C/pBD3xpCOR5Aj/4rEulBmzt4Mo0ZeZzJB+Diz
E/EAn48hkw6jkIkgwdzz/pQWn7y1gGfvLuJ7d9R4PrSMp+0r+P67C/jimgk/
vOHB790J4hW5+WDQglPZKi5UU7iYmMBHXUb8+b0oftETxB/IwvjHfWH8qiOO
nzeF8HmLDy9a3Xh200ne6lF+14nY7QSS1Ny4LILkWIA5JoOAMo+gPIlcdxKb
d0K4vO3DR3cc+PSmAZ9RA350l9h2ruCLwTWsi8y7rqzzN8y8YKKXukceDn7P
geTCOFbb7iO8Ng2fnLN3oAW7+ik+PgpzbweMkg74J2XY0c8S835Yh3pgZ/at
jvdii8fbWhmvY59mn8RXnyJlfIG0/j0kNl4hqX6Ng7Z9bLbmEOo9JXasgcew
k8P2lX1szR9jd+091OZOEFmowju7h7TyFcyjPkz3DUFxXw7F3Qm0ffM2Bu/3
QNoqwXf/3lt463fu4Ma71NS3fws337mNwCi5OreDnPoSMQ35O5GBa4i+s2cP
rt59RIZ34ZnYg2O6iNBiFG59EgFXBLFImPmMW2beYDSAaCJEvxdCuBjBqxk7
PvnuGg5vaXDRrMPJkAdHHW5c3TDik2safEke/fQW+dSuIYf0+Ey6iNfjE3gx
qcKPpVr8qjeFPx3I4g8lOfxJXwF/OpjAz/pD+LQ9iBdtLhw2mXBG7l69Y8b2
LfK1PY/4QAmOoSJcY2XYxjbh6Ksg3JJA9HYAxVspXN6JUk8seP+WFR9ed+LD
22a8lNixMD9CHzIOxegwFucnsTo1gR6tEu1fGmCaG0WUczQk8u5QH9Qd7XCR
l5LmTupgD7rbe9F1rwMa6rWH2h2eHUGM+5r6uhBfZG90MTfRg+3MyxGZ3kXO
+ByplSu4x57A2/8UhY4a3PIHSMguEe8/Q2D4Ev7xfeSnS9idP6W+P65vt9Ql
9uweDFyL+cFlvP2t72Dk2gCcsgv0viPFjW++g8HOPnQ0tdd/j3D3/j0MNI1B
Q374J+hbZuhrli4Q3iB/1Rk4RsuwD+zC3UffKd2Hd+gMRmqI414Ya005rHfl
YJfnYKIOmpai8MbE7zgFxkF4c0E8nffg03etKNy0oNjlQI6amRhKUC+DeP+2
A1/cMuDLWxv4qpUzsXcdP1Ju4PszG/hwcQ2fj9nxk8EYvurK4gctaXzZkcGP
Bpj5BgN40h3AcZMdhXsWlgF7nMmXnLHn9yIo9GZhZx9YFVUY2I+mniKcTQl4
bgVRupnAwW36vXshPLzrwjHxvXqX/XHPxlkzQ385hzGFlLNqBsszq+hP6NDy
Qx9mZhTwynoQmROeuA9jLe3oud0Mc38vnPQtTsUwLIN96OJj4jmRl2P0Y0Zp
L5S839/WW193HXvD2p9GYuKCusJz6z2Er70Cb1eVc/0p8qNXiA6fwTnIXK/c
QXGyhB3ydnPpSZ2/CeLtnzqEVVaAR7IPHWfbRn8J0aFLrA5s4G3OyOnJCbjp
wSYnxjj/Q9i0fI+a8RLuuV0kp07oBY/g0QSwMVuDcewAnv5jeDq34e+tQT90
AGd3AY6OLFYlVeh6MrDzvXRce/1kHMG0H0FiGyGXfcUgnusj+GGTBzXqaEyS
pp/MwjlSQKQ5gq1bMTzlc6/umvHhTQc+oA962e/BhyoPPpi14WOZFx920Jc1
pfH0XgmP7jFntUTxujOMy9YQdjiPyzf9SBPnYrMNJ3e8uLrpxW6zE7k+5gp5
AZbxbfZ6EoaWDGz30ojfTaB6J4utO3Hs3Q2ies+D6jVqyjULbjQPYmCgB12S
VvT2dWOgk7e3tbj5qQuR+Aq80i6sDXYjouyBmdk3MCPHXG8/yuRqjhlpVtKH
9JISeuUQEvON7xscQ92Ypu8KjMngZw/ImltgkITotU/hH67B0EPPNFVGfCkL
98QZElJmu85ThAYewjl1TL9dRWmW+WGJ2M8dwrx8CMPkA4T63kOk5wyxnivE
uw/Z32lkV7ywe7XwOqwwk2v2mT3kjS+R0D7nXHkfhrkLOCev4CGuVm0Ca+or
rPVfwtpxDHtnldsKgq1xFO7E4Ow8hGb4EDYVs+XCFkzDRVhWkwiLvy2KBYhx
AP5CAFeGGP2VFzt3tFz3EKwjJegGt+CUckZ3x3BMvXzQ5MXRbc7RG1Zc3bfi
oteBE1UQZ/3017fjuLxVxNXdEh5we3kniYOOEC7amYWaPdi5H0G5M4Yij1Xr
SuOkifn/ho9bH7Z6k7Cxl1aGC1jv3IT+fpUcziJ2J4fI3RBydzwokceB6zHk
3/HidssAZAMS9HY1o729Gd2dzWjdWsXdTx0Y8U5D39uNrHYKo21tqNgXYRvu
hq53AAudEqxL+rHWLYFntA871jlo6VntE8NwsWL01LbhAfJRBiszs28symz8
iPp9AofiASKBEkplL/LpALL+KKIbeXruY2hHn8CwQC80f4HI1BO4li5hWngC
jfwVTB0vYe19Chdn5053ip+9hMrSMULuCILLZ8gsf4mg7jNY9B/BYfgUvoWP
MT95ihX1UxiWuBbLeawOPcdS10NsdF1B07ODcGcUBfqaeC/XSXUEN/vAOb/P
KsM6ydv0Yb60+M4+gHCSs5i+u6YLU/t43k1WHN+lTxkO8zOWYZ53I6oIo3wj
R98TIad8yHw3iO1v2bHfakNWGsFmbxQP2ks468rgmLdPqBWX9Jib0jQ2ZUEc
9Idx1JvBPvWpMsiixmw111C5X0L+fgb5ZvpC6sp6dwkrbeTK7T3obu8QZ/Yi
z8nFvvLdTsL5dhjmt/3krgwDXR2QdLVA2tECifDPO3rcfWqBvKiGTtINN3m6
JmlHQT+NyKQUC+Ssn37fJZdisa8XpdVR5hslTCopPJzXegXz79Io+6CPa8nM
PNZLX1Wgv3mI2PpDhLnNxGMopMX1evE3O9SdnA/2WAR6RwkGE2et5hhmzt+1
2cfsm/ehG/geffxrztxnSA0VsD+URlV1RQ/3HMXVV9ha/Rxby5/BYf4U6/rv
w2T+AoG1D7E6comNkQ9gWd6Edq6Mpd4nsMkfwzx8AVd/DhmJH7ER+tHZLBxT
NqzJVrA+tYO1hQPoxw/gdlB/s+JvPRv6HKHHzotrDPdDKHWHUW2PIG1x0Y9x
H7+J3ArBcTsFTzdxH/QgNRFHdiaLxG1qLnU001VASZ5GcSCFzf48CoMppGRJ
euMi8mNp1DhjD2Ul1KRVpCVcM/ZB7P4mYi0HCNGjeCW7iLdV4G/Zgv4W8b2+
Dc3dA6w07UBHjTbTO9h687C3FKG/nUEvdbSrtQ1d7eL3ksyT9M4tiQ3crJgx
uT+DILXZJO9FjBlY2dyKGc5e40A/itTptJqZuZeztqsLQ7eb6O2o38TSK++B
RdEP08gQkuNyOHjM0EoSZg3xWX4fcfMZisS2xPXKkRP+eAjuWAiWYAx6XxqG
cAbGaIZbzkAvcVk9Yoam9557hbjyBBlZDoWhKqryJ8T1JcqaF6iufoQquevb
+ACm8aectfTLC8zb3ZdwSz+Af7UI+8g2/cRzJNkzXmUZXkWE/ssN16QBy8PT
GO+cZu9asTi3j6mFE1jUZ/A5iVVG4Et95rmGyN+cnbopSWFvoIgs9d28pofV
qsH6yjxC/gDOzg5x9egQzz98hM9/9xU+/+IV7D0pOJpz8PSWERkqIy28e8s+
0n0HCA9uI0I8w8Q1OpJFWU2+Tm/B3R+DsSkA5/UoNbgMd/M5bO30EU17SN65
hOcu+/TOMXNljbMkB6s8DnfXJudcw1fYug7Q2dmBlpZWdLe1ovNeEyRrQ2gr
LuB2YRWSxBTzxSCC5K+Bnniiuxsjd5q4DhJI6Zuk5KaquQ0Tbe2YpY7r+rvh
IIejambfljbMdnTBpVRw24I5hQ1awyewcf3zwW0UM9S3RJjZIwJ3mHMzkILZ
k4HJl4ORuJpERXIws+yhFGdsGh5XCSFdFvGFMvPYMcqq58zgH6Kqf4Sy/hnS
ho+Zo57BPH4Ik0GP7BK9Wd8JAl2XzGQJ5FTHiE8+5Mzn+6hsWB/TYbZvHjMd
zInDIfgmqddLz7Ch2sHKWJX6fopYKI2I+Lv8VAhJZuIEZ3HE4+U8cCO46oBj
yUJfOovpqTHIhvoRDDKH/uAVHn/wEu9/8gG++vw1fvjF+/CrOXua9+jZiWfv
ATEpw9map6crI0AvEe0+Q7LjHNmBU+Rl56jJj+kfK9Cwj9Y7A7AMR2CaTEO7
noLOLP4ew4IFtx5q/zLGg2ooI0qMB8Zhl/A9ui84G4/oEc/R1dFJ/tJbEYO7
1+6h2S1D18ks7tfmMFMzM5cMIqWZxkprSx2/zPo0+prbMdHZCen9VmhVCuQX
VdBLu+mvFAgQ2yB9t45ebXFIipamHsjb2+j5TNCrnsCxeIVcJoccs2UkGoUv
FIfLm4DNk4JVcDeYI2/zxDfP2wUY/ZwrbvpEdxpOrrU1TKxZLk8SPm0J2fVD
bOu2sWc8xxY5m1reQ3S2BKNGi8piGVXyPCXbQlIbgkedgGnKDcOsBbNjS5iW
zdNL2xFZzCNqSMJrCMCq80G3qsfG8jr5yFpdxMryHBYXZjE/S37Pz2B2ehoz
w3x8ZI16tgJJaz+aW5pw5/otzK1vYO/9D/Dw1TOcf/Qhnn7yMT783Y8Q0j/F
RucV9Mz5utYaNC1lVo5evQIT87hr6oC9uYvIGv0eNcPhC8IQcWI1a8T81grm
NucxuUkfVFRBFpdjODIEWXAQMv8QhnxDGPbLIA8qYe6rwtb5BOYx8lx1jvvN
d9HccRd37t6CcnQA68VJzFRmMMJj9gWWMdPeCsfMKPutGccznLX0ypVZKQrq
YeQmBlBelKM0N4Q9tYQeagCu4R4YFUP132htr43CI+1hvhlEZmEdjvFdBHRb
KBTiSCfoiYLMlv4Y3N4YLP44TEHOj5DAlrwNMQf4ROXJa+JK/O3BDKxBsU3B
4AljyerCskX8zRJnYSqNo2oRD8+38eLRMTbLCQTNDsSMHrh0VuK1hKXlWSwt
zmJ2ZgIzkyosTC1iZmIOk+NjmFIqMTYsQx/7dqC1D3MDc+TxBkxWI7XDBl/Y
hSy9gvj/GDyOEIzEKDf0ED5mPdV9D4aZbUbvpqCc3kDwvQ+Rf06dev9T1D78
AS4++wT55As45w5gXM5BuxGHRvyekPxbj65jOcHzSM5BnZmEqjCL0cI8xgoL
UOXmocrPQlWegSI7DTmfH8lMYSSmJpZjGAkqMBIegSw0giHelkbkWFXQRzQ/
52w5hHPiCO8yO97vvA35WBcsnhGcnJlhsanRL21Fu/Q+7rTegGqhB2PTPVAM
NEPWdw+z/Z0wTo5ibVj8PqcXYeZjz0gvrD2tCI9LYSfGdvI5SS8Wpu8KqQdR
ZN+n1Zw7jiw9FbWOMzcaCcHvD8PtI74hciuSgZm8tZKzdhfLUYTDlYOD3LWz
LNRoQyAJvSeBRROzaDKNT758gMsnJTj9WswuTWBoRIKwzwGv3oweYtXS3Ix7
9+5iRKrCusIBs9IJZe84pG3DmOo0Y15qwMzgAiZ7JrDYMw1dt4Gfywsn9TCx
GEE8x22eHopVKEbrf78dYC/O9V7APfAMprELjEhq6G/NYoJzz+Mq4+j1+3j8
/D28fvkEP3jvCh9d7eGKvWeJrkIZHcFoVIWJ1CimMiNQpxQYi45BEZrAeGQG
6vgyJtIrUKcXMZ5dINazUBZmGrjmWBk1ZEkVRpKjUCRH3nBZgWFydzAmw+oc
/UznM+JyDsfIEW6Tt2+9/S5UMz04eWjAp59UYXYu4GbzdfSOtqC1/x6GZjvQ
S/xvd9zGN29cg6qrDWM93dAPSbDc3Ym1iSGsMyP5J4fpTXsQpp8yyiTQjUox
3d1Tn83WsQkYptJIBeknE37E44H67+eCxNgZilJ3E7ASY6u/AKu3BLut2Chr
EWZHDiZXBhpnHOuOCFbMEe4Tw/sfH+Hnf/YSn/34ClOTSqyNL8A+bYR5ZAOT
7Qp03GzH/VvNMC6a4Fou0BvswjUfZ/ZxwSBfhOSuBEMdSqiJq0/twbYqDp/M
D7XSjg2pHblxP3LFMGo7UWxtRXGwE8fObhihaAIDyofQjNOfj72Aw3mGy+o+
rrYreL5fwcVmBjXxW56QE36HiRq/TM1YwpSeOAWJjXsS42E1ZoixOqHCGG+P
BqcwFpvBKPk6WmxsFfk5jBTmIM+Ru+kpKHOCx+SweE1qjDXK2yPEVw55SIHB
5BAmVm0wtT2HqecUenqP1p47uNV0E3fu3UYiZoDNugj17DAk8mb0ylohU3Vi
UNlNLtNjD93Hb3/7HWiHulGaH8EmtVkr7WKmVWJ+sAvOyUFi2ws/M9I6OWwl
l9NTQ8hOS2FRcTasppD1RZEN0acQ23j9/6AJwJYIwRyNwUz9tXmLnLXsdWsJ
VpvY0kPb8li3JbFmj2KV2rhkDKBSSeKrP3yAFy/pNWNJGKVGuMed5KEaqn4F
c5IBKytzWFubh9Pgota6MSfVYbBnFKpu8TsiJ8a7qdO9JiRmk9hcyiCnjNGH
WjE6RvwHLcw1IZQ3o9ipxXC4n8DxQRJHBzHkiyk0S/cxoniMpZH3sbrqgtNp
xbrWDPXUDKZmF7DIeWAybsBo2OBcWMH8/CrUminyVAm5lzyMT2AiI8d4WvB3
AqNh4pmZhbxM/MpqFrelyTpn5Zlp8nYaSmq0gho9mlaT92OYSCqg5DGG85y9
KSWGUiPoN61BefM55pufYKrrMXrkTehRNOF++1188x+8hdt3buPmnTvoGmxC
c/c9SEZa0MvqVrahY6QZ37l9HWPMUh76ZOOwBH5i7ZR2wqUegFneh+Uxarai
G+EFGTzksoePuTmXPULLdXHkXNQ6n/hNrB/ulA+OpA9mZiNjPEo/kYU+UIDW
mYfGkoee+JpsBepJHhZHAkZ7iP6aM9vmRGRdyz6JwDfvw1qPFopWJd759nV8
4xt/Bx09nbjkHNYsL8K2pGX2Yd93DmOwSYaR+1OY6bZgS019V5HrY25UqSvF
xSBc017MjXowqvJgccSF0LoPB8RVfFf/8DyNh2dpnB8nUCmmcbdzG5KWGkap
0+pZH9Z1emj0NmZ3E9bWNTAYNDAbtbBZ9FhdW2XpoFohTm4FFO5xjIRUUMVH
MBZiv9H3qkLkcPJrbFmVSci3JqEoTEKZZlGfR7lVscaJ70Sa+FLbVVlqdJ4c
To8S31EMeCbR0XyKwftPIG16BNVSN2TTHZiiRxpUtKG0aYNc0QupugVji92Q
KJswutCFTlkTbrXexvXWm9gYbkd+XOTcTupZJ0Ij9GVDPTAw866Tz36RlWV9
cBDbiIL+arQb3pE+RC3E1hFD3MVcFAnDwRlsj4aZgWIwRNPQRbMIxlLYyqRw
yjW8KqdwnA7gnDPvyVYEj8ohHIR8iK4Y4FSRK23TUEmUaG9rIa6/iW/85n+F
3/i7vwVJkwShDRdWBuk5O0Yg7xrBHHnl1doR0/M9hxKIywOILTL7KozYGvey
T8yYnXRgaiSIheEARuUu2I12HB7GcSp+43GZJb4ZXJ4ksVfNcB0O0XS/iP7m
EsYmvDBYLZw5CfLYDrPZDJNJD7uF52k3QacjzjYem15cYZVDaSfGTiVGvSNQ
uZVQecYw7qXeRsahLKqhIG9l1SnIdsh3+t0x4ik4O5Yax3iKvM8S2yznSobb
tAqKnArDWRbvS+mz7naU0HTnlLn3GCMrzWgZuo1u8lW93oc1owJ9xDLGGb+0
IcfoYhfWvTJ0KO+hbfA+3r55HXP0V1Fq8WpvF5YGBK6D6OuWMCdLyYkB6qQU
8r4ezDEP6ocFzj3Qjo4iSW8VIb4hctjnjcIZiNVLzF7BXR39c9i8hsOwHmX3
KjK2RRTd6yg5ddhyuZBad3AuzkPeKoVtPIRJySr97yS6etvxd4lry402zPXM
YVmyjJEOeg6JFKPi97oLOUTGmfvHmammYnDJOIOH2WPWBD2DA65xI1Y5o2em
/My9ESyPhDCl8iJgjuNR6gAfP9rEVx9u4ouXFXzxqoT3H2ziTqfwLmW03a+g
r99S/z3+g4sDzp0QIpw/WmIaDbrptzgPzUY+HsXc2hrkVmqpiz0XaOA7Rk+r
9I9Sn8eI4QSUeWLJUlKf5RX65BK5nKP3IrYTxG88N4rxsoI1gon8KCZyjf3l
3MoyKsjjMtzp9+PatRpu3duDYpX6O06P2XsDshniltzAhmGMc4R8nuiAKcZs
y9d0Ku/jfu8dfPs771IPO2BT9cE80IXgghIrxNIq72dWpscilm5i7CPGVvkA
vGrqtKIL3mUtgq48/C5mXlcMHg/x9b0peiV9gP7JzWy0Qo+0ME6dV8M0Mwfv
ohG2aT05RX/RpsBszzJ0Mie9G7V6wo85+QyuvXsTt757D5Pd07j7nTb6Zs4N
rxWT6lHML6jZc1mkOvLwdZXhbGNJcrANEGtLGVE9s5dKj8k5wd8AtDNxuJfL
KGycIs886pAFsJmM4Ol5AZcHOVwd5XC0ncNdyR5u3M3gzq0sunrsyGQieP3e
JdLcN5NOUKt19d/jhkNeWO1WZv4UFtY0GHHSCwVkkAWIKzFWcR6PRpnN4qNQ
0jcpkhNQCD3OU5tLAucJjJVUmGFNV4jLlhLjVQXUVd7fnISaOj4meoAYy8hp
eVKKe6MmvHOjxMxbxdBCM0YWOtE31sx8NIerBwkUqmbozdOY3uhFpLqGKZ0c
TQO3caP5Fr7zznXi1oPoDHnKLBKakcMilSCqlkLb3YEYZ69F3ktODCHIWezh
NqTuh9fog8eegdcVh8fNzEuMXc4oK8wsxNnL/KO35+Hh3Apr5xFc8sOg0mKq
fxKTvZPQDJvZJ8zIQ14o2jhD5evwLCWxIVugTxrHjd9pwt//rW/W569ydATx
iAd9EgnmZqdgnyvDK0vDLyVv+2Kw90Zg7vHCPcP1N1TgmrPTY3vgX6qhqDlH
fHYbawMu6GY1zOoBHO7kcLxXxNFuHif7+fpvqO937+PGnQr5W4RE4kc6E8Xr
Fw8Q47xJE1+tQY9qhXoU8cHmsBP3OBZXiK91iPgOYtg3QC89SN5KmWdZCT6e
JO5pegR6JkWRVRnGaEXK/CvFTHkIM9VB4joA1dYAJrZGMbM59f/Ddzg7Sp89
iBa1Fm99a4cY72Jg+j6GZ9rRJbtLrVzEyWkYscwGFlfp3deZJasrmDEO0S/e
xtv3buDaOzewTP+iV/RhvqMDGmYgtaQHQ53kMjOSj1nXT/5ucBYreno4l3up
33J4rWn6ogQ8TmLrjMBFTB3E1uEMwUpPrHUlsGHLwKHXk1MznId+ZtMNOCbo
sZVcr34b5rrmsDK0BqOanmrMCuukBy6VCauDU8xsc/hv/5u3iO9vYHF+Fmb6
1hH6grk5NSzzzFujaXq9AEzUro3OABY6nbAqg0iubiGxvo/Ywh41P4XJQQMG
qBHjg8vMNzGcFHZRWK2gGs7h/KSE0wOBcwEtkh1coz7330+hvzsOOzn66tEh
cswEOWYCnWYZm2kfYn4rLCYdStkEltYNGNJyTtrINbuYxRpMmDSYNRqwyJph
lpqy+DBqzWDYVcWo/xCK2BEU4R1MhQtQB5NQJ/2Y3LJiokLNpq+ayFKfqd9y
bmWcxcPJYSitK3BZj5GMH0C10QnFUhf6xluxauOMLOqhd6oxp5Fh0SaHg558
w6/AgnUEC3YlpAOtsNIvZyd6yaVOmHg7qBxkD3dhkrNY/O2ZZbgbS8y/iqE+
hOi/vAvzCFjzCFpi8NEDe1kugas7CIsrCKMrgHV3BEt28nFVAw97yz3rgJe6
usC1numegUVhRWA8A63CD1XfNMYkY/DM0C/NeWGTLWODmVfWpsJvf/ObWBO5
aGUWrXf60HV/GMvSJLQ81pLCjRmpDSuqENxzeWK7A+dUDgsDNiwN6jDdswip
zIg1VQDB+TxnC7P3YBCGMSOSfj99dJlVwvlBCV39RdxuqmC4ax+KsSMsmdwo
HR3DXN7FOmf2uL2K2egTKFPvYyD+PchSX0AS+BTdyR+gc+/H6Nv5ffriz+mp
PsGc53vQe17Alf4AltzvQ7/1S+h2/yVW4v8DNOF/jdXEH2LO+xFmVq4wPrWL
USU9vpE6nWNR05WZhrcaZmbqi8oxE55mr+3h+cNdZs8Z1hyscfZ8ZBr6oBrG
8BQssVmYuJ/Op8aSRQljiI8l57C42E8dboONs1bf0wp7X3t9Di8LDyXtgX5Q
glly2z/aA/s0vU1fG1xLeoSJbdgYpmcJwG/1wyn+T0W3Hya3j3PXj1V3CIvk
tUbD/poZRmLDiIDcB+eoE0F1HBqpCRNdaqzJyO0pO6wTDur3MjJaP7xjdpjk
G1hX6iAblGJufgnTo8SsM4zp9hBU7RH2RQS2tRQyhi2UdJtwqMNQ9+owJZnH
22/dwELfPLUnCqs6DftEEppBJ4xTZsRDHuztZHBKXA9reep1AcntPawn3sNK
7AXmss8xVnsG2dlT9B49Revla7Rffo7OrS/QkvwczfHPcCfwMe4Sn47Qa3TE
n6OzzNo8QUeyBEk8h+FIEmP2OOZMzPbmMJa1LqxNaTE/tIrRrllIW6SQ3GhH
Gz1G6z94By3/9T+EdKWH3B3l3OY8T8shZfaVxkbRz1k+SE/udlqg02q4rmMw
x4ljaALa4ATxnYQhOFUvY4h4ByaxTF7X78dmYNIpyNE+2MVvZUcHyOUuOEZ6
6X+6sSawFn8vyrnsEBot64ZNPYKQJYCQ2U9v7CPGHoTszCXi/zkL0Sf5HFin
N15xeTHvCGJNRy/LvOxcnkZmJc5jaMivaeKhQ3zRCafaiGnenx2eIAfXkdf7
EFoKwK3Uwkh8TXIHFibCmKdH1klCsMkjSMxlUdaVEFsvwMpcO9Gyhp7rq1C2
62Cb9GKyZxbXfvs7mJGsY6Zfh5nOJRhla9jMJXBCzu5Vc9jjzK1V6JFud0P1
ThvG27ox2twB2d12yLj2/19R3/HkRrond9e+eW/I9pbtDbqBRsN77733Ht1A
A+0t2TRDsumGbkgOOX7IWSl2Q1rdFKGDLtJxIzY29qDQRXedFCFF6D9I5Vek
ng6/qEIBDRS+/DJ/mVWoav2NVSxNLmFmfBmL4+ssOZZuKLA4sUTPt4r5URmX
C5gfX8HC14tY+IpZ889TmP9qDNq/GYXhzxPQXB+DYWAY1muj8PxpDL4/DcH6
1SgU1yZZ05Bfm8f6wAKWBhegKxjgObHBfmiC8dzI7GuG8cAO3b4dqi49USOL
414Deyf0M6z+URbdwxSaBxGUiWWBPBZYV8jleN1OfLlOrhfjRvTEsWaBATF1
bciRD5g5z9YQX1lE06lhT9RKv9MpEO88tbnXFsf6u9grdbBPHdtvt9DpNtDY
qaNIn5vpNJGgB4kS/2SmimbCg2rMiT3m033/AU4j+yg5UggY3Ih74tTvJvbp
d1PE+CRewu3CCbao1R1PDgUnMxSz077/GFexCzxNnuEgyH5triK+WaL/LiCh
o0+mV2v795AxN+CUR2FYNiKwFkFMWUTF1EAr1Mb5wR5u3zyQrhm7d/tY+n1s
cFYG7+As7CNLMI7PQz0yD83AHBRfT2P+6xuY/noJs39ZxfigHJMTCvp6OVZG
17E6to65MQW9/gb1QonZgXXcGJBhjnjJB/keo0vQTa7CekMG96QcnsllOPgZ
/oFVuAcXoRtYhvr6ClQDi1ill1RXmf2ObbDsmWHYM8FAT27smaHftWJzy4xU
LUft6eLH10f44fkRvn98hDfS9Xn7eHi3h7PTJtr7zCJ9D/G1SZjXz0KIRg0w
rqxDvroOl2xd+k2Wl323oJYz67L/krMphUzKwQXlCgrkWJe9td8kvnXi22wx
JzW5rc5sWEeF+TDbbkr3No6VtpDJthBxmpAX10bEqzjw99nXXagGK+jlqenR
GoJ6J/XCgX6iiLNYA7fih+gljnEYaOJWlLgy757Tl1XZUzPyJHLKKjXmiB7/
JvZ8zNyhfVTt/DxdEmF9HEUfeUxtKEdqKEXKKKfKaOar2NluYq+/hUNq9NFB
F4dcdy8qYB5fg2l6jViswD69Av3oCpY5/vODCswNarA4vInZSSXmZjeYyVVQ
kfOqeSVkXBfb5vjc0rCKr9difoivGViBaWwFLr6fZXoV+sl1mCbXYJtYhn1Q
Buv1RZiuz0NPrHXXVyEj7kria2WvNfaZY3sm6LtmqbTEWNUyw18iD7ri3qY5
nN4u4d5VDVfP23j2uoMX73p49f0eXn3Yw8mDHCIVC4o9L/ENI58S1xnpyR87
x29D0uKbHi0Cy0uIaxUo6BXEWIUqM1Ncp0WFnN2if9ppd9Hf6mGPY7ZDbLdZ
4phtpdZATtzvuNJEpNRAhhhrNhRwmlQ4zqVwK01csgcoB8oIm91I27zYT1Zx
LrB2pxAz+nASOWVeO8SF/5AZfBt5ewJpdwwVfxm7oW3i2sMRed1kj05ZY4i5
w0glwmg08szJ3B+pGuj3iOeuqJZU+/029ne3JIwPiHG/0yCu61ANE99R+kni
5JjagGpQhXViJRsxYGNEB8WoAfIpPdbnuL6sh2FNBf2aWlqXi22TeihHjVDy
tWvDBigG9dAMa8lbFTyjamiI+eawDMYxGXGXQTfEjHN9FhbibLi2BgXngrJi
hGGbvO0YYOgS444JWj7WbPN9G0aEGxHp3IY5xfzM8mZ8CDOXZBohZpUI8p0Y
ct0Ye2MICfI336VmnoRQzluQWltFSi5DTfweNuZirlxHhvj24m50yLuOxyj5
6k4qRm+8h2qrS79MH9Tuo7+9JR172G43UKtSn4vkb6GOCJeh4hZixRZseg00
QgMyAVxWdpH3ptCNZXG/1MNJmrnUEUNIL+7rUsK2q4ND/wUz2Q59dgQpeuvD
2i4eHD3EcZ6f6ymiYGRecO7iqvoLvj35FS/E/ThvPcY355e4dXqAm+e7zKw9
XFzsSPdlOj+mfrFOj3ZwIq4zZ5YWy952A8qxTWxeX4dzkDl0RA/ziAXaQQd1
k31v0AQdsVVPm6CesUK5YoFy0wabnNlWYYJSaccmt6lnbHyNEVrOB/WAhfru
hGHIwfdi1h1iNh5QUrM3iLsSevJXO0I9Zk8wXJ+B/ms51ibk2CzpYCCOhroB
+garqYeubYC2TYyZsd0lB7q1DBw5L9xZD3wZYpx2w5d2wh13wBayQudj3o5Y
mM3MyHXcaJwG4U6YMU8vsbbM/kFtyhq17F/rsC8soeWzIGvRoGRi5iX22Qjn
CPNcvdFFu9XHFqvT2cIO+227UUep3ECh2EQ6V0csW0Mo24QvW0fC54Cf7xF3
GnBeb+N2/Yx5pYKEycu8HcZBtIGL0AHa5m34lF5EqN9LnNP6JS+xZvay0rep
2GcV5LCmhgeBj/h32/8d/+Xyf+Mfz/4P/mnvf+G/nv9P/Lez/4F/6f8z/nPn
P+Hft/4BL5vfE+8j3Drfx8XpHs5PiDvxPjv6jHe/08bGuA568ssxQnyGdTAO
098MerE56CfOXE7ZIV9wQrfog1IRgkkdoo/zw64IwMB1lTwM3YIP63yNetzF
ORFghWAe4uMhHXScI0ahASMarA5RDwZUUA7JiPcS9XkRVnozOfu0pszPbvD1
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
wzdf/v7/AqMyaSg=
         "], {{0, 68.}, {120., 0}}, {0, 255},
         ColorFunction->RGBColor,
         ImageResolution->{72, 72}],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, 
         MetaInformation -> <|
          "Exif" -> <|
            "ImageWidth" -> 1200, "ImageLength" -> 680, "XResolution" -> 72, 
             "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
             "Created with the Wolfram Language : www.wolfram.com", 
             "DateTime" -> 
             DateObject[{2022, 12, 6, 13, 37, 51.}, "Instant", 
               "Gregorian", -5.], "TimeZoneOffset" -> -5|>, 
           "Comments" -> <|
            "Software" -> 
             "Created with the Wolfram Language : www.wolfram.com", 
             "Creation Time" -> 
             DateObject[{2022, 12, 6, 13, 37, 51.}, "Instant"]|>|>],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{120., 68.},
       PlotRange->{{0, 120.}, {0, 68.}}]}], ",", 
     RowBox[{"\<\"dispLeft\"\>", "\[Rule]", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJy93A90VNW9L/AjUE1b1AMEjBD0gPwZEL1zW15v3nsuzm+v5bor7y7vWrPu
9a6Xe69tj4p9uXfZe6ctbdOW1gMEHf6f/AEGCHggIZn8IYwQZRTUo2KbWqpj
pW20qEdFGxV10CAjBHzf3z57kmFIENB2ZX1NhBDIfGbv/du/vSdT7vjvf/rO
CE3TflCE//zT7T8W3//+7T/550v5f+66/e6vf+1u/s2bkSpkr/a/5z2i/S+Z
h7X/KZPSymT2aH83kIe0b8g8qP0PmS5t7kB2a18fyC7tawN5QPvbgSS18EB2
an9zVjq1G8/IDu2Gs9KhzTln2rXrv/B81t851L+TU/j9cPK/3/zHg5P/WOU/
hvmPbe7xzhlwci6cnFXOjy2/CNfhTPNdL9TzYg3btNlfSD6P/fl4X6j1UM75
1sM5/yVchxurF2r6eR1btVkXnM/7HDgf7/O1/qwxfS7nfOOLdb1Q0/MZoxfi
eDF+CS00ZL6I58H5jPOLsR7K+U3tTfMtF7HeMv+s/dnsdRHqNd/2Eett8x3/
bfNd+x3zr+16oZ4X6/WXzIWM+88a38NZ82P4qvGq6Ru++Zr2mvm6/5r5hve6
edh+wzxsHTbfNGDrvWn+2YavAVvvz+bbNmw12NqI9o75rvuO+XldL9T0fOba
C3Vs0Wb+VfJ5zYezflF70XzJeMn8k/En8xAdMl+2XjZfsV4xXyX4EnwN+Gqv
m2/48HXfMN+04Uvw9eHrwpfg68PXha8BWxch+HrvmCvcr9Bf2/WzPC/GsVmb
8RfLxbify/sF6wXz99rvzT9YfzB7vD+a0pfgS/C1Dpmv2C+br9rwteBrwZfg
a8BXw9j14OvC14KvBlsPseCrwdZDCLYeYsHXf8dcHv0KLdO/TLHkZXQhrn9p
0/N1rHPHilXOaMEfb9emf6H5PPaF388b9h1m2n3O/J33vHnQhq/xe/OPNnx9
+BrK1/qT+bINXxe+7iumb79qvmbD14IvwdeArw9f77D5lg1fA7b+W2avPfTa
+672rrk8At9MEcXsy+he41Ja6o2ifNsv0vWzxuj5jkl+7OvtcaK+f5yomzZO
LNe+IgptmrRpF53P6z+U92+N35ppD74+fF34Enxd5UvwtV4yD9nwdeHrwdeD
rwtf1zdft+FrwZfgq2Hs+oeD2oryaivr7LX3XQO+Bny9IrrPgq8GX3cULaGR
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
tDy2ljnwjcBXh28aicJXh20SseCrwdZB9CvlHsQxYOsixhj5mHLtWhuBrYcY
4+R+tN5FfMQoDu5thIfvbeR6UEPVyrKeytk6iDeZx6f8vI06aiwNNVZmvPy7
ZA2dhq+WMFst+HrwNTrMThu+PnwJvi58ffgSfF34anvMlAVfD77GXvNRe9D3
CRu+PnwJvu5+85faL81fWb8yf+12m8tCGMOhoE5aXz1B7lHb5sP45tmisQFj
ODVbbFx5teiM3ih2pOaIhBYSjRWNdLryNP+b5/VX9NOpnn5a0j3inOa893zf
f8/80DtqHvP6zKx3XNYrvK59qsHXhq8NX2eE7AtWW6PkOsi9pPs0+HrwteFL
8NVg6yEWfDXYuqNlv2B15nJZt6zRrpTjw9F1WcvU6GOoJgpbf4ysX+uSiA7f
yDg5nlD3U71efHZvI43aOTrY28j1FoeslbmeiuTZZhDjGjl3c08E+wjCPCbX
AVlD47mXMBJmmw1fH74EXxe+2k4zacHXg6+22+yy4OvB19hjPmzD14cvwdeF
rw9fgq8LX+1J8ykLvh58jV+a3TZ8vW4eO8Rr77bDU8S2g1NEf+wktRF8b5st
6nrHynV4bel4saziy6LdCtZez3vctOdrYp+xz2Tj4XKGL/Yn77vwteHrwtc9
LuuVUzZ8/dMmP46LovC1R9CS6Ei5/+QznHv1S+WehedO3p/yGQDmFlqRhG8E
vpmv0ioHvuHL5Z5ydRS+GSQKXw22NqLB14JtGgmPlTUs9woL1+DP6m3keopD
1sqRYL3dkhy03RK5Rvpzn3qDixraRQ3toIa24RuFL8HXha/WbnZY8PXga+w0
H7Dh68PX2G0+aMPXhy/B14Wv9oi514KvB1/tMfNxC74efI0nzf02fH34Enxd
+PrwrfyUtvXB1psijTGmgv+/aapY0jNCNCamiqVdo8TTxtNmy80zxZP2E6bn
Pm4urr9E7NP2mY/QI3Le2GM/ZD7odck5ZShr7g++Z71nHrWOmn1Wn3ncOi7P
2vhMhtc329LkXnOxNULOjdUEX+NLcjzdl4avC18LvgZ8ffg68CX4+vC14WvA
1kMs2PqIBd/MlfJxrMnosi9Y6yEGbJ2xso4tXIPPdW+D+2m5fvFQtfKArY/o
ge399jXy97mPiec4rc/A1y+W639NWieu9ds8+Brt5g4bvj58Cb4ufLVd5m6C
rwtf7SFzjwVfD77GI+Y+G74+fI3HTM+Grw9fgq8LX+1p85cWfD34ar82n7Ge
MQ94vzH3hvbS8fLjdCL7CZ3K9NO2OaixSqYKnsN/5f9S/jme35+wnpBfc8m+
EWKfv1f+fbzuP2Q9JP8tXBNgLzAvl5wv9xjeM+BrwJfgS/B14WvAF+ubTfCN
XCJr1iUR+Ibhq8HX/5Lck3LfP0bw1eDrwdeGbxi+aSQKXx22SSRyhdx7rIlc
KftEjqXL/Uh+Dc3jR9bQBWvwff7w9zZa3GbzYfqfJvsO1Mp6Xq3s5tkSEoVv
8hq5HnMPc0MEvoQaOjxePq+4JuA+eZsPX4KvC1+t09xp7TT7Mj+gXQZ8rd1y
zDxkoLay4eun5Hja58JXe9R8jB6TY+0J7QnzSQu+HnwxDn9lw9eHr/Fr8zc2
fP3fmHzn6XjZcfqk6BPq7zlJJ70TxPa/tuHr/VKOe67PnqAn5Jyw5OaRYp+3
V84XKQO+9JCcS3a7Z/rmwj1g7iEc9TNmnwZf47g8S+33T5qnLfiG4RuGL8E3
DF99lKxjeb7sOHK9uC8K33CRvL/K92j4rvIKA7YeYsFXg617uewLrfGukD18
rmGciC7HiqyhXVVDR1UNXbAGD9nb2Brc22i2mlFfbTe5V3xGrRwdrJW5ntoS
VrYukr5GrsXcB9noooZ2UEM74+WawPUAryFtWpvZbsHXg6+B2sreaR6zF9DH
7g/p48iP6Lj/I2oNz6KUC1/tYfMRC7543B814GvBF2vlEwZqKxu+PnwJvi58
tW7z1wRfF77aAZPvPK2ltZQtzxKf3/CvPUPPmN1Wt/x8Xref0p6SX4vX9E2Z
jcTPI17vU1rgy7XAbnuXuU6bMC+XAV/3LdnjPerB1/vIPO5/bH5ifSLr0tME
X8yDi4xL5J5kiTFSPsZLffh6XyLec3Ptw/2lZT58Xfha8NVhm0Qi8M2Mlj37
1QZsk0gYtt6VshdY4+XtkbiGtlQNXbAG3+cMf2+j2cjzHaZWlrYWXJ3A9n7t
WjmeeS+1MQPfDHz98fK5xGsF7+HaDNRWNnx9+BJ8XfgasNVg6yD6j+l49MeU
TSN6FWWpinjefJRQW9nw9R+XY+4pF77afvNp62k5HrsN+Frw9eBrHDD5ztNz
/rPyXjmfr0tfA77ULcc7191P+U/KuWBddB09aj0q1wGu11P+HjmHcC2/yzrT
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
sqdeYyBhpKxG3k+rKUcqEAuprJE10f8HPTFv5w==
         "], {{0, 68.}, {120., 0}}, {0., 1.},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Real32", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{120., 68.},
       PlotRange->{{0, 120.}, {0, 68.}}]}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"TargetDevice", "\[Rule]", "\<\"GPU\"\>"}]}], "]"}]], "Output",
 CellChangeTimes->{3.8796967520097113`*^9, 3.8804002753776693`*^9, 
  3.880409159150859*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"224b8d28-e07b-4ed1-88de-95d6db019756"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"i", "=", "4"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataTest", "[", 
   RowBox[{"[", 
    RowBox[{"i", ",", "\"\<dispLeft\>\""}], "]"}], "]"}], "/", 
  "10"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"predictions", "[", 
   RowBox[{"[", "i", "]"}], "]"}], "/", "10"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879353911139245*^9, 3.879353957994094*^9}, 
   3.879611793665049*^9},
 CellLabel->"In[65]:=",ExpressionUUID->"c19490a4-6bd2-4282-bcec-95b36fa19546"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
K+d7gf3E861/ZD/VxndxKeW/Tsp/oyn/9VH+mxOCjfpd5/u1paOoM3rdYSIP
/tpvxNOs01yzvNVF+W8sabPUBV/Pp/zXRvlvw9r5DiiMxDWeiF/NSzI3ntso
dDQU/W/xPFIbX63vGL1hfh3b+IkwYy6anwn3l/guFjF7p5H96pfgkvSLmAHj
/hXPL4jZID7boJwR55jvrPwO7iz4TpzLmCjT8pZCvrNUnIPls87BBf8Rc/18
dmOC9zBM0A7Du8phcVb2sOcQNE86JGb/+/q+hfHat7BKoWX6Fr7xfAPNkmhF
fSPOB9TElu8C76bdjhfyaMXcjrNzb8PhenM8F9Yc+czODKsJM9UmOD3kFvwz
+8nivUf0drnH+3Yp5b/OVnh/NOW/Psp/c27k+0UsxVee9viqqQM2MXcUNmtN
DhM6jVUd0eQKEzXmFVKnWvmWuin/jQ/HiaYI7F8YgS3slP8Gk+/1ROLE8Ihf
zUuyX2WN5hok/7nQMdrbHGcx76F6Q7Jh2geSMRe90WLMZj2ReHX2LldCabIx
O8vnznLkKnFHBM9n8fwfzxHxuRg+O5XiPQYp2jExC8pn1fk+Au5tDzQfFeer
pmg+MUvI86J8np3vLOAZeT6fw2ew3rT9KHSAZ0r5zPvdUT9Ai8oj4gwPn9Oa
JB8RM4nV2WaEGHbL9/nP9hDbYloJxNdzG/5cRnzLbsVOhcZ5yjDN4PtH9tM3
qrGftFLKf5218/23lfLfcoqxNPK/NoMv16/GmYhvaUe0RpPtlnT8Fd/x+ZT/
2kibG5I2uyn/jaf819QNYwop/7XXzHdNbvgN85IcOzNbPu/LPSL2t7zX+Tyw
6A3n0usKyX5Lrs5Fm4zZLL6zg+/baZlM9ptjzM7yuTPuUfIZCnHHi/2cOJss
7g7gsxMmYz6IfTHPn/BZZD4DmWE7LXInnuk+rZ4S94rwjAqfdeFzkunySTET
zHPf5dZyMePAcyyx9p+A73Ga5j0h5oZ5NpzvruA5iJvZsiZfCLodq8pux/jy
23GEk/iWkv2absNzQc2xs5f4JpjwmfwmomZX237iezJu3k8BvvdFtxT9+gM5
rXCxlfLfcsp/Ncp/+1H+67+RL1SF4nKpI37tNrhyrMW2zDHWwzaKpxt2wm/d
lP/G1873++AIocdvJFL+K1NutCcSS4PDMUMbi9vy/yHyIa5JMlvu7XOutNXf
SPhnEYNV6/2KuejS671fvvdO3JdVrfcbmXRJnG0QcyS2i6JnybmwODdz9WwU
z8Xz/BDXPzjGZj/Ns2I8r81zZHzvAN/9w7P5bP88n8A9Cj6Hwbk03zfBms9n
MvjcK5/f4PoJzyqxn+cZJKdWATez5Xp6seV2MevGa0T+7YL38PDbhD53riJ9
Vk1YUdxE9FSq7ye+yyawn/hsbvX9xHVbyUf5bw7lv1bKf8tr5/tOLsVX8Yb/
fbWc+JZ2ED2+pq6OohdcG9/XTV3wkcIuojf0n+BumO8hH5wYjv3lCLxzz018
c7qJe4h2OpMwbI6D1jjM1F7FWGeQ0GGuZ3DewM/kdIIx2xHo/W4uuXquIdD7
zTXuNeQZWu4TcmzC9ayjxXXEeUO+B49na7n/wOdbOE/mWS6eBeF5au45ydFG
bYTn99iHi/kQ0xWQ0u7BhSH3YI/Cu/FKgjH7cjn1LpwfYsy/zFNbYGTUL2Lu
qKb9xGw7RF9nm6E2xhGJtxPjYLHideIbRnwV4hvTHJ8z3Yp87j3M20T0RMW5
j6v7ic/P17af+LU38+2ptcL6/Yx5jcW5lP8qZLtVlP+6QkTvnvmCl/h6SKOV
jmIxX1NDI9biXOk1UyfsU0j5r70zHg7ugqs8tfP93kH5bwjlv3qkyJ9GpiVj
sfOf2HXOBNyd/zruLE/CItM4yo8aCd/DtivO81MOtdVh6DjnThxrcxzN9S7m
zf0knglgfS8PM/wz2zj3EHlGXtS6lAYiJuOZzGml9Y1zEVp9kUNzHM5az2fI
+T7MqZ56om4SbQsR/ioora2o3T5QSDlGbBthD/XTWovaX8/CViLP5OdZN62l
qB1FFZIPjJXF89ZU2hvyPWL2abRyN14uo72h3oUvKHdhcWyw0GiOsc4n3CZ6
5M+F3yrOzIZVNRH7erTrkphV4H4Y19Qvqb9ATftJs96DCeWU/2qU//aj/NdP
+W8u5b9K7Xw5/31VJ765HfCr4I7E+mqtw2TE0bXxnZBI+a/cDYP3UP7roPw3
hGxXp/w3mfJfs8F3dW5X/H9zhYLb
    "], {{0, 68.}, {120., 0}}, {0., 1.},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{120., 68.},
  PlotRange->{{0, 120.}, {0, 68.}}]], "Output",
 CellChangeTimes->{3.8796967520365953`*^9, 3.880400275393476*^9, 
  3.88040915915691*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"ab77c0b4-df4e-4c46-8589-aa5e27e710fa"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "10"], " ", 
  RowBox[{"$Failed", "[", 
   RowBox[{
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"dims\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"120", ",", "68"}], "}"}]}], ",", 
      RowBox[{"\<\"leftName\"\>", 
       "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/left/033.\
png\"\>"}], ",", 
      RowBox[{"\<\"rightName\"\>", 
       "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/right/033.\
png\"\>"}], ",", 
      RowBox[{"\<\"dispName\"\>", 
       "\[Rule]", \
"\<\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/disp/033.\
png\"\>"}], ",", 
      RowBox[{"\<\"iLeft\"\>", "\[Rule]", 
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1: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
PXBU+BsBcvhyWAiKYkNx0scbMSFB8PHxFL+XG6fvzxYZUZ4Vjbvr1fzs3dhY
G8Q94vtou57cLcX9DQvub9nINWbXBSeeTNTh6WA1dbEGj1qqiLEZT9v1eNBM
/jYriY8BD5p4fX81Xg4I+NXiyRPiuVWHx6vk+1IlnhDn94TeeUw/Xa7B+yON
Yi887a3BgwYLHtQY8bBZx/vLeF85e0iHl/T4xzea8PRqPZ401uFRUwWL92py
4Dn1/FmTmVszuTuPdWK6Tjw3WHdZy0vcLr/i8uoOf9d5PDU9KWJc1jmELGsD
2kdGxePFpVk83Fygxl9HfW0psqRZSDZlI8mSi2RZuvgbQ1ZuMkrLUjAx+jqz
0pdQWWkgnn3/R8/93bo61EmP7kNVmQ1GnULEVdhq6LmF+Vli6bUyuLq6Ye++
/fD390d01HmEBp+Fn/8RnD4ThF37DpG/B3Ep7jwCzoTivJ8/0k74I1CYiUOY
xfa+i+KcNHR0NWC8oRolGSHY2GzA6ko71tf6sLXZgfubddjasGF9m5opcHiJ
HKVnPrvBde2pwBZns/UGJ+52mZlzFeSuCttNOmy0lWKbPHzWV4mX4+TqRhUe
EcfH96vxYLmS/K3EwzXi8oD98biaHK7G+1ep0+yZx72VuNfO5zdaca/FhAct
ahZzc5saj/tNO701UMHeqsR2K/WGs+GjplL2AfuhXcPHNVglbqt3bpKvAkdv
Yn5hSuSugO3GZ7V6S+Tw4vwUH5+Bo20IkrIOTN+exgp7Ye3ODte3127j8fai
+JxhcsHcVIIESQqiybGc/DiYOW8oixIgKzwPi0FCfHt/i+H/F75ClTlMnH3M
IrZS+mV2ZgoK6PECtmkpifj8H30Zn/u//hCf+9zv43O/93ns2v0u3nzzbeze
uxdunt7Yc8ADWZmxSGOWjz93DtnnzyD47En2xR689frbUCbHwOkwYvxqP2pN
SVwXG+eINty9200u12Pjro0ZxEBsTdQeKx4ulODRYgl90kaeltEfy7HaZMFK
rwYbVzi/UJu3OnTY7KxhzmKeulqB9x5W4sUzYvmIWvqwClvL7IulCupBFblb
zcer8fxpFV5uskaEvqnCdncVNrt4bRs9tUVF/DS43yt8x6FnbxHPPj6/tRKb
1I61RgfWGuxYbbFifUTO11YQm5tYJz4byzcxPTvFPL2Dr8BpgcMCVmvLO8db
q9O4TV8uLmtDUWmruL+1ekvU9c/6YZ33E7y6g/ycoPbOz0+grp6zNHlss+Wj
u6kGHQ1V6O+oE31WxO9/w/izfWEraPZAT4vorwK2Knkh1AoJlNwKfitjvhK2
b771Dg4dOgRXt4PkrR9iOfcK11WUWsT5S/ieqqnKxDJClXMR2SmxcD3kynkq
Bs2VVrQbc2HVSDDY143b4+VYulWM1ZvMrpx/NhaI6ypnlFXNDsZ3qXvL9MQl
K9Z6yeeWErFWOtW4O6HG5jUN+aTizGolxtXkIHGdr8ILYvfiMfPxkwrcu+vA
+pgFa6P015VSPHlcjpfC+SfMW8+o1zfJS2J7r5PP76wlzuypDim1WIHtERnu
jXPWuurAvbYy5uoqbNSzvxqEv+fnbNVq4n2LcXdQJuIhYDw6NYmOa5OYmX2F
750dTAU/nidvBY4K1w6OT0BV1wdr2zD5u3PtIjm/KvbJFB5sLWKovQIxR96E
NNIDzZYcLNwcwc1bk+juaUUndUz4fa6DfiFg91t8/ze+CnVlsEO8pp3eZiC2
whwkk+ZBXpwv4pyRloQ8zkgXIsLg4eGOwIBj1OUzzMlRyKMPC9ebDewL5uzm
hgr0kWft7LvGMjVn9gykX45BcvwFjHRVo0GRCVN2ImpqKrG61I/FSRmWRoqx
MirD2iwz8IoWd1dZ68SZGD+6a8TWTRMxNXP2sWKx1YiVfvJqlnPMtI485lp3
VmC1uxwPxivwgn7+nNgK+D17VI6705yXho0sE9bZR08ecF7iueePyfOn1Xgx
J2TxSpH729SArR4bj+V42MAeu6bAxjWt+P+Z2Gq2E19Bw+kNjTYskeNLHUqs
Xi/G2kDxDr5LU+i8NoWu61Pi8d3lHXwF7IRcPXZzEtsCd4l9efcojC3DsLVf
xRh74t7aLfG8cJ3A5dXFSRQIv6MFuEAbfwSF4QeRF+4NO/nb1tqMCV67ePs6
rg62i/gJJcyyYr06FmtIqE7xb2kEbAycZwWuFlGbha2QrRLiYui/mTh96gT2
7dsHNzc36q0reXwQbgcPwsXlAA4ccMVh8voofVn4PetKTz162zgH11phV+ei
VF+E4a5adFqkUMecYy+ocZPesjyuw+ygHItX1FibIsZr5MIa15UY31sjhxeJ
4VU1loc1uNNvwFK/HqsTGqzPG9gfJsxNl2J21IblWzY8WSGmK/TWe8TvEXWX
s9D6OPuB+K6OGMl5I57eLyP2VWIPPL9HHi8zs01W4i69/W4Pt31luNtNj+Bz
HvI1NoXnt1vo7zbOUUKxn5qNWOqWYWOSHjHNIsdXF3cwvTU7iaWFSRHrVZaw
3aRmd127IXL7wdo0Jm9NwERs9c2D5O8I8d7BvevaBPl5gxlzCdXmYsT57Ubx
BU/IY4+gINIbmcGHEX90N6R8rEyThduTw7gzP4mx0d6d74q5nsJ24nq/mKWu
jfRgpL8dPR0N6GitJQfVnHNzUUi/FfgqleSInhseFizOu2Gh5xBw/Ch8fXyo
07vwxpvvEO/9YuY6dtQfkeEhYi8Iem0xqsTvL5OSOZNzLhqut6CbvlWvyYUy
6jRMuiL0dLZi9VYDZvqLiK8Kq1NSLK9I6MdScthAjDUiv+9cVWHlhppc4ow6
zfXeVOI25+KZLQdu37Nj7r4Ka5vMz6tlnKPL8WSTeZvnt2+ZsUnur/N5d8c5
G3P/wZ0SPHvAmWdb+G6MXL9TjaecjZcnHFjso1/0lmOBXrvN13k0r8PWmBHL
bRYsUzvE6rRivpX9NiDH1i36/k0ttqa1It/mZyfQO3aDeE1g/XfwFfR2cPwG
uTlJLt/E0Ng4zK0j5O8QqnpGxbwlaPu1yRv83Ldx+0Yfkk8fRHLgAWijPVEQ
QWxDPJB02g3JZw5DFeuJvFAXJJ91R5mhCOXMTGqlFAX52eJ3xfGJFxERGY7g
kDM4efYEznB77twJnBT+vi30rDj75GSlQikr/O13V8LxsWNHcfjwYQSdPiGW
oNXeXp446ucr4itUYMBxsQeO0pvPBp1EQuwFmNRF6Kuj91bq4ZSkwZ50HgbO
606nDXdmBrEwUIhF6vPyba7bkpJzo5Kfl/q4Qu5Oq7E0rMSd6yqsXzFinWu6
tKHEzKadGDu4LcHclhord/W4u0mPZvZ+sunAk1Xq7CQ1fJI6P83tTWGfPTDD
mYbPfbrlxKMNcnytnLm6HGtb1IZ1LeaXbJhnn6zcLWEuM2NjQo+VbgMWuoQy
its5ZuaVEfr/DH2E72f9NjVlYQKjE+Oo7h/HqIDTnUmR0wLuAsaztyeI487+
2NQNGBr7oab/jtwYF/EXzi3O3cD23TlosmIQ67sL+eEexNYTqUHuSDx5CBlB
B1EU4Q5ptAfSyOWYYy644LMb8YF7cezwu9izdw/ecd2Hdw/vx+79+3H4iBt8
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
5cUlcJZVI9DCHGtqQSN76LqcAuQw3/Uf/ZVdagn5LLloZG9nlccMi9QZhtzj
HBsbh2g1Xnpb4REr+ywS7+vk3hfnIxiX8cln5xAfF4vu4DAeGkbRrguhzTCB
RsMI6rSPUVvrUt5MtPxK5DV8ce4Sj9fZv19WWiB+Wrx4K3E0Uatyc7JQ+7BK
zY+6mXspKffV2lLJhfySAkRF8/Pcvo2i7GS0lzxCemrOCb4p2YhNzT3Bt7Ed
5Y1aVDe3KSyFnxJ5Eh85mi9Y8nFhbTNKqMUVDS2oaW5FQ5tWRWN7O1r0emg6
Dbxm7EGa62GRnpP1UrS1m57LJfd7Un+DXqe6noJdr9uCfp7zkl+yT5XwVPDv
c8v//TKSr8SZ7yG6buP7epgz5uYG9rtGcp6+N2DDMHV6OODBADXNyfeNS8vC
/bOXYT59Bem85revR6HmU/LqswtIv3YdkRcicOdCJGJv3VHr+uz8HDbxgPSE
8thkoDbL/ji6Zvpt5pZZq/aRuMFrKePbUTdu4tr1GwqXa9duUJuv4Avy9xwx
+vTUeVy5HIkH7SbUWIbR3DaAR6YRVFmHUNHSi9o61nyrHpcuX8WpMxdw4dIV
RFy5pvCtqixT97s20b9VVpSigj5TxmAFz7zcbDU/KvNm5dRseSxzobKmJTX5
BmoLCtFeXM86noPbCt8sxJG/edWNKKzTEF8Nqpqov8S3qE7qaQtKyGU5X93S
hkcaYtjRzlzUQ282Msgh+hQbcbGSTzaHAXbqqIW1zME89HzEppfY+qkn3Xze
Iz6pS7CW8/ROxLWbnqdH7uGmf7WSk73iqfgzN/PTxe/qdViItY16bGA/0wS7
+C+pnVJPjRpMyP9So9b5+DlEJ0zUVdn7MCUiCg2XopB9NRoJ0bdRcOk6Unku
nRglJMTjlvxPmRu3lN7J37ZpmuESnWaI1rioNXb6djv9jPgF2TvgMnEQXK9e
i1IRQYzknNTd02cv4nPi9dnpi/js87PIqKxFrX0A9dpBPLAMoIyPy1vcyMmt
QH5uluL7Z9Tys+TvOeab5EoKPVZ+Xi4aWAtukZOyTuWuzHcW5CIrM13V/tjY
WCQlJbKvTmPfMsBa1gd9fRvaSh+hKYf9Z1o2EtMycTc9G0mZ+Upfi8jHEuJZ
QSwFx6aODmj0OuhMBhitnTDw2prpeczERc/vq2ee2/jYyGssOS45L/cPOAwn
PtRPvDzU5Z5OHfE88UhBeiXhqV/6EOInvHULzvTB/ay3/d12xWHJAa/TQh7q
eV2txFAHs5784nuZxPM017Eu6dBGXTXxbwpvg/RdXuaAr8sNo7aNvIzB5cgo
RPGapcbEIzcljfy4goSbd5AafQfxiXcRy+Mt4i7jbIaOZtUzic83URst/Ow+
foYuao6NXktqvuztdPFSpMJBIvJqlHou/BNvdeoMcT19AZ8yPvnkNBJLy1Hj
CqBa34syaxdKTC6UNFlwKyZJzWMKd4Xr8nrB+mJEJPG8g7i4eNVvXY+6wcdx
Ku4mJSGZ2Mpct6xPEg6LBzh++RaHx29wcPAlttf3MTMSRmNdA/LI9/yiQuSx
Lj0gNxs6dGg3dcIq15XX385rb2HOmqkjJvGb1FWpDWoNRdMjenR6J+qghXzz
sX56xe/QIweYB/3M+wCvfz9xCrqoxeTfoOKwRXGsr8uKYb9H3ZP7uMuMd2EX
vltw4e2cHW8WnHg5Y8fhlB2bYxY8H7Vj3mfEtKsds36+zmOA36phH8weh7nk
oXYOsWZ7xW8Tays/Q2vDI1y/cQenz0Tg1OcXEMu+MCslhb7nIm6z/4/n87j4
RGSmy3qv+wrfTr6X9ExO1nYLv6P02y7qk4MexyX1QfYgKS5UOIqW/sZbwVe4
e/ZcBLl7UfHxMx4/+eNppJO/Nc4Aqsw9KLN4UGhyKI8Tcfma+n3B9o+fn1O8
F6zFn11jHZF5bzlKHbh167YKwVi4e4JtvHou9X9z6wjbjPXnOwj2D0Ont6Cm
plbNtxSXFqGKddtJ3nR5HbBTJ028biY1vtOsvJ2M6cl4gNzzJWM/8tjNa9nj
1Ku+oofX1t8jeW5Q3HxM7fVS3wbJpSH2q8LVIM+N0E8IBlJXJ+Q+UGI93efA
z8sD+GU5iJ+WgnwcxPt5L/4y48H3YSe+m3bgL8T5u2knvg058G7chXcTXXg7
4cXXo73485APb9mb/2ncj4OQHzvjvVgf9WJluAuD3Tp6c9bPjmrW1XpyugZl
7PvLCrKRk5WJkqI8VJYVUCezYdK3opMaJP7NxXruYJ64O2WMg16uqQ5ueuog
NUj2ARItFZ5JXPoYwr0zX1zCqbP/xd8//OEUbueXoMzViwpzF0pNbhQbXMit
fKjq7HnmxR8+++IkHxinzl5QGi15IxFJjIW/N6TW07uJTktPJvyOV54uBvEx
Cfi/cKeGUA==
          "], {{0, 68.}, {120., 0}}, {0, 255},
          ColorFunction->RGBColor,
          ImageResolution->{72, 72}],
         BoxForm`ImageTag[
         "Byte", ColorSpace -> "RGB", Interleaving -> True, 
          MetaInformation -> <|
           "Exif" -> <|
             "ImageWidth" -> 1200, "ImageLength" -> 680, "XResolution" -> 72, 
              "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
              "Created with the Wolfram Language : www.wolfram.com", 
              "DateTime" -> 
              DateObject[{2022, 12, 6, 13, 38, 20.}, "Instant", 
                "Gregorian", -5.], "TimeZoneOffset" -> -5|>, 
            "Comments" -> <|
             "Software" -> 
              "Created with the Wolfram Language : www.wolfram.com", 
              "Creation Time" -> 
              DateObject[{2022, 12, 6, 13, 38, 20.}, "Instant"]|>|>],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSizeRaw->{120., 68.},
        PlotRange->{{0, 120.}, {0, 68.}}]}], ",", 
      RowBox[{"\<\"iRight\"\>", "\[Rule]", 
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1:eJx0vHd8HOd5LeybOI4TF1GWKIq9F5AoJECAANFBovded4EFsL0vtgFY9N47
QIAkWAASRO+FDaySHMuWLDuOu9Nz0x0njnOdcs93ZiAl936/3D8ezc7s7uzs
e55znnNmQR0tNqYpfuNzn/tc2Rf5nzSZI9xikZWn7+JOpqFMrTTIS2MNVrlS
bvEv/k0evMpysj7POnryNE66X0R0bAKaynWoKVOjyapGl0OH0QYTNsac2L5V
iReTtXjvXi2mu62402TEZKsJ/ZUaPL5Whn94VoefLjrxL19vQLtCh1xfCVSh
cqhDFJD5S2DLKMSvPmzGv/2wA/hRBz5Zb0S7U4u/+aAJv/i4GT96Uo++Oj1G
Wo34y6834uc8zz++rsPPX9XhF+834o/Wa/EXjxrwr99ox79/qw3/9lEL/uMP
2vDLT1rwd++14G/fa8XffL0F//7DXqyOOlFZLMcdixbLFQb0KxW4qVXhHmuc
dUu3U+N6Na7p1OjTqDFg0OKaxbBTZUaMO81YqLNjs9aKv9pqwj/w8//pwzZ8
OFcNuVSJ5o5G1HS3o6qzDfVdrajrbOXjdlR3t/I493vaxKoVnmM18nETq6Wv
HW0DHWhndQx1onOwE30j3WhpaYddXY5GjRUN0jLUZjtQX2BFndoKq74cNp0T
dpUTzpJK1BSVo6XAjoZsM+qyzKhPcaEuqQptSbXoTa1DZzofFzjRKrOjtdCO
U6dO4fApdxTnZ6C30gCtXA6zSgEr18XKbbVZjQqNAsN2Ne5V6zDToMdcix5P
BixYbNbjca8J3xiz4INhI/561YWafA2y/QpRGCKDNLgIucTXlFKERwNmzDTp
8HrMio0hBzrsWnx3phz//nETcWxGs0MPl0WDH6xX4y+2a/DXz2rw969q8a/f
b8OryQp0Vmjx62+1AsT0f3+zEfhuE3797Ub8yaNazPVb8P5MBf7lG8345cdt
+NVPuvEPH7fil99px1++bkGjSY2lDiv+cK0WP12qwk8XXPjhPSe+e9uBD+9U
YKHRgAcuLR6UazBj1+Ape+2PbzrwjN+vt7QE19UqDJXIMcy+cKnUaK1xorOr
AR19bWjuakZjZzNqiHFNB7ftzahlNXS2oKGjBc3dbWgnrl2DxJWvb+ttRXtv
m/i4e6Ad/YPtqGtohEHtQFmRDWVZDthTnDBn22EptMLE41a9BU6tHbXySjSX
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
vYcVfR0t9JgdmB134z8BLy1PZw==
          "], {{0, 68.}, {120., 0}}, {0, 255},
          ColorFunction->RGBColor,
          ImageResolution->{72, 72}],
         BoxForm`ImageTag[
         "Byte", ColorSpace -> "RGB", Interleaving -> True, 
          MetaInformation -> <|
           "Exif" -> <|
             "ImageWidth" -> 1200, "ImageLength" -> 680, "XResolution" -> 72, 
              "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
              "Created with the Wolfram Language : www.wolfram.com", 
              "DateTime" -> 
              DateObject[{2022, 12, 6, 13, 37, 47.}, "Instant", 
                "Gregorian", -5.], "TimeZoneOffset" -> -5|>, 
            "Comments" -> <|
             "Software" -> 
              "Created with the Wolfram Language : www.wolfram.com", 
              "Creation Time" -> 
              DateObject[{2022, 12, 6, 13, 37, 47.}, "Instant"]|>|>],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSizeRaw->{120., 68.},
        PlotRange->{{0, 120.}, {0, 68.}}]}], ",", 
      RowBox[{"\<\"dispLeft\"\>", "\[Rule]", 
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1: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
bQ7uaA==
          "], {{0, 68.}, {120., 0}}, {0., 1.},
          ColorFunction->GrayLevel],
         BoxForm`ImageTag[
         "Real32", ColorSpace -> Automatic, Interleaving -> None],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSizeRaw->{120., 68.},
        PlotRange->{{0, 120.}, {0, 68.}}]}]}], "\[RightAssociation]"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\<\"GPU\"\>"}]}], "]"}]}]], "Output",
 CellChangeTimes->{3.8796967520365953`*^9, 3.880400275393476*^9, 
  3.8804091591586447`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"736a0936-c20a-4d96-b080-732171de9123"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"EPE", "=", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"MeanAbsoluteLossLayer", "[", "]"}], "[", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Input\>\"", "->", 
          RowBox[{"ImageData", "[", "#1", "]"}]}], ",", 
         RowBox[{"\"\<Target\>\"", "->", 
          RowBox[{"ImageData", "[", 
           RowBox[{"#2", "[", "\"\<dispLeft\>\"", "]"}], "]"}]}]}], "|>"}], 
       "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"predictions", ",", "dataTest"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8793432148889017`*^9, 3.879343333606933*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"4547eb21-bf03-4ae1-b845-ca9faf416ea8"],

Cell[BoxData[
 TemplateBox[{
  "ImageData", "imginv", 
   "\"Expecting an image or graphics instead of \
\\!\\(\\*RowBox[{\\\"$Failed\\\", \\\"[\\\", RowBox[{RowBox[{\\\"\
\[LeftAssociation]\\\", RowBox[{RowBox[{\\\"\\\\\\\"dims\\\\\\\"\\\", \\\"\
\[Rule]\\\", RowBox[{\\\"{\\\", RowBox[{\\\"120\\\", \\\",\\\", \\\"68\\\"}], \
\\\"}\\\"}]}], \\\",\\\", RowBox[{\\\"\\\\\\\"leftName\\\\\\\"\\\", \\\"\
\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/left/\
043.png\\\\\\\"\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"rightName\\\\\\\"\\\", \
\\\"\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/\
right/043.png\\\\\\\"\\\"}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"dispName\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/disp/\
043.png\\\\\\\"\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"iLeft\\\\\\\"\\\", \\\"\
\[Rule]\\\", GraphicsBox[TagBox[RasterBox[NumericArray[List[List[List[80, 90, \
97, 255], List[85, 95, 98, 255], List[88, 97, 99, 255], List[91, 100, 99, \
255], List[86, 95, 98, 255], List[84, 94, 98, 255], List[89, 99, 99, 255], \
List[89, 101, 99, 255], List[87, 96, 99, 255], List[91, 101, 100, 255], \
List[103, 114, 101, 255], List[101, 112, 101, 255], List[97, 108, 100, 255], \
List[93, 105, 100, 255], List[99, 109, 102, 255], List[96, 107, 100, 255], \
List[92, 102, 100, 255], List[89, 100, 100, 255], List[89, 99, 99, 255], \
List[90, 100, 100, 255], List[89, 100, 100, 255], List[91, 101, 101, 255], \
List[90, 101, 100, 255], List[96, 106, 102, 255], List[98, 109, 102, 255], \
List[97, 106, 101, 255], List[100, 109, 102, 255], List[90, 100, 100, 255], \
List[96, 106, 101, 255], List[97, 107, 102, 255], List[92, 102, 101, 255], \
List[91, 101, 101, 255], List[96, 104, 102, 255], List[101, 109, 103, 255], \
List[98, 108, 102, 255], List[98, 109, 102, 255], List[103, 114, 103, 255], \
List[100, 112, 102, 255], List[90, 102, 100, 255], List[90, 102, 102, 255], \
List[93, 105, 102, 255], List[97, 108, 101, 255], List[98, 109, 102, 255], \
List[91, 103, 102, 255], List[93, 103, 103, 255], List[92, 103, 102, 255], \
List[91, 100, 102, 255], List[99, 108, 104, 255], List[103, 110, 104, 255], \
List[105, 112, 105, 255], List[120, 127, 107, 255], List[128, 133, 108, 255], \
List[117, 123, 106, 255], List[107, 116, 104, 255], List[100, 110, 103, 255], \
List[87, 98, 101, 255], List[86, 97, 101, 255], List[91, 103, 102, 255], \
List[96, 107, 102, 255], List[94, 106, 101, 255], List[99, 111, 102, 255], \
List[93, 106, 102, 255], List[87, 99, 101, 255], List[86, 97, 101, 255], \
List[84, 97, 101, 255], List[83, 96, 101, 255], List[83, 95, 101, 255], \
List[84, 94, 100, 255], List[81, 91, 100, 255], List[83, 95, 101, 255], \
List[85, 98, 100, 255], List[89, 104, 100, 255], List[88, 104, 100, 255], \
List[85, 100, 98, 255], List[87, 100, 98, 255]], List[List[81, 90, 97, 255], \
List[85, 95, 99, 255], List[85, 96, 98, 255], List[88, 98, 98, 255], List[96, \
104, 100, 255], List[100, 107, 101, 255], List[99, 105, 101, 255], List[88, \
96, 99, 255], List[92, 100, 100, 255], List[94, 103, 100, 255], List[94, 107, \
100, 255], List[100, 111, 101, 255], List[105, 115, 102, 255], List[95, 107, \
100, 255], List[97, 108, 101, 255], List[97, 109, 100, 255], List[96, 108, \
100, 255], List[99, 109, 101, 255], List[100, 110, 101, 255], List[97, 106, \
100, 255], List[91, 101, 101, 255], List[89, 98, 101, 255], List[85, 96, 99, \
255], List[101, 111, 102, 255], List[106, 115, 102, 255], List[103, 111, 102, \
255], List[104, 111, 102, 255], List[94, 103, 102, 255], List[87, 98, 100, \
255], List[93, 105, 102, 255], List[92, 103, 101, 255], List[94, 103, 102, \
255], List[102, 109, 104, 255], List[93, 104, 102, 255], List[100, 111, 103, \
255], List[104, 117, 103, 255], List[104, 119, 103, 255], List[105, 116, 104, \
255], List[94, 105, 101, 255], List[89, 103, 102, 255], List[94, 106, 102, \
255], List[92, 105, 102, 255], List[96, 109, 103, 255], List[98, 109, 103, \
255], List[93, 103, 103, 255], List[89, 99, 102, 255], List[90, 98, 102, \
255], List[89, 98, 101, 255], List[99, 108, 104, 255], List[100, 110, 103, \
255], List[114, 120, 106, 255], List[119, 124, 107, 255], List[109, 118, 105, \
255], List[109, 117, 105, 255], List[106, 116, 104, 255], List[102, 113, 104, \
255], List[93, 105, 102, 255], List[87, 100, 101, 255], List[92, 103, 101, \
255], List[96, 109, 103, 255], List[93, 105, 103, 255], List[86, 98, 102, \
255], List[85, 96, 102, 255], List[84, 96, 100, 255], List[80, 92, 99, 255], \
List[81, 94, 99, 255], List[82, 95, 99, 255], List[81, 93, 98, 255], List[82, \
95, 100, 255], List[87, 101, 101, 255], List[95, 108, 104, 255], List[97, \
114, 107, 255], List[94, 111, 111, 255], List[98, 107, 115, 255], List[95, \
112, 119, 255]], List[List[80, 90, 97, 255], List[80, 91, 98, 255], List[79, \
90, 98, 255], List[79, 89, 97, 255], List[87, 95, 99, 255], List[105, 113, \
102, 255], List[106, 114, 102, 255], List[105, 112, 103, 255], List[100, 111, \
102, 255], List[92, 105, 99, 255], List[87, 99, 99, 255], List[90, 102, 100, \
255], List[93, 104, 99, 255], List[102, 111, 101, 255], List[97, 107, 101, \
255], List[89, 100, 99, 255], List[91, 103, 99, 255], List[95, 105, 100, \
255], List[97, 106, 101, 255], List[100, 109, 101, 255], List[94, 104, 101, \
255], List[90, 100, 100, 255], List[91, 101, 101, 255], List[90, 101, 100, \
255], List[98, 107, 102, 255], List[100, 108, 102, 255], List[99, 107, 102, \
255], List[96, 106, 102, 255], List[92, 102, 101, 255], List[93, 103, 103, \
255], List[92, 101, 102, 255], List[97, 104, 103, 255], List[104, 111, 105, \
255], List[91, 103, 101, 255], List[82, 94, 100, 255], List[89, 102, 101, \
255], List[100, 114, 104, 255], List[92, 106, 101, 255], List[88, 100, 101, \
255], List[88, 99, 101, 255], List[90, 102, 101, 255], List[89, 103, 102, \
255], List[86, 100, 101, 255], List[96, 107, 103, 255], List[98, 110, 104, \
255], List[97, 107, 104, 255], List[93, 104, 103, 255], List[93, 103, 102, \
255], List[97, 106, 103, 255], List[101, 110, 104, 255], List[102, 110, 105, \
255], List[103, 111, 105, 255], List[110, 118, 106, 255], List[109, 118, 106, \
255], List[106, 116, 104, 255], List[103, 116, 104, 255], List[107, 118, 106, \
255], List[87, 98, 102, 255], List[84, 95, 101, 255], List[90, 100, 100, \
255], List[90, 100, 100, 255], List[91, 102, 100, 255], List[83, 96, 101, \
255], List[85, 98, 104, 255], List[94, 105, 107, 255], List[99, 108, 115, \
255], List[99, 115, 120, 255], List[105, 114, 122, 255], List[112, 123, 130, \
255], List[125, 129, 138, 255], List[137, 131, 135, 255], List[130, 130, 137, \
255], List[127, 129, 148, 255], List[132, 130, 150, 255], List[121, 136, 147, \
255]], List[List[81, 89, 96, 255], List[77, 88, 95, 255], List[80, 89, 97, \
255], List[81, 90, 98, 255], List[82, 91, 98, 255], List[87, 95, 99, 255], \
List[86, 97, 99, 255], List[92, 105, 101, 255], List[94, 105, 100, 255], \
List[90, 102, 100, 255], List[97, 109, 101, 255], List[99, 110, 101, 255], \
List[97, 107, 101, 255], List[94, 102, 100, 255], List[101, 109, 102, 255], \
List[96, 106, 101, 255], List[100, 108, 101, 255], List[95, 104, 100, 255], \
List[91, 102, 101, 255], List[94, 105, 100, 255], List[97, 107, 101, 255], \
List[102, 111, 102, 255], List[96, 106, 101, 255], List[91, 102, 100, 255], \
List[98, 107, 102, 255], List[93, 102, 101, 255], List[96, 105, 102, 255], \
List[87, 99, 100, 255], List[91, 102, 101, 255], List[88, 95, 97, 255], \
List[92, 101, 104, 255], List[99, 107, 105, 255], List[103, 110, 104, 255], \
List[99, 108, 104, 255], List[87, 98, 102, 255], List[82, 94, 101, 255], \
List[87, 98, 101, 255], List[90, 101, 102, 255], List[89, 100, 101, 255], \
List[88, 100, 102, 255], List[92, 105, 102, 255], List[92, 108, 102, 255], \
List[94, 106, 103, 255], List[89, 99, 102, 255], List[86, 96, 101, 255], \
List[89, 100, 103, 255], List[88, 99, 102, 255], List[94, 106, 104, 255], \
List[94, 105, 103, 255], List[112, 118, 105, 255], List[99, 109, 103, 255], \
List[96, 105, 103, 255], List[102, 111, 104, 255], List[99, 111, 105, 255], \
List[91, 103, 103, 255], List[95, 108, 103, 255], List[97, 111, 103, 255], \
List[97, 110, 102, 255], List[88, 100, 104, 255], List[89, 103, 110, 255], \
List[103, 114, 116, 255], List[116, 121, 131, 255], List[117, 124, 139, 255], \
List[123, 129, 139, 255], List[139, 132, 136, 255], List[141, 131, 147, 255], \
List[136, 131, 148, 255], List[132, 130, 146, 255], List[135, 129, 148, 255], \
List[139, 126, 148, 255], List[140, 121, 144, 255], List[138, 119, 144, 255], \
List[138, 128, 143, 255], List[133, 131, 142, 255], List[129, 129, 140, \
255]], List[List[96, 100, 109, 255], List[100, 109, 122, 255], List[83, 90, \
97, 255], List[81, 90, 98, 255], List[86, 95, 101, 255], List[92, 100, 99, \
255], List[92, 103, 100, 255], List[89, 100, 100, 255], List[84, 95, 99, \
255], List[87, 98, 99, 255], List[88, 99, 99, 255], List[85, 96, 99, 255], \
List[87, 98, 100, 255], List[90, 100, 101, 255], List[90, 101, 100, 255], \
List[99, 110, 101, 255], List[101, 111, 102, 255], List[100, 110, 102, 255], \
List[94, 105, 100, 255], List[93, 104, 101, 255], List[86, 97, 100, 255], \
List[92, 101, 101, 255], List[95, 104, 101, 255], List[99, 108, 102, 255], \
List[107, 114, 103, 255], List[109, 116, 104, 255], List[108, 118, 104, 255], \
List[94, 106, 101, 255], List[95, 104, 102, 255], List[126, 127, 123, 255], \
List[85, 88, 86, 255], List[81, 90, 90, 255], List[99, 109, 105, 255], \
List[101, 112, 103, 255], List[98, 108, 103, 255], List[86, 98, 101, 255], \
List[86, 96, 101, 255], List[84, 95, 101, 255], List[89, 100, 102, 255], \
List[94, 106, 103, 255], List[100, 112, 104, 255], List[102, 114, 105, 255], \
List[101, 113, 104, 255], List[104, 113, 106, 255], List[95, 104, 104, 255], \
List[88, 99, 103, 255], List[85, 96, 101, 255], List[89, 100, 103, 255], \
List[90, 103, 102, 255], List[90, 103, 102, 255], List[106, 113, 106, 255], \
List[101, 107, 104, 255], List[97, 106, 105, 255], List[99, 110, 106, 255], \
List[88, 100, 102, 255], List[95, 106, 104, 255], List[104, 118, 109, 255], \
List[114, 125, 126, 255], List[121, 126, 142, 255], List[116, 134, 143, 255], \
List[121, 129, 136, 255], List[129, 131, 147, 255], List[136, 130, 148, 255], \
List[137, 123, 145, 255], List[139, 116, 144, 255], List[137, 122, 145, 255], \
List[129, 121, 146, 255], List[136, 126, 146, 255], List[132, 123, 147, 255], \
List[131, 121, 145, 255], List[137, 118, 146, 255], List[138, 116, 145, 255], \
List[139, 127, 142, 255], List[133, 131, 143, 255], List[127, 130, 141, \
255]], List[List[80, 87, 101, 255], List[92, 111, 142, 255], List[100, 114, \
136, 255], List[83, 91, 100, 255], List[84, 91, 93, 255], List[92, 104, 105, \
255], List[91, 104, 101, 255], List[93, 107, 101, 255], List[90, 102, 100, \
255], List[87, 96, 99, 255], List[84, 92, 99, 255], List[86, 95, 101, 255], \
List[85, 95, 100, 255], List[85, 97, 99, 255], List[87, 97, 99, 255], \
List[86, 95, 99, 255], List[88, 99, 99, 255], List[94, 106, 101, 255], \
List[91, 102, 101, 255], List[89, 100, 100, 255], List[90, 100, 101, 255], \
List[87, 97, 100, 255], List[88, 97, 101, 255], List[88, 98, 100, 255], \
List[89, 100, 101, 255], List[100, 109, 102, 255], List[104, 114, 103, 255], \
List[102, 111, 102, 255], List[127, 128, 120, 255], List[181, 175, 162, 255], \
List[72, 67, 62, 255], List[74, 82, 83, 255], List[94, 106, 105, 255], \
List[92, 105, 101, 255], List[98, 108, 103, 255], List[91, 103, 102, 255], \
List[81, 94, 99, 255], List[82, 95, 101, 255], List[81, 93, 100, 255], \
List[82, 94, 99, 255], List[82, 94, 100, 255], List[87, 99, 101, 255], \
List[87, 100, 101, 255], List[87, 99, 100, 255], List[95, 107, 102, 255], \
List[86, 100, 101, 255], List[81, 96, 100, 255], List[81, 94, 99, 255], \
List[89, 101, 103, 255], List[93, 103, 103, 255], List[98, 105, 105, 255], \
List[98, 105, 104, 255], List[95, 106, 103, 255], List[93, 105, 102, 255], \
List[98, 108, 103, 255], List[88, 101, 101, 255], List[123, 120, 129, 255], \
List[137, 129, 146, 255], List[131, 130, 144, 255], List[130, 131, 140, 255], \
List[124, 127, 142, 255], List[128, 128, 142, 255], List[139, 132, 141, 255], \
List[140, 121, 143, 255], List[137, 116, 144, 255], List[138, 122, 145, 255], \
List[134, 123, 146, 255], List[131, 126, 144, 255], List[131, 126, 144, 255], \
List[136, 125, 145, 255], List[140, 124, 138, 255], List[132, 124, 136, 255], \
List[126, 127, 143, 255], List[129, 126, 145, 255], List[115, 131, 144, \
255]], List[List[69, 71, 85, 255], List[54, 73, 107, 255], List[72, 89, 118, \
255], List[73, 70, 71, 255], List[66, 56, 51, 255], List[77, 76, 74, 255], \
List[88, 98, 96, 255], List[87, 100, 100, 255], List[86, 100, 100, 255], \
List[93, 105, 101, 255], List[88, 99, 100, 255], List[87, 99, 100, 255], \
List[90, 102, 100, 255], List[93, 105, 101, 255], List[91, 102, 100, 255], \
List[88, 100, 100, 255], List[87, 97, 100, 255], List[85, 96, 100, 255], \
List[89, 100, 100, 255], List[89, 100, 101, 255], List[91, 102, 102, 255], \
List[92, 103, 102, 255], List[97, 106, 103, 255], List[96, 105, 102, 255], \
List[90, 100, 101, 255], List[87, 97, 100, 255], List[118, 118, 109, 255], \
List[123, 122, 109, 255], List[87, 86, 83, 255], List[130, 126, 118, 255], \
List[76, 73, 68, 255], List[88, 91, 89, 255], List[87, 97, 102, 255], \
List[88, 98, 100, 255], List[89, 98, 101, 255], List[106, 111, 108, 255], \
List[121, 122, 113, 255], List[104, 107, 105, 255], List[101, 105, 105, 255], \
List[103, 107, 106, 255], List[118, 115, 111, 255], List[122, 120, 113, 255], \
List[136, 133, 116, 255], List[132, 130, 114, 255], List[129, 128, 114, 255], \
List[124, 122, 112, 255], List[150, 143, 123, 255], List[168, 153, 129, 255], \
List[175, 159, 132, 255], List[119, 130, 112, 255], List[135, 143, 118, 255], \
List[169, 150, 128, 255], List[169, 149, 128, 255], List[164, 149, 125, 255], \
List[170, 153, 126, 255], List[172, 155, 127, 255], List[140, 123, 140, 255], \
List[138, 121, 143, 255], List[133, 130, 140, 255], List[127, 129, 139, 255], \
List[122, 126, 137, 255], List[127, 128, 142, 255], List[132, 127, 145, 255], \
List[127, 125, 141, 255], List[135, 126, 133, 255], List[136, 128, 140, 255], \
List[125, 130, 141, 255], List[118, 124, 133, 255], List[116, 127, 135, 255], \
List[120, 130, 139, 255], List[128, 134, 136, 255], List[126, 137, 135, 255], \
List[113, 130, 143, 255], List[118, 126, 145, 255], List[115, 128, 145, \
255]], List[List[50, 61, 85, 255], List[52, 67, 96, 255], List[61, 68, 88, \
255], List[64, 59, 56, 255], List[57, 50, 46, 255], List[49, 39, 36, 255], \
List[70, 72, 69, 255], List[93, 104, 104, 255], List[82, 91, 97, 255], \
List[88, 98, 100, 255], List[90, 101, 99, 255], List[92, 104, 99, 255], \
List[85, 96, 99, 255], List[84, 96, 99, 255], List[85, 96, 99, 255], List[86, \
98, 99, 255], List[88, 101, 101, 255], List[88, 99, 101, 255], List[89, 99, \
101, 255], List[86, 97, 100, 255], List[87, 97, 100, 255], List[87, 97, 100, \
255], List[87, 98, 101, 255], List[98, 104, 103, 255], List[117, 118, 109, \
255], List[139, 133, 114, 255], List[184, 159, 128, 255], List[187, 163, 132, \
255], List[56, 54, 50, 255], List[122, 119, 111, 255], List[88, 86, 80, 255], \
List[84, 80, 73, 255], List[184, 161, 133, 255], List[191, 168, 136, 255], \
List[193, 169, 135, 255], List[203, 177, 140, 255], List[228, 193, 149, 255], \
List[217, 182, 143, 255], List[222, 187, 145, 255], List[226, 190, 147, 255], \
List[229, 191, 148, 255], List[232, 196, 150, 255], List[231, 195, 150, 255], \
List[234, 195, 150, 255], List[229, 194, 149, 255], List[228, 192, 148, 255], \
List[231, 193, 150, 255], List[204, 179, 139, 255], List[122, 141, 108, 255], \
List[107, 137, 103, 255], List[102, 134, 102, 255], List[149, 154, 119, 255], \
List[214, 182, 144, 255], List[206, 177, 140, 255], List[203, 175, 138, 255], \
List[206, 176, 140, 255], List[154, 135, 142, 255], List[127, 119, 140, 255], \
List[127, 128, 145, 255], List[112, 131, 140, 255], List[116, 125, 131, 255], \
List[122, 126, 143, 255], List[117, 127, 145, 255], List[116, 132, 141, 255], \
List[127, 139, 135, 255], List[119, 131, 137, 255], List[111, 129, 134, 255], \
List[112, 120, 129, 255], List[112, 122, 130, 255], List[112, 129, 133, 255], \
List[123, 132, 136, 255], List[125, 138, 134, 255], List[115, 141, 138, 255], \
List[110, 130, 140, 255], List[114, 123, 141, 255]], List[List[42, 53, 78, \
255], List[49, 61, 86, 255], List[48, 59, 82, 255], List[59, 57, 60, 255], \
List[56, 50, 46, 255], List[50, 43, 40, 255], List[80, 85, 76, 255], \
List[103, 114, 104, 255], List[89, 101, 98, 255], List[85, 98, 100, 255], \
List[89, 103, 102, 255], List[92, 106, 104, 255], List[90, 106, 104, 255], \
List[87, 101, 101, 255], List[90, 101, 100, 255], List[89, 99, 100, 255], \
List[89, 99, 100, 255], List[89, 100, 101, 255], List[90, 101, 101, 255], \
List[89, 100, 101, 255], List[91, 100, 101, 255], List[87, 97, 100, 255], \
List[85, 95, 100, 255], List[90, 99, 101, 255], List[104, 111, 104, 255], \
List[135, 129, 113, 255], List[155, 134, 116, 255], List[166, 146, 126, 255], \
List[92, 82, 73, 255], List[71, 70, 68, 255], List[111, 107, 101, 255], \
List[49, 48, 47, 255], List[154, 132, 106, 255], List[232, 194, 151, 255], \
List[217, 185, 141, 255], List[208, 179, 139, 255], List[192, 167, 136, 255], \
List[186, 163, 134, 255], List[168, 151, 128, 255], List[158, 145, 124, 255], \
List[150, 141, 122, 255], List[135, 131, 118, 255], List[134, 130, 117, 255], \
List[130, 126, 115, 255], List[116, 116, 111, 255], List[109, 111, 109, 255], \
List[107, 111, 108, 255], List[94, 115, 92, 255], List[85, 113, 86, 255], \
List[97, 121, 94, 255], List[97, 123, 95, 255], List[94, 123, 94, 255], \
List[94, 107, 102, 255], List[96, 104, 104, 255], List[93, 102, 104, 255], \
List[87, 98, 101, 255], List[118, 122, 124, 255], List[120, 132, 141, 255], \
List[116, 124, 144, 255], List[113, 131, 142, 255], List[114, 128, 137, 255], \
List[117, 124, 142, 255], List[109, 132, 141, 255], List[118, 141, 136, 255], \
List[128, 135, 134, 255], List[125, 132, 133, 255], List[118, 128, 127, 255], \
List[120, 120, 135, 255], List[121, 121, 134, 255], List[122, 131, 127, 255], \
List[132, 135, 132, 255], List[138, 135, 136, 255], List[129, 144, 133, 255], \
List[115, 135, 134, 255], List[111, 121, 132, 255]], List[List[40, 50, 70, \
255], List[38, 48, 74, 255], List[32, 45, 69, 255], List[53, 52, 57, 255], \
List[65, 55, 44, 255], List[58, 49, 41, 255], List[103, 104, 93, 255], \
List[122, 126, 111, 255], List[121, 123, 107, 255], List[101, 108, 99, 255], \
List[98, 100, 92, 255], List[99, 90, 85, 255], List[93, 85, 80, 255], \
List[91, 99, 96, 255], List[89, 106, 104, 255], List[89, 104, 102, 255], \
List[91, 104, 100, 255], List[88, 101, 100, 255], List[83, 96, 99, 255], \
List[85, 96, 99, 255], List[85, 96, 100, 255], List[84, 94, 100, 255], \
List[85, 96, 100, 255], List[91, 102, 101, 255], List[102, 111, 102, 255], \
List[112, 117, 104, 255], List[131, 127, 108, 255], List[132, 125, 108, 255], \
List[124, 117, 106, 255], List[111, 102, 89, 255], List[112, 103, 88, 255], \
List[115, 108, 97, 255], List[123, 118, 106, 255], List[121, 121, 112, 255], \
List[107, 110, 106, 255], List[106, 108, 106, 255], List[94, 99, 103, 255], \
List[102, 105, 106, 255], List[104, 106, 107, 255], List[75, 87, 98, 255], \
List[78, 91, 99, 255], List[79, 92, 99, 255], List[79, 93, 98, 255], List[81, \
95, 100, 255], List[79, 91, 99, 255], List[81, 92, 102, 255], List[79, 95, \
94, 255], List[82, 107, 80, 255], List[83, 105, 81, 255], List[85, 109, 84, \
255], List[89, 113, 87, 255], List[90, 115, 86, 255], List[87, 106, 94, 255], \
List[92, 102, 105, 255], List[92, 102, 104, 255], List[88, 98, 102, 255], \
List[115, 125, 125, 255], List[117, 140, 138, 255], List[109, 126, 139, 255], \
List[110, 122, 136, 255], List[107, 127, 134, 255], List[110, 124, 134, 255], \
List[114, 138, 134, 255], List[133, 142, 134, 255], List[141, 135, 138, 255], \
List[130, 139, 133, 255], List[127, 131, 133, 255], List[130, 126, 136, 255], \
List[130, 126, 136, 255], List[127, 133, 136, 255], List[130, 141, 139, 255], \
List[144, 141, 141, 255], List[140, 138, 140, 255], List[137, 138, 138, 255], \
List[127, 128, 134, 255]], List[List[55, 57, 55, 255], List[46, 51, 58, 255], \
List[52, 58, 68, 255], List[65, 65, 63, 255], List[54, 52, 41, 255], List[58, \
51, 43, 255], List[101, 84, 74, 255], List[117, 88, 72, 255], List[99, 84, \
69, 255], List[115, 68, 56, 255], List[113, 64, 50, 255], List[118, 68, 52, \
255], List[101, 59, 45, 255], List[108, 77, 60, 255], List[115, 91, 78, 255], \
List[104, 101, 95, 255], List[104, 112, 107, 255], List[106, 112, 105, 255], \
List[102, 107, 104, 255], List[104, 108, 105, 255], List[100, 105, 104, 255], \
List[97, 101, 102, 255], List[99, 106, 103, 255], List[100, 109, 103, 255], \
List[104, 111, 104, 255], List[110, 116, 104, 255], List[115, 119, 106, 255], \
List[124, 124, 108, 255], List[117, 118, 106, 255], List[140, 134, 116, 255], \
List[122, 121, 111, 255], List[89, 99, 105, 255], List[87, 98, 103, 255], \
List[87, 97, 101, 255], List[90, 99, 102, 255], List[114, 114, 109, 255], \
List[114, 113, 109, 255], List[105, 106, 106, 255], List[121, 117, 110, 255], \
List[103, 107, 106, 255], List[88, 97, 102, 255], List[97, 104, 106, 255], \
List[112, 115, 114, 255], List[90, 99, 103, 255], List[87, 97, 103, 255], \
List[90, 97, 106, 255], List[93, 110, 98, 255], List[89, 114, 85, 255], \
List[76, 97, 75, 255], List[77, 98, 75, 255], List[81, 102, 79, 255], \
List[80, 103, 78, 255], List[84, 103, 85, 255], List[95, 103, 105, 255], \
List[94, 102, 104, 255], List[113, 111, 108, 255], List[139, 135, 130, 255], \
List[128, 140, 134, 255], List[114, 129, 131, 255], List[113, 119, 130, 255], \
List[113, 123, 131, 255], List[122, 126, 132, 255], List[136, 137, 138, 255], \
List[141, 139, 141, 255], List[141, 143, 140, 255], List[127, 137, 142, 255], \
List[123, 130, 141, 255], List[122, 126, 139, 255], List[120, 126, 140, 255], \
List[120, 128, 142, 255], List[125, 130, 142, 255], List[137, 139, 139, 255], \
List[138, 138, 141, 255], List[132, 140, 141, 255], List[127, 139, 138, \
255]], List[List[68, 62, 51, 255], List[68, 64, 52, 255], List[95, 89, 74, \
255], List[82, 78, 71, 255], List[73, 72, 71, 255], List[86, 74, 72, 255], \
List[111, 65, 51, 255], List[96, 65, 54, 255], List[68, 52, 50, 255], \
List[99, 65, 58, 255], List[106, 66, 54, 255], List[108, 66, 54, 255], \
List[107, 67, 56, 255], List[87, 65, 55, 255], List[94, 58, 50, 255], \
List[119, 67, 52, 255], List[120, 86, 72, 255], List[132, 122, 110, 255], \
List[144, 133, 118, 255], List[137, 130, 115, 255], List[107, 110, 105, 255], \
List[99, 105, 103, 255], List[103, 109, 104, 255], List[105, 110, 104, 255], \
List[111, 112, 105, 255], List[117, 116, 106, 255], List[125, 122, 109, 255], \
List[135, 128, 112, 255], List[127, 123, 110, 255], List[138, 131, 113, 255], \
List[136, 128, 114, 255], List[107, 108, 105, 255], List[104, 108, 104, 255], \
List[104, 107, 104, 255], List[100, 105, 104, 255], List[103, 106, 106, 255], \
List[94, 100, 102, 255], List[101, 105, 106, 255], List[102, 107, 107, 255], \
List[97, 105, 106, 255], List[98, 106, 106, 255], List[120, 118, 112, 255], \
List[178, 172, 158, 255], List[117, 122, 116, 255], List[90, 99, 101, 255], \
List[90, 101, 97, 255], List[88, 113, 86, 255], List[81, 102, 79, 255], \
List[69, 89, 69, 255], List[70, 89, 68, 255], List[71, 91, 70, 255], List[70, \
90, 68, 255], List[76, 94, 75, 255], List[109, 111, 106, 255], List[113, 113, \
108, 255], List[114, 114, 107, 255], List[130, 133, 129, 255], List[141, 139, \
141, 255], List[133, 133, 136, 255], List[124, 128, 133, 255], List[119, 123, \
133, 255], List[128, 133, 136, 255], List[134, 141, 142, 255], List[136, 138, \
141, 255], List[135, 134, 139, 255], List[121, 126, 140, 255], List[112, 126, \
140, 255], List[108, 129, 140, 255], List[107, 128, 140, 255], List[109, 126, \
138, 255], List[114, 124, 138, 255], List[129, 126, 140, 255], List[129, 134, \
140, 255], List[127, 140, 139, 255], List[124, 143, 138, 255]], List[List[79, \
66, 53, 255], List[86, 81, 54, 255], List[100, 99, 60, 255], List[94, 90, 62, \
255], List[98, 87, 74, 255], List[83, 70, 65, 255], List[112, 69, 56, 255], \
List[107, 73, 62, 255], List[116, 70, 59, 255], List[105, 71, 61, 255], \
List[112, 73, 59, 255], List[108, 70, 56, 255], List[118, 77, 63, 255], \
List[110, 71, 59, 255], List[107, 71, 60, 255], List[112, 70, 56, 255], \
List[93, 59, 50, 255], List[94, 94, 89, 255], List[111, 113, 108, 255], \
List[107, 109, 104, 255], List[97, 103, 102, 255], List[91, 101, 101, 255], \
List[93, 103, 102, 255], List[98, 107, 102, 255], List[108, 112, 104, 255], \
List[123, 121, 107, 255], List[135, 129, 110, 255], List[134, 126, 110, 255], \
List[138, 129, 111, 255], List[159, 145, 118, 255], List[172, 152, 123, 255], \
List[153, 138, 117, 255], List[149, 137, 117, 255], List[143, 133, 114, 255], \
List[139, 130, 112, 255], List[138, 128, 113, 255], List[147, 141, 132, 255], \
List[122, 118, 108, 255], List[109, 105, 95, 255], List[102, 100, 91, 255], \
List[98, 95, 87, 255], List[98, 96, 91, 255], List[113, 110, 102, 255], \
List[113, 112, 106, 255], List[89, 76, 65, 255], List[85, 76, 61, 255], \
List[45, 60, 51, 255], List[43, 56, 44, 255], List[61, 77, 59, 255], List[62, \
80, 62, 255], List[61, 79, 61, 255], List[59, 77, 59, 255], List[69, 84, 67, \
255], List[122, 119, 109, 255], List[128, 124, 113, 255], List[129, 124, 111, \
255], List[128, 129, 131, 255], List[134, 137, 140, 255], List[125, 140, 137, \
255], List[122, 136, 134, 255], List[123, 124, 132, 255], List[123, 137, 137, \
255], List[127, 141, 139, 255], List[127, 134, 140, 255], List[123, 123, 140, \
255], List[107, 120, 136, 255], List[106, 124, 135, 255], List[106, 131, 138, \
255], List[106, 131, 137, 255], List[107, 125, 134, 255], List[103, 116, 135, \
255], List[109, 118, 135, 255], List[119, 129, 136, 255], List[125, 137, 141, \
255], List[129, 140, 139, 255]], List[List[87, 78, 56, 255], List[87, 78, 55, \
255], List[92, 86, 56, 255], List[98, 89, 60, 255], List[93, 70, 50, 255], \
List[70, 64, 58, 255], List[114, 72, 58, 255], List[89, 65, 54, 255], \
List[67, 56, 52, 255], List[100, 64, 56, 255], List[105, 63, 51, 255], \
List[109, 66, 52, 255], List[95, 58, 49, 255], List[99, 67, 55, 255], \
List[88, 63, 56, 255], List[111, 72, 58, 255], List[109, 69, 58, 255], \
List[101, 92, 88, 255], List[99, 111, 106, 255], List[99, 105, 102, 255], \
List[96, 103, 102, 255], List[92, 101, 101, 255], List[94, 103, 102, 255], \
List[98, 106, 103, 255], List[108, 112, 104, 255], List[126, 122, 109, 255], \
List[142, 132, 113, 255], List[142, 130, 113, 255], List[155, 140, 117, 255], \
List[163, 145, 120, 255], List[170, 148, 123, 255], List[166, 146, 122, 255], \
List[168, 150, 123, 255], List[167, 146, 125, 255], List[162, 142, 125, 255], \
List[166, 147, 124, 255], List[143, 137, 122, 255], List[135, 124, 107, 255], \
List[115, 121, 131, 255], List[130, 150, 181, 255], List[126, 129, 132, 255], \
List[105, 99, 89, 255], List[117, 114, 107, 255], List[159, 154, 144, 255], \
List[119, 105, 90, 255], List[114, 99, 82, 255], List[114, 111, 101, 255], \
List[27, 37, 29, 255], List[51, 64, 50, 255], List[55, 71, 55, 255], List[52, \
67, 53, 255], List[47, 63, 48, 255], List[66, 75, 62, 255], List[140, 128, \
116, 255], List[144, 131, 116, 255], List[145, 133, 114, 255], List[123, 123, \
129, 255], List[123, 130, 138, 255], List[127, 139, 136, 255], List[126, 140, \
137, 255], List[131, 135, 136, 255], List[130, 138, 138, 255], List[124, 138, \
141, 255], List[116, 131, 137, 255], List[101, 121, 132, 255], List[100, 120, \
133, 255], List[106, 129, 133, 255], List[106, 134, 138, 255], List[106, 134, \
139, 255], List[107, 133, 133, 255], List[103, 129, 132, 255], List[91, 127, \
133, 255], List[106, 131, 132, 255], List[113, 140, 134, 255], List[120, 144, \
136, 255]], List[List[89, 82, 54, 255], List[78, 64, 50, 255], List[66, 60, \
46, 255], List[79, 66, 49, 255], List[69, 62, 42, 255], List[83, 86, 76, \
255], List[91, 66, 54, 255], List[106, 70, 53, 255], List[92, 70, 57, 255], \
List[115, 62, 51, 255], List[115, 68, 54, 255], List[117, 69, 55, 255], \
List[109, 65, 53, 255], List[95, 68, 53, 255], List[94, 66, 56, 255], \
List[112, 64, 52, 255], List[102, 62, 51, 255], List[90, 87, 82, 255], \
List[96, 109, 103, 255], List[93, 103, 99, 255], List[94, 105, 100, 255], \
List[93, 104, 101, 255], List[96, 106, 101, 255], List[101, 107, 102, 255], \
List[109, 112, 103, 255], List[123, 120, 107, 255], List[139, 132, 112, 255], \
List[137, 129, 111, 255], List[154, 141, 117, 255], List[153, 137, 117, 255], \
List[153, 139, 119, 255], List[141, 130, 111, 255], List[141, 130, 112, 255], \
List[157, 145, 109, 255], List[154, 149, 88, 255], List[140, 143, 66, 255], \
List[127, 118, 83, 255], List[109, 95, 92, 255], List[111, 114, 120, 255], \
List[160, 168, 192, 255], List[130, 131, 151, 255], List[94, 89, 90, 255], \
List[109, 106, 98, 255], List[136, 133, 123, 255], List[160, 147, 128, 255], \
List[150, 137, 118, 255], List[161, 145, 125, 255], List[71, 74, 62, 255], \
List[29, 44, 34, 255], List[48, 60, 48, 255], List[46, 55, 45, 255], List[32, \
46, 35, 255], List[78, 89, 73, 255], List[158, 152, 128, 255], List[147, 145, \
117, 255], List[154, 145, 117, 255], List[111, 126, 128, 255], List[104, 129, \
138, 255], List[121, 141, 141, 255], List[123, 144, 141, 255], List[124, 142, \
139, 255], List[124, 141, 136, 255], List[116, 135, 132, 255], List[114, 126, \
129, 255], List[99, 123, 128, 255], List[107, 126, 124, 255], List[121, 124, \
122, 255], List[119, 115, 129, 255], List[120, 111, 130, 255], List[126, 114, \
118, 255], List[121, 114, 112, 255], List[116, 102, 114, 255], List[128, 95, \
117, 255], List[141, 95, 121, 255], List[142, 95, 123, 255]], List[List[83, \
75, 54, 255], List[84, 75, 54, 255], List[73, 66, 50, 255], List[77, 67, 47, \
255], List[63, 62, 44, 255], List[88, 89, 84, 255], List[103, 68, 55, 255], \
List[111, 70, 56, 255], List[89, 64, 53, 255], List[94, 66, 57, 255], \
List[101, 64, 55, 255], List[100, 65, 56, 255], List[98, 64, 54, 255], \
List[112, 71, 56, 255], List[103, 68, 55, 255], List[111, 68, 56, 255], \
List[117, 65, 51, 255], List[97, 86, 82, 255], List[96, 106, 113, 255], \
List[101, 102, 108, 255], List[99, 105, 108, 255], List[99, 103, 105, 255], \
List[99, 104, 106, 255], List[98, 103, 108, 255], List[104, 107, 108, 255], \
List[113, 115, 109, 255], List[128, 123, 113, 255], List[121, 117, 110, 255], \
List[137, 128, 115, 255], List[128, 121, 110, 255], List[128, 121, 108, 255], \
List[115, 112, 102, 255], List[101, 98, 91, 255], List[101, 104, 44, 255], \
List[86, 107, 22, 255], List[77, 84, 53, 255], List[59, 40, 53, 255], \
List[38, 19, 29, 255], List[56, 37, 45, 255], List[80, 70, 58, 255], List[73, \
61, 54, 255], List[64, 59, 59, 255], List[94, 91, 84, 255], List[123, 115, \
103, 255], List[138, 129, 114, 255], List[135, 126, 113, 255], List[146, 136, \
117, 255], List[136, 128, 111, 255], List[55, 60, 51, 255], List[20, 34, 26, \
255], List[16, 36, 26, 255], List[21, 32, 25, 255], List[125, 87, 84, 255], \
List[154, 106, 101, 255], List[145, 95, 109, 255], List[138, 98, 109, 255], \
List[125, 94, 102, 255], List[135, 92, 90, 255], List[139, 92, 89, 255], \
List[160, 70, 101, 255], List[174, 60, 104, 255], List[176, 57, 101, 255], \
List[171, 52, 97, 255], List[160, 43, 93, 255], List[153, 40, 90, 255], \
List[136, 38, 86, 255], List[139, 36, 88, 255], List[147, 34, 84, 255], \
List[147, 46, 89, 255], List[145, 56, 99, 255], List[145, 41, 95, 255], \
List[155, 25, 84, 255], List[171, 21, 82, 255], List[178, 20, 90, 255], \
List[184, 26, 96, 255]], List[List[72, 67, 50, 255], List[89, 86, 52, 255], \
List[94, 94, 58, 255], List[95, 75, 53, 255], List[73, 61, 50, 255], List[93, \
99, 93, 255], List[109, 70, 59, 255], List[98, 57, 49, 255], List[101, 59, \
50, 255], List[114, 73, 58, 255], List[101, 65, 57, 255], List[103, 67, 58, \
255], List[112, 69, 55, 255], List[107, 63, 52, 255], List[98, 61, 52, 255], \
List[97, 65, 58, 255], List[95, 61, 48, 255], List[94, 78, 103, 255], \
List[101, 93, 177, 255], List[125, 89, 167, 255], List[130, 80, 153, 255], \
List[133, 57, 124, 255], List[104, 57, 146, 255], List[92, 60, 163, 255], \
List[95, 81, 153, 255], List[114, 82, 150, 255], List[104, 87, 146, 255], \
List[95, 74, 152, 255], List[113, 59, 146, 255], List[111, 60, 139, 255], \
List[114, 61, 134, 255], List[126, 56, 134, 255], List[110, 73, 158, 255], \
List[77, 72, 65, 255], List[62, 67, 36, 255], List[48, 49, 39, 255], List[45, \
21, 37, 255], List[55, 34, 47, 255], List[36, 16, 32, 255], List[30, 29, 20, \
255], List[55, 48, 33, 255], List[71, 67, 60, 255], List[112, 111, 99, 255], \
List[126, 126, 108, 255], List[119, 120, 105, 255], List[119, 121, 109, 255], \
List[122, 120, 109, 255], List[129, 124, 113, 255], List[130, 132, 114, 255], \
List[109, 64, 71, 255], List[88, 17, 46, 255], List[125, 38, 58, 255], \
List[165, 45, 76, 255], List[170, 24, 73, 255], List[177, 27, 101, 255], \
List[163, 36, 105, 255], List[143, 51, 90, 255], List[146, 61, 66, 255], \
List[145, 60, 62, 255], List[185, 31, 95, 255], List[196, 37, 103, 255], \
List[192, 43, 104, 255], List[198, 32, 106, 255], List[174, 32, 100, 255], \
List[157, 30, 96, 255], List[141, 24, 88, 255], List[117, 31, 104, 255], \
List[120, 43, 105, 255], List[122, 61, 104, 255], List[115, 66, 117, 255], \
List[114, 55, 116, 255], List[129, 38, 109, 255], List[156, 33, 99, 255], \
List[171, 31, 87, 255], List[178, 35, 84, 255]], List[List[61, 57, 50, 255], \
List[90, 84, 64, 255], List[80, 81, 60, 255], List[98, 79, 62, 255], List[64, \
75, 57, 255], List[94, 115, 98, 255], List[104, 67, 59, 255], List[100, 68, \
60, 255], List[104, 56, 48, 255], List[118, 77, 63, 255], List[83, 53, 51, \
255], List[85, 55, 52, 255], List[115, 73, 61, 255], List[107, 67, 56, 255], \
List[106, 64, 55, 255], List[121, 73, 61, 255], List[110, 69, 52, 255], \
List[120, 78, 91, 255], List[115, 90, 162, 255], List[111, 76, 161, 255], \
List[128, 47, 140, 255], List[116, 48, 133, 255], List[111, 51, 147, 255], \
List[102, 64, 148, 255], List[111, 78, 137, 255], List[134, 77, 152, 255], \
List[123, 75, 136, 255], List[104, 67, 137, 255], List[108, 53, 147, 255], \
List[121, 58, 150, 255], List[107, 62, 156, 255], List[108, 46, 129, 255], \
List[98, 45, 140, 255], List[71, 72, 84, 255], List[57, 42, 43, 255], \
List[65, 48, 58, 255], List[57, 39, 51, 255], List[49, 30, 44, 255], List[32, \
22, 27, 255], List[42, 35, 47, 255], List[39, 30, 40, 255], List[90, 66, 101, \
255], List[101, 83, 103, 255], List[100, 73, 113, 255], List[102, 90, 113, \
255], List[106, 98, 109, 255], List[107, 109, 108, 255], List[112, 113, 107, \
255], List[110, 125, 110, 255], List[158, 82, 103, 255], List[166, 24, 90, \
255], List[143, 46, 93, 255], List[133, 56, 104, 255], List[148, 34, 96, \
255], List[174, 30, 86, 255], List[181, 36, 87, 255], List[173, 51, 88, 255], \
List[165, 65, 77, 255], List[158, 72, 72, 255], List[188, 56, 106, 255], \
List[188, 53, 120, 255], List[186, 54, 119, 255], List[187, 57, 112, 255], \
List[165, 49, 106, 255], List[142, 42, 97, 255], List[137, 33, 90, 255], \
List[138, 29, 99, 255], List[123, 47, 122, 255], List[100, 60, 123, 255], \
List[95, 66, 128, 255], List[97, 53, 125, 255], List[108, 36, 109, 255], \
List[129, 33, 115, 255], List[154, 38, 102, 255], List[157, 32, 96, 255]], \
List[List[43, 47, 53, 255], List[65, 66, 67, 255], List[69, 69, 64, 255], \
List[76, 63, 68, 255], List[60, 109, 83, 255], List[83, 128, 100, 255], \
List[98, 65, 59, 255], List[112, 71, 57, 255], List[80, 48, 46, 255], \
List[63, 43, 46, 255], List[80, 54, 55, 255], List[78, 53, 54, 255], List[62, \
40, 44, 255], List[94, 60, 52, 255], List[107, 68, 57, 255], List[74, 48, 50, \
255], List[71, 51, 47, 255], List[103, 64, 77, 255], List[109, 68, 143, 255], \
List[97, 50, 134, 255], List[104, 52, 133, 255], List[110, 62, 151, 255], \
List[110, 51, 145, 255], List[101, 59, 135, 255], List[126, 72, 127, 255], \
List[132, 78, 148, 255], List[127, 75, 131, 255], List[106, 68, 131, 255], \
List[108, 55, 143, 255], List[115, 58, 146, 255], List[108, 57, 144, 255], \
List[118, 43, 134, 255], List[99, 57, 152, 255], List[97, 71, 126, 255], \
List[82, 62, 97, 255], List[90, 79, 81, 255], List[77, 73, 66, 255], List[38, \
32, 35, 255], List[65, 59, 84, 255], List[92, 61, 133, 255], List[100, 45, \
132, 255], List[101, 66, 122, 255], List[101, 65, 104, 255], List[86, 34, \
125, 255], List[89, 51, 122, 255], List[90, 48, 119, 255], List[98, 95, 109, \
255], List[112, 118, 107, 255], List[105, 121, 107, 255], List[144, 87, 107, \
255], List[153, 30, 97, 255], List[109, 50, 109, 255], List[102, 65, 121, \
255], List[118, 40, 111, 255], List[153, 36, 102, 255], List[165, 36, 91, \
255], List[165, 41, 91, 255], List[164, 63, 96, 255], List[163, 73, 95, 255], \
List[166, 52, 106, 255], List[159, 38, 120, 255], List[156, 37, 121, 255], \
List[160, 47, 108, 255], List[148, 44, 106, 255], List[126, 33, 100, 255], \
List[117, 39, 95, 255], List[138, 34, 94, 255], List[144, 35, 103, 255], \
List[118, 50, 107, 255], List[96, 66, 128, 255], List[90, 53, 121, 255], \
List[94, 37, 114, 255], List[119, 34, 116, 255], List[135, 36, 115, 255], \
List[136, 36, 104, 255]], List[List[32, 42, 63, 255], List[35, 42, 57, 255], \
List[54, 54, 47, 255], List[51, 39, 41, 255], List[42, 109, 74, 255], \
List[80, 142, 107, 255], List[103, 70, 63, 255], List[92, 59, 49, 255], \
List[103, 69, 58, 255], List[93, 62, 55, 255], List[101, 59, 55, 255], \
List[96, 57, 54, 255], List[101, 68, 58, 255], List[105, 73, 60, 255], \
List[98, 63, 52, 255], List[91, 60, 55, 255], List[96, 59, 53, 255], List[83, \
55, 68, 255], List[108, 66, 138, 255], List[96, 52, 138, 255], List[111, 44, \
132, 255], List[113, 86, 126, 255], List[118, 90, 122, 255], List[104, 77, \
133, 255], List[102, 78, 135, 255], List[123, 73, 149, 255], List[103, 77, \
143, 255], List[89, 65, 151, 255], List[102, 48, 150, 255], List[106, 49, \
136, 255], List[129, 43, 117, 255], List[128, 56, 146, 255], List[114, 81, \
162, 255], List[115, 85, 163, 255], List[114, 94, 165, 255], List[110, 108, \
112, 255], List[91, 87, 105, 255], List[83, 69, 129, 255], List[87, 73, 148, \
255], List[84, 51, 148, 255], List[94, 41, 137, 255], List[101, 63, 105, \
255], List[110, 63, 111, 255], List[95, 58, 140, 255], List[99, 75, 127, \
255], List[95, 67, 124, 255], List[100, 101, 109, 255], List[110, 121, 107, \
255], List[109, 128, 109, 255], List[138, 93, 111, 255], List[146, 35, 97, \
255], List[126, 41, 102, 255], List[93, 63, 125, 255], List[95, 42, 114, \
255], List[128, 33, 114, 255], List[138, 33, 105, 255], List[132, 22, 98, \
255], List[143, 33, 98, 255], List[126, 68, 101, 255], List[133, 60, 109, \
255], List[146, 36, 121, 255], List[144, 40, 119, 255], List[141, 42, 117, \
255], List[136, 50, 107, 255], List[137, 42, 109, 255], List[129, 47, 117, \
255], List[128, 49, 122, 255], List[138, 37, 117, 255], List[136, 36, 107, \
255], List[117, 52, 116, 255], List[82, 56, 122, 255], List[85, 41, 130, \
255], List[98, 35, 123, 255], List[103, 36, 109, 255], List[114, 36, 103, \
255]], List[List[36, 46, 67, 255], List[46, 48, 56, 255], List[53, 48, 44, \
255], List[52, 39, 37, 255], List[39, 111, 74, 255], List[73, 149, 101, 255], \
List[97, 71, 65, 255], List[91, 59, 51, 255], List[104, 73, 61, 255], \
List[99, 66, 58, 255], List[97, 56, 54, 255], List[92, 55, 54, 255], \
List[104, 69, 59, 255], List[101, 71, 60, 255], List[96, 66, 55, 255], \
List[108, 73, 61, 255], List[93, 54, 50, 255], List[109, 76, 73, 255], \
List[113, 88, 148, 255], List[108, 75, 155, 255], List[123, 56, 138, 255], \
List[121, 107, 108, 255], List[124, 126, 103, 255], List[112, 119, 104, 255], \
List[97, 108, 115, 255], List[92, 93, 130, 255], List[90, 86, 141, 255], \
List[89, 62, 158, 255], List[97, 55, 157, 255], List[120, 52, 122, 255], \
List[135, 59, 135, 255], List[123, 84, 157, 255], List[126, 82, 165, 255], \
List[112, 85, 169, 255], List[85, 89, 167, 255], List[100, 85, 157, 255], \
List[86, 61, 151, 255], List[83, 66, 155, 255], List[80, 58, 143, 255], \
List[92, 57, 152, 255], List[97, 50, 127, 255], List[113, 72, 94, 255], \
List[108, 79, 126, 255], List[104, 71, 144, 255], List[87, 76, 137, 255], \
List[91, 74, 136, 255], List[106, 110, 112, 255], List[112, 110, 105, 255], \
List[95, 84, 93, 255], List[103, 56, 92, 255], List[134, 44, 109, 255], \
List[132, 40, 109, 255], List[116, 49, 112, 255], List[82, 45, 125, 255], \
List[103, 41, 122, 255], List[117, 59, 108, 255], List[120, 68, 118, 255], \
List[117, 81, 104, 255], List[106, 101, 96, 255], List[109, 80, 101, 255], \
List[131, 51, 122, 255], List[127, 55, 119, 255], List[119, 61, 121, 255], \
List[118, 64, 114, 255], List[134, 59, 117, 255], List[129, 59, 125, 255], \
List[112, 47, 119, 255], List[114, 37, 129, 255], List[109, 44, 138, 255], \
List[109, 40, 128, 255], List[103, 35, 132, 255], List[91, 27, 139, 255], \
List[88, 32, 139, 255], List[90, 36, 123, 255], List[98, 44, 121, 255]], \
List[List[52, 57, 72, 255], List[52, 49, 49, 255], List[45, 41, 42, 255], \
List[50, 44, 41, 255], List[37, 106, 75, 255], List[59, 142, 96, 255], \
List[107, 81, 68, 255], List[103, 61, 50, 255], List[76, 48, 46, 255], \
List[62, 43, 45, 255], List[86, 58, 56, 255], List[80, 52, 52, 255], List[59, \
40, 44, 255], List[79, 51, 47, 255], List[110, 68, 55, 255], List[82, 52, 49, \
255], List[92, 57, 53, 255], List[86, 60, 62, 255], List[95, 84, 154, 255], \
List[122, 80, 163, 255], List[119, 90, 142, 255], List[122, 116, 109, 255], \
List[117, 113, 109, 255], List[101, 111, 110, 255], List[95, 106, 113, 255], \
List[89, 107, 118, 255], List[91, 111, 118, 255], List[93, 109, 123, 255], \
List[101, 97, 127, 255], List[109, 80, 119, 255], List[120, 72, 145, 255], \
List[128, 85, 157, 255], List[132, 87, 162, 255], List[116, 84, 166, 255], \
List[92, 69, 148, 255], List[109, 74, 153, 255], List[109, 54, 148, 255], \
List[102, 49, 143, 255], List[107, 55, 148, 255], List[107, 76, 131, 255], \
List[102, 65, 108, 255], List[109, 80, 108, 255], List[111, 80, 133, 255], \
List[109, 71, 146, 255], List[79, 70, 136, 255], List[88, 71, 122, 255], \
List[94, 75, 96, 255], List[88, 66, 86, 255], List[89, 86, 89, 255], \
List[108, 88, 105, 255], List[128, 58, 121, 255], List[118, 51, 126, 255], \
List[112, 51, 128, 255], List[95, 43, 125, 255], List[122, 107, 129, 255], \
List[143, 147, 128, 255], List[143, 146, 132, 255], List[96, 96, 86, 255], \
List[74, 77, 62, 255], List[88, 71, 88, 255], List[108, 43, 134, 255], \
List[105, 43, 130, 255], List[108, 49, 137, 255], List[112, 49, 137, 255], \
List[122, 59, 138, 255], List[127, 63, 135, 255], List[94, 44, 114, 255], \
List[93, 35, 111, 255], List[97, 51, 132, 255], List[95, 64, 129, 255], \
List[104, 65, 126, 255], List[90, 67, 121, 255], List[87, 76, 105, 255], \
List[79, 87, 89, 255], List[90, 75, 109, 255]], List[List[46, 47, 53, 255], \
List[41, 41, 39, 255], List[44, 39, 39, 255], List[42, 48, 42, 255], List[39, \
118, 67, 255], List[60, 139, 102, 255], List[109, 91, 79, 255], List[105, 65, \
57, 255], List[98, 53, 48, 255], List[104, 68, 60, 255], List[70, 45, 46, \
255], List[81, 55, 52, 255], List[112, 70, 59, 255], List[104, 65, 53, 255], \
List[103, 69, 59, 255], List[96, 59, 53, 255], List[73, 51, 50, 255], \
List[75, 50, 54, 255], List[99, 76, 139, 255], List[123, 83, 157, 255], \
List[120, 102, 129, 255], List[118, 118, 110, 255], List[106, 107, 112, 255], \
List[99, 103, 114, 255], List[93, 103, 118, 255], List[91, 108, 121, 255], \
List[91, 109, 122, 255], List[91, 107, 122, 255], List[93, 104, 116, 255], \
List[96, 108, 118, 255], List[97, 109, 118, 255], List[102, 101, 119, 255], \
List[106, 94, 124, 255], List[110, 85, 131, 255], List[113, 75, 129, 255], \
List[125, 70, 131, 255], List[116, 51, 123, 255], List[125, 67, 128, 255], \
List[140, 95, 146, 255], List[115, 96, 126, 255], List[98, 79, 104, 255], \
List[121, 96, 120, 255], List[115, 84, 123, 255], List[92, 78, 109, 255], \
List[90, 73, 95, 255], List[80, 68, 77, 255], List[82, 79, 80, 255], List[96, \
99, 92, 255], List[96, 100, 91, 255], List[89, 83, 83, 255], List[90, 71, 89, \
255], List[86, 68, 86, 255], List[78, 68, 89, 255], List[82, 61, 92, 255], \
List[85, 78, 96, 255], List[92, 106, 104, 255], List[100, 115, 117, 255], \
List[79, 90, 92, 255], List[42, 40, 51, 255], List[59, 46, 72, 255], List[93, \
51, 128, 255], List[88, 55, 118, 255], List[97, 71, 127, 255], List[104, 78, \
128, 255], List[106, 90, 118, 255], List[99, 100, 108, 255], List[85, 106, \
98, 255], List[77, 114, 87, 255], List[76, 122, 80, 255], List[70, 123, 76, \
255], List[63, 119, 67, 255], List[61, 113, 58, 255], List[59, 110, 57, 255], \
List[54, 114, 50, 255], List[68, 92, 83, 255]], List[List[25, 30, 27, 255], \
List[24, 29, 28, 255], List[27, 31, 30, 255], List[37, 43, 35, 255], List[83, \
98, 62, 255], List[113, 131, 90, 255], List[63, 66, 51, 255], List[54, 51, \
38, 255], List[93, 72, 49, 255], List[88, 65, 47, 255], List[97, 68, 56, \
255], List[105, 65, 55, 255], List[117, 73, 57, 255], List[108, 60, 49, 255], \
List[97, 58, 51, 255], List[109, 64, 51, 255], List[113, 70, 58, 255], \
List[112, 70, 59, 255], List[119, 76, 115, 255], List[127, 92, 133, 255], \
List[122, 112, 116, 255], List[115, 116, 107, 255], List[106, 105, 110, 255], \
List[99, 104, 112, 255], List[92, 108, 117, 255], List[93, 108, 121, 255], \
List[96, 103, 122, 255], List[97, 100, 122, 255], List[97, 101, 118, 255], \
List[96, 104, 117, 255], List[93, 105, 116, 255], List[85, 100, 107, 255], \
List[82, 96, 101, 255], List[85, 96, 99, 255], List[83, 84, 101, 255], \
List[108, 86, 115, 255], List[153, 138, 138, 255], List[115, 118, 101, 255], \
List[102, 107, 88, 255], List[124, 121, 112, 255], List[76, 64, 70, 255], \
List[66, 62, 61, 255], List[65, 60, 60, 255], List[86, 67, 80, 255], List[72, \
63, 76, 255], List[72, 68, 72, 255], List[75, 67, 78, 255], List[68, 52, 67, \
255], List[77, 68, 68, 255], List[83, 78, 90, 255], List[85, 50, 135, 255], \
List[90, 56, 132, 255], List[56, 44, 112, 255], List[63, 38, 132, 255], \
List[100, 96, 154, 255], List[135, 168, 166, 255], List[150, 162, 164, 255], \
List[159, 160, 154, 255], List[136, 118, 131, 255], List[75, 82, 76, 255], \
List[73, 105, 80, 255], List[79, 115, 74, 255], List[75, 119, 68, 255], \
List[66, 116, 66, 255], List[65, 117, 68, 255], List[63, 121, 76, 255], \
List[66, 121, 75, 255], List[64, 124, 73, 255], List[61, 122, 70, 255], \
List[59, 119, 69, 255], List[59, 114, 67, 255], List[61, 111, 64, 255], \
List[61, 109, 62, 255], List[57, 109, 60, 255], List[63, 99, 74, 255]], \
List[List[26, 35, 28, 255], List[28, 35, 29, 255], List[31, 35, 31, 255], \
List[28, 32, 29, 255], List[119, 121, 84, 255], List[125, 123, 94, 255], \
List[41, 51, 36, 255], List[47, 60, 40, 255], List[52, 69, 48, 255], List[26, \
42, 33, 255], List[41, 38, 38, 255], List[95, 59, 53, 255], List[82, 63, 55, \
255], List[92, 65, 53, 255], List[109, 65, 52, 255], List[92, 61, 52, 255], \
List[88, 60, 55, 255], List[90, 62, 52, 255], List[108, 67, 104, 255], \
List[137, 84, 128, 255], List[118, 112, 110, 255], List[116, 112, 105, 255], \
List[110, 111, 107, 255], List[97, 109, 110, 255], List[94, 108, 115, 255], \
List[96, 103, 123, 255], List[96, 96, 123, 255], List[95, 94, 122, 255], \
List[90, 96, 119, 255], List[84, 98, 113, 255], List[80, 95, 109, 255], \
List[81, 93, 110, 255], List[81, 94, 105, 255], List[79, 92, 100, 255], \
List[80, 91, 99, 255], List[147, 159, 131, 255], List[190, 203, 158, 255], \
List[105, 103, 95, 255], List[78, 57, 77, 255], List[95, 70, 89, 255], \
List[71, 54, 63, 255], List[69, 57, 69, 255], List[109, 65, 104, 255], \
List[104, 58, 100, 255], List[63, 49, 77, 255], List[93, 62, 85, 255], \
List[92, 82, 86, 255], List[119, 117, 104, 255], List[137, 137, 113, 255], \
List[122, 121, 124, 255], List[63, 60, 156, 255], List[84, 70, 165, 255], \
List[45, 61, 135, 255], List[99, 96, 117, 255], List[130, 121, 121, 255], \
List[121, 110, 105, 255], List[117, 104, 97, 255], List[110, 101, 92, 255], \
List[90, 85, 84, 255], List[72, 94, 73, 255], List[58, 108, 65, 255], \
List[67, 114, 64, 255], List[68, 114, 63, 255], List[64, 107, 71, 255], \
List[64, 114, 75, 255], List[64, 122, 73, 255], List[64, 121, 73, 255], \
List[60, 121, 73, 255], List[60, 118, 72, 255], List[63, 119, 72, 255], \
List[62, 117, 68, 255], List[67, 116, 64, 255], List[62, 115, 60, 255], \
List[59, 113, 60, 255], List[58, 109, 64, 255]], List[List[26, 34, 29, 255], \
List[29, 37, 29, 255], List[45, 54, 37, 255], List[46, 55, 38, 255], List[45, \
46, 44, 255], List[52, 55, 49, 255], List[44, 52, 37, 255], List[51, 60, 42, \
255], List[53, 63, 44, 255], List[34, 49, 35, 255], List[61, 46, 40, 255], \
List[113, 66, 53, 255], List[103, 61, 50, 255], List[93, 64, 53, 255], \
List[93, 63, 52, 255], List[100, 68, 54, 255], List[107, 64, 53, 255], \
List[109, 66, 50, 255], List[99, 66, 96, 255], List[121, 85, 123, 255], \
List[118, 103, 107, 255], List[111, 112, 105, 255], List[101, 115, 105, 255], \
List[93, 113, 108, 255], List[91, 110, 118, 255], List[93, 105, 125, 255], \
List[94, 99, 125, 255], List[98, 100, 125, 255], List[97, 101, 120, 255], \
List[97, 102, 112, 255], List[97, 105, 110, 255], List[97, 102, 109, 255], \
List[93, 101, 103, 255], List[81, 100, 102, 255], List[83, 84, 87, 255], \
List[130, 113, 104, 255], List[121, 105, 112, 255], List[82, 53, 83, 255], \
List[47, 31, 49, 255], List[82, 78, 76, 255], List[93, 90, 83, 255], \
List[103, 80, 95, 255], List[82, 55, 77, 255], List[56, 48, 67, 255], \
List[55, 52, 78, 255], List[108, 61, 96, 255], List[146, 123, 115, 255], \
List[143, 144, 118, 255], List[145, 138, 113, 255], List[128, 123, 121, 255], \
List[39, 44, 131, 255], List[62, 53, 145, 255], List[37, 61, 145, 255], \
List[73, 81, 91, 255], List[84, 86, 89, 255], List[74, 77, 81, 255], List[82, \
83, 83, 255], List[90, 90, 85, 255], List[80, 79, 84, 255], List[68, 84, 73, \
255], List[61, 103, 66, 255], List[64, 110, 64, 255], List[66, 110, 63, 255], \
List[66, 106, 70, 255], List[62, 118, 70, 255], List[60, 127, 68, 255], \
List[60, 127, 70, 255], List[62, 122, 70, 255], List[62, 118, 71, 255], \
List[63, 117, 71, 255], List[66, 117, 70, 255], List[69, 115, 65, 255], \
List[65, 119, 60, 255], List[58, 120, 62, 255], List[56, 113, 65, 255]], \
List[List[28, 37, 28, 255], List[32, 42, 30, 255], List[56, 71, 41, 255], \
List[55, 67, 43, 255], List[65, 73, 51, 255], List[76, 82, 60, 255], List[71, \
79, 53, 255], List[64, 77, 48, 255], List[61, 77, 45, 255], List[29, 45, 33, \
255], List[73, 54, 43, 255], List[99, 58, 47, 255], List[88, 57, 51, 255], \
List[82, 60, 52, 255], List[100, 64, 51, 255], List[75, 58, 51, 255], \
List[91, 58, 51, 255], List[104, 60, 45, 255], List[88, 69, 97, 255], \
List[105, 95, 121, 255], List[115, 99, 109, 255], List[104, 107, 110, 255], \
List[97, 110, 109, 255], List[93, 110, 114, 255], List[86, 110, 120, 255], \
List[109, 105, 104, 255], List[139, 117, 104, 255], List[135, 112, 99, 255], \
List[135, 112, 97, 255], List[139, 115, 99, 255], List[142, 117, 99, 255], \
List[129, 105, 88, 255], List[151, 127, 111, 255], List[123, 103, 101, 255], \
List[83, 63, 73, 255], List[88, 56, 88, 255], List[70, 53, 72, 255], List[20, \
22, 21, 255], List[20, 15, 23, 255], List[83, 64, 80, 255], List[78, 57, 75, \
255], List[75, 49, 70, 255], List[81, 77, 79, 255], List[81, 72, 105, 255], \
List[73, 62, 110, 255], List[92, 77, 101, 255], List[129, 104, 111, 255], \
List[157, 149, 121, 255], List[164, 152, 119, 255], List[146, 138, 128, 255], \
List[21, 32, 131, 255], List[64, 49, 126, 255], List[52, 59, 143, 255], \
List[63, 75, 102, 255], List[124, 122, 114, 255], List[106, 105, 104, 255], \
List[95, 93, 92, 255], List[100, 98, 92, 255], List[98, 96, 97, 255], \
List[79, 90, 83, 255], List[58, 96, 59, 255], List[63, 102, 63, 255], \
List[65, 100, 63, 255], List[66, 103, 65, 255], List[65, 115, 68, 255], \
List[64, 123, 72, 255], List[60, 128, 72, 255], List[61, 124, 71, 255], \
List[64, 116, 70, 255], List[66, 116, 68, 255], List[67, 120, 66, 255], \
List[68, 121, 63, 255], List[68, 118, 67, 255], List[61, 120, 67, 255], \
List[58, 116, 64, 255]], List[List[31, 39, 29, 255], List[36, 47, 32, 255], \
List[54, 72, 39, 255], List[46, 63, 35, 255], List[66, 77, 51, 255], \
List[102, 108, 78, 255], List[76, 80, 60, 255], List[85, 101, 62, 255], \
List[73, 93, 52, 255], List[26, 40, 30, 255], List[65, 47, 42, 255], \
List[104, 67, 56, 255], List[88, 60, 54, 255], List[98, 59, 51, 255], \
List[107, 63, 51, 255], List[95, 64, 55, 255], List[98, 64, 56, 255], \
List[102, 64, 49, 255], List[97, 77, 97, 255], List[105, 98, 123, 255], \
List[106, 100, 110, 255], List[102, 101, 112, 255], List[99, 103, 111, 255], \
List[96, 104, 113, 255], List[86, 103, 122, 255], List[98, 86, 83, 255], \
List[99, 77, 61, 255], List[90, 74, 63, 255], List[95, 77, 66, 255], List[93, \
76, 67, 255], List[98, 77, 77, 255], List[91, 70, 74, 255], List[92, 72, 82, \
255], List[85, 57, 81, 255], List[78, 52, 83, 255], List[88, 65, 104, 255], \
List[82, 67, 88, 255], List[34, 28, 35, 255], List[54, 37, 59, 255], List[69, \
61, 67, 255], List[72, 64, 71, 255], List[93, 70, 99, 255], List[78, 77, 97, \
255], List[83, 70, 111, 255], List[75, 62, 105, 255], List[99, 99, 105, 255], \
List[120, 111, 124, 255], List[141, 133, 120, 255], List[158, 148, 121, 255], \
List[136, 121, 131, 255], List[88, 67, 137, 255], List[111, 72, 120, 255], \
List[56, 50, 118, 255], List[62, 75, 110, 255], List[152, 148, 133, 255], \
List[115, 115, 114, 255], List[101, 103, 100, 255], List[112, 112, 106, 255], \
List[107, 105, 105, 255], List[86, 96, 89, 255], List[56, 102, 55, 255], \
List[61, 107, 58, 255], List[65, 108, 58, 255], List[62, 114, 58, 255], \
List[60, 118, 62, 255], List[62, 119, 63, 255], List[63, 124, 60, 255], \
List[61, 126, 56, 255], List[69, 123, 56, 255], List[72, 126, 56, 255], \
List[66, 129, 55, 255], List[70, 128, 65, 255], List[70, 125, 70, 255], \
List[62, 122, 69, 255], List[59, 119, 62, 255]], List[List[25, 36, 26, 255], \
List[34, 46, 29, 255], List[50, 66, 37, 255], List[50, 66, 36, 255], List[88, \
95, 69, 255], List[140, 142, 109, 255], List[76, 82, 59, 255], List[95, 112, \
70, 255], List[62, 79, 50, 255], List[19, 31, 27, 255], List[69, 47, 42, \
255], List[99, 63, 53, 255], List[83, 58, 52, 255], List[89, 55, 49, 255], \
List[107, 64, 51, 255], List[92, 63, 55, 255], List[88, 60, 55, 255], \
List[100, 62, 47, 255], List[95, 76, 86, 255], List[103, 99, 119, 255], \
List[102, 99, 110, 255], List[100, 100, 112, 255], List[99, 99, 109, 255], \
List[95, 99, 110, 255], List[85, 97, 120, 255], List[98, 89, 90, 255], \
List[109, 87, 70, 255], List[108, 90, 76, 255], List[118, 98, 84, 255], \
List[122, 97, 81, 255], List[104, 78, 100, 255], List[77, 55, 85, 255], \
List[87, 57, 93, 255], List[92, 58, 99, 255], List[83, 59, 95, 255], List[78, \
64, 90, 255], List[100, 72, 102, 255], List[53, 35, 54, 255], List[12, 13, \
16, 255], List[81, 83, 72, 255], List[76, 68, 70, 255], List[121, 68, 103, \
255], List[85, 71, 92, 255], List[68, 61, 104, 255], List[63, 52, 95, 255], \
List[113, 107, 104, 255], List[132, 119, 129, 255], List[117, 93, 130, 255], \
List[115, 90, 127, 255], List[102, 77, 120, 255], List[65, 52, 114, 255], \
List[64, 44, 105, 255], List[66, 50, 122, 255], List[62, 68, 107, 255], \
List[149, 136, 121, 255], List[121, 109, 106, 255], List[105, 98, 91, 255], \
List[117, 109, 99, 255], List[109, 103, 99, 255], List[87, 93, 89, 255], \
List[54, 94, 57, 255], List[60, 100, 68, 255], List[66, 99, 73, 255], \
List[70, 99, 75, 255], List[69, 104, 78, 255], List[65, 106, 90, 255], \
List[61, 114, 103, 255], List[64, 120, 107, 255], List[69, 121, 103, 255], \
List[73, 121, 94, 255], List[69, 129, 86, 255], List[70, 128, 71, 255], \
List[69, 121, 68, 255], List[63, 121, 69, 255], List[59, 118, 64, 255]], \
List[List[41, 51, 37, 255], List[51, 65, 42, 255], List[70, 88, 50, 255], \
List[63, 80, 48, 255], List[82, 96, 64, 255], List[104, 115, 80, 255], \
List[78, 91, 62, 255], List[93, 113, 70, 255], List[86, 105, 65, 255], \
List[68, 83, 56, 255], List[91, 95, 65, 255], List[92, 59, 47, 255], List[86, \
54, 49, 255], List[68, 55, 49, 255], List[96, 61, 50, 255], List[80, 59, 50, \
255], List[86, 59, 52, 255], List[103, 58, 44, 255], List[102, 81, 91, 255], \
List[107, 96, 117, 255], List[104, 96, 107, 255], List[99, 99, 108, 255], \
List[94, 100, 107, 255], List[89, 101, 107, 255], List[79, 99, 114, 255], \
List[87, 84, 86, 255], List[99, 79, 65, 255], List[89, 74, 63, 255], List[93, \
76, 67, 255], List[95, 79, 64, 255], List[100, 73, 92, 255], List[93, 57, \
102, 255], List[95, 64, 96, 255], List[90, 59, 97, 255], List[84, 62, 96, \
255], List[78, 60, 82, 255], List[104, 73, 95, 255], List[95, 61, 89, 255], \
List[53, 49, 54, 255], List[70, 68, 71, 255], List[57, 43, 68, 255], \
List[112, 70, 105, 255], List[106, 63, 100, 255], List[65, 59, 92, 255], \
List[89, 69, 103, 255], List[120, 88, 120, 255], List[109, 85, 121, 255], \
List[78, 56, 94, 255], List[109, 95, 108, 255], List[112, 100, 116, 255], \
List[76, 63, 123, 255], List[100, 79, 127, 255], List[80, 81, 134, 255], \
List[55, 95, 131, 255], List[101, 139, 139, 255], List[83, 139, 150, 255], \
List[69, 119, 149, 255], List[66, 118, 163, 255], List[56, 119, 170, 255], \
List[54, 112, 168, 255], List[48, 125, 167, 255], List[52, 136, 170, 255], \
List[61, 118, 158, 255], List[73, 108, 152, 255], List[91, 109, 148, 255], \
List[90, 117, 166, 255], List[83, 114, 176, 255], List[78, 97, 179, 255], \
List[72, 93, 152, 255], List[65, 74, 122, 255], List[59, 55, 97, 255], \
List[63, 88, 62, 255], List[67, 119, 63, 255], List[59, 117, 66, 255], \
List[56, 114, 64, 255]], List[List[97, 115, 73, 255], List[96, 114, 74, 255], \
List[94, 112, 73, 255], List[83, 101, 66, 255], List[90, 111, 71, 255], \
List[85, 106, 67, 255], List[87, 108, 70, 255], List[86, 106, 68, 255], \
List[87, 106, 69, 255], List[87, 104, 68, 255], List[93, 113, 73, 255], \
List[96, 65, 51, 255], List[94, 57, 48, 255], List[81, 56, 47, 255], List[90, \
59, 50, 255], List[96, 66, 52, 255], List[94, 62, 51, 255], List[100, 64, 56, \
255], List[106, 91, 103, 255], List[110, 92, 107, 255], List[109, 93, 103, \
255], List[100, 103, 101, 255], List[90, 105, 100, 255], List[84, 101, 101, \
255], List[78, 100, 108, 255], List[82, 83, 86, 255], List[93, 74, 61, 255], \
List[97, 80, 69, 255], List[95, 78, 69, 255], List[95, 79, 67, 255], \
List[111, 85, 84, 255], List[104, 68, 102, 255], List[95, 66, 93, 255], \
List[95, 66, 85, 255], List[91, 65, 88, 255], List[85, 61, 88, 255], List[99, \
71, 86, 255], List[113, 79, 102, 255], List[87, 64, 87, 255], List[61, 44, \
98, 255], List[64, 42, 97, 255], List[103, 71, 101, 255], List[123, 68, 110, \
255], List[106, 77, 112, 255], List[103, 74, 111, 255], List[103, 83, 103, \
255], List[116, 107, 113, 255], List[52, 44, 51, 255], List[70, 54, 74, 255], \
List[100, 79, 111, 255], List[77, 40, 59, 255], List[71, 59, 74, 255], \
List[65, 68, 87, 255], List[61, 70, 83, 255], List[44, 67, 79, 255], List[32, \
68, 84, 255], List[37, 64, 93, 255], List[35, 58, 90, 255], List[32, 51, 85, \
255], List[35, 52, 82, 255], List[38, 56, 81, 255], List[38, 54, 72, 255], \
List[35, 49, 58, 255], List[52, 46, 55, 255], List[58, 42, 54, 255], List[64, \
44, 49, 255], List[73, 32, 40, 255], List[68, 22, 34, 255], List[51, 19, 29, \
255], List[44, 18, 28, 255], List[39, 8, 22, 255], List[54, 74, 49, 255], \
List[65, 120, 62, 255], List[56, 115, 58, 255], List[56, 110, 63, 255]], \
List[List[98, 106, 80, 255], List[111, 116, 85, 255], List[121, 124, 91, \
255], List[122, 124, 91, 255], List[128, 128, 95, 255], List[127, 125, 97, \
255], List[120, 119, 95, 255], List[112, 116, 89, 255], List[99, 109, 79, \
255], List[82, 97, 65, 255], List[92, 110, 71, 255], List[77, 59, 50, 255], \
List[75, 58, 52, 255], List[78, 48, 43, 255], List[96, 60, 49, 255], List[97, \
60, 50, 255], List[87, 56, 46, 255], List[89, 68, 68, 255], List[105, 98, \
109, 255], List[108, 92, 102, 255], List[109, 95, 99, 255], List[104, 103, \
96, 255], List[94, 103, 95, 255], List[83, 100, 96, 255], List[78, 93, 103, \
255], List[83, 82, 91, 255], List[91, 75, 63, 255], List[101, 83, 72, 255], \
List[92, 77, 67, 255], List[89, 74, 64, 255], List[99, 82, 70, 255], \
List[107, 73, 102, 255], List[101, 71, 95, 255], List[93, 74, 88, 255], \
List[86, 72, 90, 255], List[91, 65, 84, 255], List[100, 65, 83, 255], \
List[120, 83, 106, 255], List[100, 69, 96, 255], List[89, 54, 110, 255], \
List[100, 60, 108, 255], List[116, 72, 104, 255], List[105, 73, 102, 255], \
List[89, 61, 94, 255], List[88, 61, 94, 255], List[101, 80, 104, 255], \
List[90, 69, 94, 255], List[81, 70, 82, 255], List[102, 99, 93, 255], \
List[120, 116, 110, 255], List[71, 31, 46, 255], List[61, 20, 30, 255], \
List[57, 22, 28, 255], List[53, 13, 26, 255], List[38, 9, 26, 255], List[32, \
8, 33, 255], List[30, 14, 35, 255], List[32, 22, 37, 255], List[43, 21, 36, \
255], List[40, 21, 36, 255], List[28, 22, 37, 255], List[31, 13, 38, 255], \
List[31, 11, 36, 255], List[44, 12, 29, 255], List[56, 22, 33, 255], List[58, \
25, 37, 255], List[63, 24, 38, 255], List[67, 20, 37, 255], List[63, 18, 37, \
255], List[54, 20, 40, 255], List[46, 17, 40, 255], List[52, 84, 55, 255], \
List[61, 114, 60, 255], List[56, 105, 58, 255], List[55, 106, 60, 255]], \
List[List[65, 72, 75, 255], List[67, 74, 74, 255], List[73, 82, 76, 255], \
List[83, 94, 81, 255], List[95, 105, 86, 255], List[112, 117, 93, 255], \
List[126, 125, 98, 255], List[131, 133, 103, 255], List[132, 136, 105, 255], \
List[121, 132, 95, 255], List[95, 114, 74, 255], List[95, 73, 56, 255], \
List[102, 58, 48, 255], List[82, 51, 45, 255], List[95, 60, 50, 255], \
List[93, 57, 50, 255], List[98, 54, 45, 255], List[103, 83, 84, 255], \
List[98, 100, 108, 255], List[107, 99, 103, 255], List[106, 101, 97, 255], \
List[102, 101, 95, 255], List[96, 95, 96, 255], List[84, 93, 96, 255], \
List[78, 92, 100, 255], List[79, 82, 90, 255], List[58, 51, 45, 255], \
List[99, 81, 70, 255], List[95, 78, 67, 255], List[98, 80, 69, 255], List[98, \
83, 68, 255], List[113, 81, 94, 255], List[104, 79, 102, 255], List[93, 76, \
88, 255], List[98, 72, 87, 255], List[100, 74, 92, 255], List[96, 72, 86, \
255], List[109, 75, 107, 255], List[116, 73, 113, 255], List[114, 72, 107, \
255], List[110, 85, 101, 255], List[92, 83, 83, 255], List[87, 70, 78, 255], \
List[90, 65, 83, 255], List[88, 77, 89, 255], List[93, 85, 89, 255], \
List[103, 100, 94, 255], List[114, 113, 103, 255], List[114, 112, 106, 255], \
List[106, 102, 97, 255], List[60, 34, 50, 255], List[57, 25, 47, 255], \
List[70, 32, 50, 255], List[52, 24, 51, 255], List[41, 23, 55, 255], List[46, \
25, 57, 255], List[44, 30, 56, 255], List[43, 37, 56, 255], List[54, 44, 53, \
255], List[50, 42, 54, 255], List[42, 35, 55, 255], List[46, 27, 57, 255], \
List[45, 24, 56, 255], List[44, 22, 54, 255], List[64, 27, 51, 255], List[64, \
26, 50, 255], List[50, 24, 45, 255], List[58, 25, 43, 255], List[57, 21, 37, \
255], List[59, 18, 36, 255], List[50, 16, 42, 255], List[49, 82, 53, 255], \
List[57, 106, 58, 255], List[55, 101, 57, 255], List[53, 101, 59, 255]], \
List[List[67, 76, 77, 255], List[65, 75, 72, 255], List[61, 75, 66, 255], \
List[59, 73, 65, 255], List[56, 74, 64, 255], List[58, 82, 66, 255], List[65, \
82, 67, 255], List[72, 86, 68, 255], List[77, 90, 70, 255], List[72, 88, 71, \
255], List[82, 101, 69, 255], List[92, 77, 60, 255], List[86, 47, 44, 255], \
List[87, 57, 51, 255], List[98, 70, 59, 255], List[95, 62, 53, 255], List[89, \
58, 52, 255], List[85, 86, 93, 255], List[97, 100, 107, 255], List[102, 99, \
105, 255], List[105, 103, 99, 255], List[99, 98, 96, 255], List[89, 90, 97, \
255], List[83, 87, 95, 255], List[75, 89, 98, 255], List[75, 84, 90, 255], \
List[64, 53, 48, 255], List[84, 70, 61, 255], List[100, 81, 70, 255], \
List[108, 89, 77, 255], List[109, 91, 77, 255], List[109, 87, 83, 255], \
List[111, 87, 103, 255], List[104, 74, 85, 255], List[105, 78, 92, 255], \
List[105, 77, 98, 255], List[95, 65, 95, 255], List[96, 59, 100, 255], \
List[67, 43, 67, 255], List[113, 77, 118, 255], List[109, 80, 109, 255], \
List[103, 62, 98, 255], List[144, 80, 150, 255], List[155, 100, 150, 255], \
List[147, 109, 136, 255], List[126, 112, 117, 255], List[114, 113, 103, 255], \
List[111, 107, 101, 255], List[109, 106, 100, 255], List[103, 100, 96, 255], \
List[48, 23, 48, 255], List[57, 14, 48, 255], List[59, 21, 56, 255], List[54, \
20, 67, 255], List[51, 19, 65, 255], List[51, 28, 59, 255], List[51, 35, 64, \
255], List[51, 47, 68, 255], List[63, 47, 65, 255], List[56, 49, 68, 255], \
List[50, 41, 68, 255], List[51, 32, 61, 255], List[51, 22, 63, 255], List[53, \
20, 70, 255], List[56, 22, 60, 255], List[60, 21, 53, 255], List[48, 21, 50, \
255], List[47, 20, 49, 255], List[50, 22, 39, 255], List[54, 19, 35, 255], \
List[52, 17, 42, 255], List[49, 80, 52, 255], List[56, 98, 56, 255], List[54, \
96, 56, 255], List[54, 98, 56, 255]], List[List[66, 76, 77, 255], List[67, \
77, 72, 255], List[65, 76, 67, 255], List[65, 76, 66, 255], List[65, 80, 68, \
255], List[63, 86, 69, 255], List[70, 83, 68, 255], List[71, 82, 68, 255], \
List[68, 78, 65, 255], List[56, 70, 59, 255], List[81, 101, 67, 255], \
List[66, 59, 48, 255], List[51, 31, 37, 255], List[91, 58, 50, 255], List[80, \
58, 53, 255], List[82, 49, 42, 255], List[91, 62, 57, 255], List[83, 86, 100, \
255], List[94, 94, 102, 255], List[99, 99, 102, 255], List[103, 101, 98, \
255], List[100, 98, 94, 255], List[88, 92, 94, 255], List[80, 86, 95, 255], \
List[75, 83, 96, 255], List[69, 80, 89, 255], List[93, 76, 66, 255], List[85, \
70, 60, 255], List[92, 76, 67, 255], List[96, 81, 68, 255], List[92, 76, 63, \
255], List[86, 68, 60, 255], List[116, 92, 109, 255], List[107, 77, 100, \
255], List[99, 67, 91, 255], List[98, 75, 84, 255], List[118, 63, 118, 255], \
List[135, 70, 143, 255], List[68, 40, 76, 255], List[53, 32, 52, 255], \
List[97, 67, 121, 255], List[128, 88, 163, 255], List[169, 101, 192, 255], \
List[155, 79, 181, 255], List[127, 63, 167, 255], List[122, 94, 146, 255], \
List[130, 129, 114, 255], List[127, 123, 115, 255], List[127, 124, 114, 255], \
List[120, 117, 109, 255], List[68, 51, 72, 255], List[59, 33, 70, 255], \
List[55, 21, 63, 255], List[51, 18, 72, 255], List[46, 23, 79, 255], List[51, \
35, 75, 255], List[60, 43, 81, 255], List[59, 48, 79, 255], List[61, 46, 72, \
255], List[60, 48, 76, 255], List[61, 46, 83, 255], List[55, 39, 76, 255], \
List[46, 28, 78, 255], List[48, 20, 75, 255], List[54, 19, 64, 255], List[49, \
21, 66, 255], List[47, 23, 63, 255], List[37, 21, 57, 255], List[43, 22, 45, \
255], List[53, 18, 35, 255], List[57, 20, 40, 255], List[53, 84, 54, 255], \
List[58, 95, 54, 255], List[54, 94, 56, 255], List[55, 94, 56, 255]], \
List[List[70, 82, 80, 255], List[69, 81, 77, 255], List[69, 81, 73, 255], \
List[67, 80, 70, 255], List[66, 82, 69, 255], List[66, 82, 70, 255], List[70, \
81, 69, 255], List[70, 80, 68, 255], List[68, 78, 66, 255], List[63, 73, 63, \
255], List[82, 102, 68, 255], List[77, 69, 52, 255], List[86, 56, 50, 255], \
List[77, 52, 46, 255], List[83, 60, 55, 255], List[91, 67, 57, 255], List[89, \
78, 81, 255], List[78, 77, 100, 255], List[88, 88, 97, 255], List[98, 95, 95, \
255], List[101, 93, 93, 255], List[102, 96, 89, 255], List[97, 95, 88, 255], \
List[81, 91, 88, 255], List[74, 83, 90, 255], List[65, 76, 89, 255], \
List[101, 87, 75, 255], List[107, 87, 74, 255], List[89, 75, 65, 255], \
List[89, 79, 63, 255], List[95, 85, 67, 255], List[96, 84, 65, 255], \
List[108, 86, 102, 255], List[96, 75, 86, 255], List[100, 87, 68, 255], \
List[120, 110, 83, 255], List[145, 76, 132, 255], List[147, 74, 153, 255], \
List[135, 85, 158, 255], List[102, 72, 126, 255], List[130, 98, 163, 255], \
List[133, 105, 158, 255], List[134, 93, 151, 255], List[106, 59, 143, 255], \
List[104, 62, 149, 255], List[96, 83, 113, 255], List[123, 125, 112, 255], \
List[131, 130, 124, 255], List[135, 134, 127, 255], List[134, 134, 125, 255], \
List[133, 133, 125, 255], List[129, 128, 123, 255], List[115, 110, 110, 255], \
List[52, 43, 74, 255], List[35, 34, 75, 255], List[56, 34, 69, 255], List[58, \
38, 71, 255], List[52, 47, 71, 255], List[51, 50, 67, 255], List[51, 49, 70, \
255], List[55, 42, 72, 255], List[59, 32, 67, 255], List[42, 38, 75, 255], \
List[35, 32, 69, 255], List[41, 22, 56, 255], List[42, 21, 64, 255], List[39, \
19, 73, 255], List[38, 20, 66, 255], List[45, 25, 50, 255], List[54, 25, 35, \
255], List[50, 27, 43, 255], List[61, 84, 59, 255], List[66, 88, 54, 255], \
List[63, 87, 54, 255], List[60, 93, 56, 255]], List[List[72, 84, 82, 255], \
List[70, 82, 79, 255], List[71, 82, 77, 255], List[73, 82, 73, 255], List[71, \
81, 70, 255], List[70, 81, 70, 255], List[71, 80, 70, 255], List[69, 78, 69, \
255], List[66, 75, 66, 255], List[65, 72, 65, 255], List[85, 102, 68, 255], \
List[102, 105, 87, 255], List[115, 108, 102, 255], List[109, 106, 98, 255], \
List[113, 109, 101, 255], List[123, 120, 109, 255], List[90, 87, 97, 255], \
List[74, 69, 90, 255], List[82, 79, 89, 255], List[93, 90, 90, 255], List[96, \
89, 92, 255], List[96, 92, 89, 255], List[98, 95, 85, 255], List[89, 93, 82, \
255], List[75, 86, 86, 255], List[64, 76, 88, 255], List[78, 68, 64, 255], \
List[90, 72, 63, 255], List[86, 75, 62, 255], List[89, 80, 63, 255], List[88, \
79, 63, 255], List[92, 84, 67, 255], List[89, 78, 65, 255], List[89, 79, 63, \
255], List[90, 82, 63, 255], List[79, 69, 60, 255], List[141, 77, 130, 255], \
List[145, 85, 146, 255], List[131, 97, 152, 255], List[137, 105, 164, 255], \
List[130, 101, 157, 255], List[143, 99, 157, 255], List[145, 91, 154, 255], \
List[125, 60, 149, 255], List[106, 61, 135, 255], List[56, 53, 60, 255], \
List[79, 80, 71, 255], List[91, 91, 85, 255], List[96, 97, 92, 255], List[97, \
98, 93, 255], List[95, 96, 91, 255], List[94, 94, 88, 255], List[98, 99, 90, \
255], List[47, 51, 68, 255], List[36, 32, 62, 255], List[54, 33, 63, 255], \
List[56, 38, 66, 255], List[48, 48, 73, 255], List[43, 44, 70, 255], List[46, \
48, 73, 255], List[56, 42, 69, 255], List[55, 33, 64, 255], List[43, 35, 64, \
255], List[29, 34, 61, 255], List[24, 32, 48, 255], List[30, 27, 54, 255], \
List[38, 18, 68, 255], List[40, 18, 67, 255], List[46, 28, 57, 255], List[44, \
34, 43, 255], List[44, 36, 49, 255], List[73, 86, 58, 255], List[73, 87, 51, \
255], List[69, 87, 53, 255], List[64, 93, 55, 255]], List[List[76, 87, 82, \
255], List[74, 84, 80, 255], List[72, 81, 76, 255], List[73, 82, 74, 255], \
List[72, 81, 72, 255], List[72, 79, 73, 255], List[73, 78, 72, 255], List[71, \
77, 70, 255], List[68, 73, 67, 255], List[68, 74, 67, 255], List[79, 95, 62, \
255], List[105, 110, 92, 255], List[125, 120, 115, 255], List[121, 119, 109, \
255], List[125, 121, 113, 255], List[116, 113, 108, 255], List[77, 67, 81, \
255], List[74, 67, 86, 255], List[75, 70, 88, 255], List[83, 83, 88, 255], \
List[91, 89, 88, 255], List[93, 90, 86, 255], List[98, 93, 82, 255], List[91, \
94, 78, 255], List[81, 91, 77, 255], List[73, 85, 82, 255], List[74, 62, 58, \
255], List[72, 56, 49, 255], List[85, 76, 62, 255], List[90, 81, 64, 255], \
List[92, 81, 65, 255], List[91, 79, 64, 255], List[90, 78, 64, 255], List[86, \
74, 62, 255], List[68, 61, 49, 255], List[57, 47, 47, 255], List[137, 78, \
134, 255], List[135, 94, 155, 255], List[125, 94, 155, 255], List[128, 102, \
154, 255], List[137, 104, 155, 255], List[146, 100, 153, 255], List[144, 79, \
151, 255], List[127, 56, 138, 255], List[97, 49, 117, 255], List[52, 49, 55, \
255], List[80, 80, 74, 255], List[89, 89, 84, 255], List[93, 94, 89, 255], \
List[95, 95, 90, 255], List[90, 91, 86, 255], List[91, 91, 86, 255], List[89, \
89, 83, 255], List[41, 46, 59, 255], List[29, 29, 55, 255], List[46, 38, 60, \
255], List[48, 39, 67, 255], List[47, 38, 69, 255], List[47, 44, 62, 255], \
List[47, 38, 68, 255], List[48, 39, 69, 255], List[47, 39, 60, 255], List[35, \
34, 59, 255], List[23, 30, 50, 255], List[20, 32, 43, 255], List[24, 34, 51, \
255], List[35, 29, 56, 255], List[36, 21, 59, 255], List[35, 26, 58, 255], \
List[36, 31, 54, 255], List[42, 43, 56, 255], List[78, 90, 59, 255], List[77, \
90, 51, 255], List[75, 92, 52, 255], List[69, 96, 54, 255]], List[List[78, \
88, 81, 255], List[79, 88, 80, 255], List[74, 82, 76, 255], List[73, 80, 73, \
255], List[73, 81, 72, 255], List[73, 79, 73, 255], List[72, 77, 71, 255], \
List[72, 78, 73, 255], List[68, 73, 70, 255], List[67, 72, 66, 255], List[82, \
99, 64, 255], List[101, 106, 84, 255], List[119, 113, 104, 255], List[116, \
112, 101, 255], List[120, 116, 104, 255], List[109, 105, 99, 255], List[70, \
66, 78, 255], List[68, 63, 85, 255], List[68, 63, 90, 255], List[76, 73, 89, \
255], List[86, 82, 86, 255], List[83, 82, 87, 255], List[83, 83, 84, 255], \
List[81, 89, 77, 255], List[79, 87, 72, 255], List[70, 84, 72, 255], List[85, \
68, 56, 255], List[93, 77, 63, 255], List[84, 76, 63, 255], List[91, 80, 65, \
255], List[89, 78, 63, 255], List[89, 76, 62, 255], List[88, 75, 62, 255], \
List[83, 72, 60, 255], List[67, 59, 46, 255], List[61, 47, 53, 255], \
List[129, 73, 152, 255], List[124, 84, 158, 255], List[123, 93, 154, 255], \
List[133, 98, 152, 255], List[139, 104, 148, 255], List[143, 100, 149, 255], \
List[142, 78, 144, 255], List[119, 56, 127, 255], List[92, 50, 107, 255], \
List[51, 47, 53, 255], List[76, 77, 71, 255], List[89, 89, 85, 255], List[92, \
93, 88, 255], List[95, 95, 91, 255], List[93, 93, 88, 255], List[91, 92, 87, \
255], List[90, 89, 83, 255], List[41, 46, 61, 255], List[32, 29, 53, 255], \
List[38, 37, 54, 255], List[35, 34, 59, 255], List[39, 32, 57, 255], List[41, \
46, 60, 255], List[40, 34, 58, 255], List[36, 34, 60, 255], List[37, 38, 54, \
255], List[39, 34, 58, 255], List[26, 29, 57, 255], List[22, 24, 47, 255], \
List[22, 36, 46, 255], List[29, 41, 55, 255], List[36, 32, 63, 255], List[31, \
28, 60, 255], List[38, 28, 60, 255], List[46, 49, 64, 255], List[83, 91, 59, \
255], List[80, 90, 51, 255], List[77, 89, 48, 255], List[76, 92, 49, 255]], \
List[List[80, 89, 80, 255], List[81, 88, 80, 255], List[81, 90, 80, 255], \
List[78, 87, 77, 255], List[77, 82, 74, 255], List[77, 81, 77, 255], List[74, \
79, 75, 255], List[72, 77, 75, 255], List[69, 73, 72, 255], List[72, 75, 69, \
255], List[83, 100, 64, 255], List[97, 103, 83, 255], List[113, 109, 105, \
255], List[112, 110, 103, 255], List[112, 109, 103, 255], List[114, 112, 105, \
255], List[110, 106, 103, 255], List[91, 88, 95, 255], List[75, 74, 89, 255], \
List[70, 68, 89, 255], List[80, 76, 88, 255], List[77, 77, 87, 255], List[73, \
75, 86, 255], List[68, 78, 82, 255], List[67, 82, 75, 255], List[61, 81, 72, \
255], List[75, 67, 56, 255], List[87, 73, 60, 255], List[86, 79, 65, 255], \
List[87, 76, 63, 255], List[86, 74, 59, 255], List[88, 75, 61, 255], List[88, \
77, 62, 255], List[82, 70, 58, 255], List[59, 52, 41, 255], List[62, 47, 55, \
255], List[132, 73, 153, 255], List[128, 85, 152, 255], List[129, 94, 150, \
255], List[139, 94, 151, 255], List[144, 99, 152, 255], List[146, 96, 149, \
255], List[139, 75, 147, 255], List[117, 55, 123, 255], List[90, 47, 94, \
255], List[53, 49, 53, 255], List[75, 77, 72, 255], List[87, 87, 84, 255], \
List[91, 92, 87, 255], List[94, 95, 90, 255], List[91, 92, 87, 255], List[89, \
91, 86, 255], List[91, 90, 85, 255], List[41, 42, 64, 255], List[23, 24, 57, \
255], List[23, 29, 51, 255], List[25, 28, 48, 255], List[28, 38, 55, 255], \
List[33, 47, 68, 255], List[29, 38, 56, 255], List[23, 29, 49, 255], List[20, \
28, 52, 255], List[23, 26, 62, 255], List[22, 22, 59, 255], List[14, 18, 53, \
255], List[21, 22, 54, 255], List[20, 31, 56, 255], List[25, 36, 71, 255], \
List[30, 36, 70, 255], List[25, 28, 64, 255], List[48, 51, 75, 255], List[95, \
94, 80, 255], List[92, 94, 80, 255], List[95, 95, 82, 255], List[94, 96, 83, \
255]], List[List[87, 91, 76, 255], List[86, 88, 80, 255], List[83, 91, 80, \
255], List[82, 92, 79, 255], List[81, 87, 79, 255], List[82, 84, 79, 255], \
List[85, 83, 77, 255], List[78, 79, 74, 255], List[75, 75, 72, 255], List[74, \
77, 68, 255], List[83, 101, 65, 255], List[96, 102, 82, 255], List[112, 108, \
103, 255], List[112, 109, 103, 255], List[111, 108, 103, 255], List[106, 103, \
99, 255], List[100, 97, 92, 255], List[87, 85, 80, 255], List[73, 72, 69, \
255], List[54, 54, 57, 255], List[57, 56, 65, 255], List[71, 71, 80, 255], \
List[70, 73, 82, 255], List[65, 72, 80, 255], List[66, 76, 79, 255], List[67, \
80, 78, 255], List[70, 70, 65, 255], List[82, 71, 60, 255], List[86, 78, 64, \
255], List[89, 79, 64, 255], List[93, 81, 66, 255], List[91, 79, 64, 255], \
List[87, 74, 61, 255], List[82, 71, 58, 255], List[60, 55, 42, 255], List[70, \
52, 62, 255], List[136, 77, 152, 255], List[129, 81, 153, 255], List[137, 79, \
150, 255], List[137, 83, 144, 255], List[119, 96, 103, 255], List[123, 90, \
105, 255], List[129, 73, 133, 255], List[117, 52, 120, 255], List[87, 39, 82, \
255], List[50, 47, 50, 255], List[74, 75, 72, 255], List[85, 85, 81, 255], \
List[89, 90, 85, 255], List[92, 92, 88, 255], List[89, 90, 85, 255], List[89, \
90, 85, 255], List[89, 88, 81, 255], List[38, 43, 63, 255], List[15, 25, 55, \
255], List[21, 32, 53, 255], List[24, 38, 54, 255], List[30, 45, 62, 255], \
List[36, 45, 70, 255], List[30, 46, 61, 255], List[26, 41, 57, 255], List[26, \
36, 57, 255], List[29, 37, 63, 255], List[30, 35, 61, 255], List[33, 36, 58, \
255], List[41, 38, 66, 255], List[45, 45, 66, 255], List[46, 58, 71, 255], \
List[55, 67, 78, 255], List[61, 68, 78, 255], List[81, 79, 83, 255], \
List[103, 100, 93, 255], List[104, 101, 96, 255], List[107, 104, 98, 255], \
List[111, 108, 101, 255]], List[List[89, 89, 76, 255], List[88, 88, 76, 255], \
List[86, 90, 75, 255], List[86, 90, 75, 255], List[82, 88, 76, 255], List[81, \
84, 80, 255], List[83, 82, 77, 255], List[80, 81, 75, 255], List[76, 77, 72, \
255], List[71, 76, 66, 255], List[79, 96, 63, 255], List[96, 103, 80, 255], \
List[114, 110, 101, 255], List[111, 109, 99, 255], List[106, 105, 96, 255], \
List[105, 102, 91, 255], List[106, 104, 93, 255], List[99, 97, 88, 255], \
List[97, 96, 86, 255], List[98, 97, 85, 255], List[96, 95, 84, 255], List[93, \
91, 82, 255], List[92, 92, 84, 255], List[92, 90, 82, 255], List[92, 89, 80, \
255], List[87, 85, 78, 255], List[80, 76, 67, 255], List[81, 70, 59, 255], \
List[82, 71, 60, 255], List[87, 76, 62, 255], List[86, 75, 61, 255], List[83, \
70, 57, 255], List[85, 73, 58, 255], List[77, 66, 54, 255], List[52, 47, 36, \
255], List[77, 58, 67, 255], List[131, 76, 149, 255], List[129, 70, 142, \
255], List[137, 74, 143, 255], List[130, 82, 126, 255], List[92, 94, 48, \
255], List[91, 97, 43, 255], List[116, 79, 100, 255], List[120, 54, 123, \
255], List[89, 38, 81, 255], List[49, 48, 49, 255], List[73, 75, 71, 255], \
List[89, 89, 85, 255], List[91, 91, 87, 255], List[92, 93, 88, 255], List[94, \
94, 90, 255], List[90, 90, 85, 255], List[85, 85, 80, 255], List[88, 87, 83, \
255], List[91, 90, 83, 255], List[93, 90, 84, 255], List[93, 91, 84, 255], \
List[95, 92, 85, 255], List[94, 92, 83, 255], List[96, 93, 84, 255], List[98, \
96, 88, 255], List[101, 98, 88, 255], List[103, 99, 90, 255], List[102, 99, \
89, 255], List[105, 103, 92, 255], List[107, 105, 94, 255], List[107, 105, \
93, 255], List[108, 104, 92, 255], List[114, 109, 97, 255], List[113, 110, \
97, 255], List[111, 109, 97, 255], List[112, 110, 99, 255], List[112, 110, \
99, 255], List[112, 110, 98, 255], List[113, 110, 100, 255]], List[List[90, \
91, 75, 255], List[88, 90, 76, 255], List[84, 91, 72, 255], List[84, 91, 72, \
255], List[82, 86, 74, 255], List[82, 84, 77, 255], List[80, 83, 75, 255], \
List[78, 81, 72, 255], List[76, 77, 70, 255], List[71, 75, 63, 255], List[77, \
96, 62, 255], List[96, 103, 81, 255], List[114, 110, 103, 255], List[109, \
106, 98, 255], List[115, 112, 102, 255], List[115, 111, 102, 255], List[109, \
107, 97, 255], List[112, 109, 101, 255], List[105, 103, 95, 255], List[105, \
102, 95, 255], List[108, 106, 97, 255], List[103, 100, 91, 255], List[101, \
99, 92, 255], List[99, 96, 90, 255], List[98, 95, 87, 255], List[90, 89, 83, \
255], List[80, 74, 66, 255], List[81, 72, 59, 255], List[84, 73, 60, 255], \
List[87, 75, 62, 255], List[85, 73, 61, 255], List[85, 73, 60, 255], List[84, \
72, 58, 255], List[76, 64, 54, 255], List[47, 45, 34, 255], List[83, 60, 69, \
255], List[136, 65, 140, 255], List[126, 66, 132, 255], List[131, 64, 143, \
255], List[115, 79, 98, 255], List[90, 94, 49, 255], List[94, 96, 52, 255], \
List[115, 75, 101, 255], List[110, 56, 124, 255], List[78, 41, 77, 255], \
List[49, 49, 49, 255], List[74, 75, 71, 255], List[82, 82, 77, 255], List[92, \
93, 88, 255], List[95, 95, 90, 255], List[89, 89, 85, 255], List[89, 90, 85, \
255], List[84, 85, 81, 255], List[99, 97, 91, 255], List[111, 108, 100, 255], \
List[112, 109, 101, 255], List[114, 110, 102, 255], List[114, 110, 101, 255], \
List[115, 112, 104, 255], List[118, 114, 107, 255], List[119, 114, 107, 255], \
List[116, 113, 105, 255], List[120, 116, 108, 255], List[119, 116, 108, 255], \
List[118, 115, 106, 255], List[119, 117, 109, 255], List[121, 118, 111, 255], \
List[117, 115, 109, 255], List[119, 116, 110, 255], List[122, 118, 112, 255], \
List[118, 115, 110, 255], List[121, 117, 111, 255], List[121, 118, 112, 255], \
List[124, 120, 112, 255], List[117, 115, 109, 255]]], \
\\\"UnsignedInteger8\\\"], List[List[0, 43.`], List[75.`, 0]], List[0, 255], \
Rule[ColorFunction, RGBColor], Rule[ImageResolution, List[72, 72]]], \
BoxForm`ImageTag[\\\"Byte\\\", Rule[ColorSpace, \\\"RGB\\\"], \
Rule[Interleaving, True], Rule[MetaInformation, \
Association[Rule[\\\"Exif\\\", Association[Rule[\\\"ImageWidth\\\", 1200], \
Rule[\\\"ImageLength\\\", 680], Rule[\\\"XResolution\\\", 72], \
Rule[\\\"YResolution\\\", 72], Rule[\\\"ResolutionUnit\\\", \\\"Inch\\\"], \
Rule[\\\"Software\\\", \\\"Created with the Wolfram Language : \
www.wolfram.com\\\"], Rule[\\\"DateTime\\\", DateObject[List[2022, 12, 6, 13, \
38, 24.`], \\\"Instant\\\", \\\"Gregorian\\\", -5.`]], \
Rule[\\\"TimeZoneOffset\\\", -5]]], Rule[\\\"Comments\\\", \
Association[Rule[\\\"Software\\\", \\\"Created with the Wolfram Language : \
www.wolfram.com\\\"], Rule[\\\"Creation Time\\\", DateObject[List[2022, 12, \
6, 13, 38, 24.`], \\\"Instant\\\"]]]]]]], Rule[Selectable, False]], \
Rule[DefaultBaseStyle, \\\"ImageGraphics\\\"], Rule[ImageSizeRaw, List[75.`, \
43.`]], Rule[PlotRange, List[List[0, 75.`], List[0, 43.`]]]]}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"iRight\\\\\\\"\\\", \\\"\[Rule]\\\", \
GraphicsBox[TagBox[RasterBox[NumericArray[List[List[List[80, 91, 97, 255], \
List[86, 96, 98, 255], List[87, 98, 99, 255], List[91, 100, 99, 255], \
List[85, 94, 98, 255], List[84, 94, 98, 255], List[89, 100, 99, 255], \
List[89, 100, 99, 255], List[87, 95, 99, 255], List[92, 102, 100, 255], \
List[103, 114, 102, 255], List[100, 112, 101, 255], List[96, 108, 100, 255], \
List[93, 105, 100, 255], List[100, 110, 102, 255], List[95, 106, 100, 255], \
List[92, 103, 100, 255], List[88, 98, 99, 255], List[89, 99, 100, 255], \
List[89, 100, 100, 255], List[89, 100, 100, 255], List[91, 101, 101, 255], \
List[91, 101, 100, 255], List[97, 107, 102, 255], List[99, 109, 101, 255], \
List[98, 106, 101, 255], List[99, 109, 102, 255], List[89, 100, 100, 255], \
List[97, 106, 102, 255], List[96, 106, 102, 255], List[91, 101, 101, 255], \
List[91, 101, 101, 255], List[96, 105, 102, 255], List[101, 110, 103, 255], \
List[98, 108, 102, 255], List[98, 109, 102, 255], List[103, 114, 103, 255], \
List[100, 111, 102, 255], List[90, 101, 101, 255], List[91, 103, 101, 255], \
List[93, 105, 102, 255], List[97, 109, 101, 255], List[98, 110, 102, 255], \
List[91, 102, 102, 255], List[93, 103, 103, 255], List[92, 102, 102, 255], \
List[92, 101, 102, 255], List[101, 108, 103, 255], List[102, 110, 104, 255], \
List[105, 113, 105, 255], List[122, 128, 108, 255], List[128, 131, 108, 255], \
List[115, 121, 106, 255], List[107, 116, 104, 255], List[98, 107, 103, 255], \
List[87, 97, 101, 255], List[87, 97, 101, 255], List[92, 103, 102, 255], \
List[96, 107, 102, 255], List[94, 106, 101, 255], List[99, 111, 102, 255], \
List[92, 105, 102, 255], List[87, 99, 101, 255], List[86, 97, 101, 255], \
List[83, 97, 101, 255], List[83, 96, 102, 255], List[83, 95, 101, 255], \
List[82, 93, 101, 255], List[80, 92, 100, 255], List[83, 95, 100, 255], \
List[85, 98, 100, 255], List[89, 104, 100, 255], List[86, 103, 98, 255], \
List[86, 99, 97, 255], List[86, 100, 99, 255]], List[List[80, 91, 97, 255], \
List[85, 95, 99, 255], List[85, 95, 98, 255], List[89, 99, 99, 255], List[97, \
105, 100, 255], List[100, 107, 102, 255], List[98, 104, 101, 255], List[88, \
95, 99, 255], List[93, 101, 100, 255], List[93, 104, 100, 255], List[96, 107, \
100, 255], List[99, 111, 101, 255], List[104, 116, 102, 255], List[94, 106, \
99, 255], List[97, 109, 100, 255], List[97, 109, 100, 255], List[96, 108, \
101, 255], List[99, 109, 101, 255], List[100, 109, 100, 255], List[95, 105, \
100, 255], List[91, 101, 100, 255], List[88, 98, 100, 255], List[87, 97, 99, \
255], List[103, 112, 102, 255], List[105, 114, 102, 255], List[103, 111, 103, \
255], List[104, 111, 102, 255], List[92, 102, 101, 255], List[88, 99, 100, \
255], List[94, 105, 102, 255], List[92, 102, 101, 255], List[94, 103, 102, \
255], List[101, 109, 104, 255], List[93, 104, 102, 255], List[101, 112, 103, \
255], List[105, 118, 103, 255], List[105, 118, 102, 255], List[104, 116, 104, \
255], List[92, 104, 101, 255], List[90, 104, 101, 255], List[94, 106, 102, \
255], List[93, 106, 102, 255], List[96, 109, 103, 255], List[97, 109, 104, \
255], List[92, 102, 103, 255], List[89, 100, 103, 255], List[89, 98, 102, \
255], List[90, 99, 101, 255], List[99, 109, 103, 255], List[100, 111, 104, \
255], List[116, 123, 107, 255], List[118, 124, 106, 255], List[109, 118, 105, \
255], List[108, 118, 104, 255], List[106, 117, 104, 255], List[101, 111, 104, \
255], List[93, 105, 102, 255], List[87, 99, 102, 255], List[92, 104, 102, \
255], List[97, 108, 103, 255], List[93, 104, 103, 255], List[85, 97, 101, \
255], List[84, 96, 100, 255], List[82, 94, 100, 255], List[79, 91, 98, 255], \
List[83, 94, 99, 255], List[83, 96, 99, 255], List[81, 94, 99, 255], List[83, \
97, 101, 255], List[92, 104, 104, 255], List[97, 112, 109, 255], List[97, \
114, 112, 255], List[99, 110, 117, 255], List[95, 113, 118, 255], List[100, \
112, 117, 255]], List[List[82, 90, 98, 255], List[79, 90, 97, 255], List[79, \
89, 97, 255], List[79, 89, 97, 255], List[90, 98, 99, 255], List[106, 114, \
102, 255], List[106, 114, 103, 255], List[104, 112, 103, 255], List[100, 111, \
102, 255], List[91, 104, 99, 255], List[87, 99, 99, 255], List[91, 103, 100, \
255], List[93, 105, 99, 255], List[102, 112, 102, 255], List[96, 106, 100, \
255], List[89, 100, 99, 255], List[91, 102, 100, 255], List[96, 106, 100, \
255], List[97, 107, 100, 255], List[99, 109, 101, 255], List[93, 103, 100, \
255], List[91, 100, 100, 255], List[91, 101, 100, 255], List[93, 103, 101, \
255], List[98, 107, 103, 255], List[100, 107, 101, 255], List[98, 107, 101, \
255], List[96, 106, 102, 255], List[92, 102, 101, 255], List[91, 102, 102, \
255], List[91, 102, 102, 255], List[98, 106, 103, 255], List[104, 110, 104, \
255], List[90, 101, 102, 255], List[82, 95, 100, 255], List[91, 103, 101, \
255], List[100, 113, 103, 255], List[91, 105, 101, 255], List[89, 100, 101, \
255], List[88, 99, 100, 255], List[91, 102, 102, 255], List[89, 102, 102, \
255], List[86, 100, 101, 255], List[97, 108, 103, 255], List[98, 109, 104, \
255], List[97, 107, 104, 255], List[92, 103, 103, 255], List[93, 104, 102, \
255], List[97, 106, 103, 255], List[101, 110, 104, 255], List[101, 110, 105, \
255], List[103, 112, 105, 255], List[111, 119, 107, 255], List[109, 118, 105, \
255], List[104, 116, 104, 255], List[105, 117, 105, 255], List[106, 117, 106, \
255], List[85, 96, 100, 255], List[84, 94, 99, 255], List[88, 99, 100, 255], \
List[90, 102, 100, 255], List[91, 103, 102, 255], List[87, 100, 105, 255], \
List[92, 106, 108, 255], List[99, 109, 116, 255], List[101, 114, 120, 255], \
List[106, 113, 122, 255], List[111, 123, 130, 255], List[126, 128, 139, 255], \
List[137, 132, 135, 255], List[129, 132, 139, 255], List[128, 129, 149, 255], \
List[131, 131, 150, 255], List[120, 136, 146, 255], List[123, 130, 137, \
255]], List[List[77, 87, 95, 255], List[79, 90, 98, 255], List[81, 90, 97, \
255], List[81, 90, 98, 255], List[83, 92, 98, 255], List[86, 95, 99, 255], \
List[86, 97, 99, 255], List[93, 105, 101, 255], List[93, 104, 100, 255], \
List[91, 102, 100, 255], List[98, 110, 102, 255], List[99, 110, 101, 255], \
List[96, 106, 101, 255], List[94, 102, 101, 255], List[101, 109, 102, 255], \
List[96, 106, 100, 255], List[101, 108, 101, 255], List[94, 103, 100, 255], \
List[92, 102, 100, 255], List[95, 105, 101, 255], List[97, 107, 101, 255], \
List[103, 111, 102, 255], List[96, 105, 101, 255], List[87, 97, 96, 255], \
List[96, 107, 101, 255], List[98, 108, 105, 255], List[96, 106, 102, 255], \
List[86, 98, 100, 255], List[92, 102, 102, 255], List[94, 100, 103, 255], \
List[92, 100, 102, 255], List[99, 106, 104, 255], List[103, 111, 104, 255], \
List[98, 107, 103, 255], List[86, 97, 102, 255], List[82, 94, 101, 255], \
List[88, 99, 101, 255], List[90, 101, 102, 255], List[89, 100, 101, 255], \
List[87, 100, 102, 255], List[93, 106, 102, 255], List[92, 107, 102, 255], \
List[93, 106, 103, 255], List[88, 98, 101, 255], List[86, 97, 101, 255], \
List[89, 99, 102, 255], List[88, 99, 102, 255], List[94, 105, 104, 255], \
List[95, 106, 103, 255], List[112, 119, 105, 255], List[97, 108, 103, 255], \
List[96, 107, 103, 255], List[101, 111, 105, 255], List[99, 109, 104, 255], \
List[91, 103, 103, 255], List[95, 107, 103, 255], List[97, 111, 101, 255], \
List[99, 111, 105, 255], List[91, 105, 110, 255], List[99, 110, 116, 255], \
List[116, 120, 132, 255], List[119, 127, 139, 255], List[124, 130, 138, 255], \
List[140, 132, 136, 255], List[140, 131, 148, 255], List[135, 132, 148, 255], \
List[132, 130, 146, 255], List[135, 128, 149, 255], List[139, 125, 148, 255], \
List[140, 120, 144, 255], List[138, 119, 144, 255], List[138, 129, 144, 255], \
List[132, 130, 142, 255], List[131, 130, 140, 255], List[126, 128, 142, \
255]], List[List[92, 100, 110, 255], List[80, 88, 96, 255], List[82, 92, 100, \
255], List[81, 90, 99, 255], List[85, 94, 98, 255], List[93, 102, 100, 255], \
List[93, 104, 100, 255], List[88, 100, 99, 255], List[85, 95, 98, 255], \
List[88, 98, 100, 255], List[87, 99, 99, 255], List[85, 96, 99, 255], \
List[89, 98, 100, 255], List[90, 100, 101, 255], List[91, 102, 100, 255], \
List[99, 110, 102, 255], List[101, 110, 102, 255], List[100, 109, 101, 255], \
List[94, 105, 100, 255], List[93, 104, 101, 255], List[86, 97, 99, 255], \
List[93, 102, 101, 255], List[92, 102, 100, 255], List[121, 127, 118, 255], \
List[109, 113, 103, 255], List[85, 87, 80, 255], List[104, 113, 101, 255], \
List[94, 107, 102, 255], List[97, 105, 102, 255], List[98, 104, 103, 255], \
List[89, 98, 101, 255], List[90, 100, 101, 255], List[99, 108, 104, 255], \
List[101, 111, 103, 255], List[96, 107, 103, 255], List[86, 97, 102, 255], \
List[85, 95, 101, 255], List[85, 95, 101, 255], List[90, 101, 102, 255], \
List[94, 106, 103, 255], List[101, 113, 104, 255], List[102, 114, 104, 255], \
List[101, 113, 105, 255], List[101, 113, 105, 255], List[92, 103, 103, 255], \
List[87, 98, 103, 255], List[86, 96, 101, 255], List[90, 101, 103, 255], \
List[90, 103, 103, 255], List[93, 104, 102, 255], List[109, 114, 106, 255], \
List[99, 106, 104, 255], List[97, 107, 105, 255], List[98, 110, 105, 255], \
List[87, 99, 102, 255], List[101, 112, 108, 255], List[113, 124, 127, 255], \
List[122, 129, 143, 255], List[116, 134, 143, 255], List[122, 129, 137, 255], \
List[131, 132, 147, 255], List[137, 129, 147, 255], List[138, 123, 145, 255], \
List[139, 116, 144, 255], List[136, 122, 145, 255], List[130, 122, 147, 255], \
List[137, 127, 146, 255], List[131, 122, 146, 255], List[132, 122, 145, 255], \
List[138, 117, 145, 255], List[139, 117, 145, 255], List[138, 129, 142, 255], \
List[131, 131, 143, 255], List[128, 130, 140, 255], List[124, 128, 138, \
255]], List[List[97, 113, 140, 255], List[97, 110, 129, 255], List[79, 86, \
91, 255], List[82, 92, 98, 255], List[92, 101, 104, 255], List[90, 100, 100, \
255], List[91, 103, 100, 255], List[94, 107, 101, 255], List[90, 102, 100, \
255], List[87, 96, 99, 255], List[84, 92, 99, 255], List[87, 96, 101, 255], \
List[85, 96, 100, 255], List[86, 98, 99, 255], List[86, 97, 99, 255], \
List[86, 96, 100, 255], List[88, 99, 100, 255], List[95, 106, 101, 255], \
List[91, 101, 101, 255], List[89, 100, 100, 255], List[90, 100, 101, 255], \
List[86, 96, 101, 255], List[94, 101, 101, 255], List[180, 175, 163, 255], \
List[96, 91, 86, 255], List[60, 58, 55, 255], List[96, 104, 96, 255], \
List[107, 116, 105, 255], List[102, 107, 103, 255], List[90, 99, 102, 255], \
List[88, 99, 102, 255], List[87, 98, 101, 255], List[93, 104, 102, 255], \
List[92, 105, 102, 255], List[99, 109, 103, 255], List[90, 101, 101, 255], \
List[80, 93, 100, 255], List[83, 95, 101, 255], List[81, 93, 100, 255], \
List[83, 94, 100, 255], List[82, 94, 100, 255], List[87, 100, 100, 255], \
List[86, 99, 100, 255], List[92, 102, 102, 255], List[102, 110, 104, 255], \
List[86, 98, 101, 255], List[81, 95, 100, 255], List[82, 95, 100, 255], \
List[89, 101, 103, 255], List[85, 99, 100, 255], List[91, 103, 102, 255], \
List[96, 104, 104, 255], List[96, 105, 103, 255], List[94, 106, 102, 255], \
List[94, 106, 101, 255], List[124, 120, 128, 255], List[138, 129, 147, 255], \
List[130, 129, 144, 255], List[129, 132, 140, 255], List[124, 126, 142, 255], \
List[129, 129, 142, 255], List[139, 132, 141, 255], List[141, 120, 144, 255], \
List[137, 116, 145, 255], List[137, 122, 144, 255], List[133, 124, 146, 255], \
List[131, 126, 144, 255], List[132, 126, 144, 255], List[136, 126, 146, 255], \
List[140, 124, 137, 255], List[130, 125, 137, 255], List[126, 126, 144, 255], \
List[127, 127, 146, 255], List[114, 132, 143, 255], List[114, 126, 133, \
255]], List[List[58, 78, 112, 255], List[76, 89, 111, 255], List[68, 61, 57, \
255], List[68, 61, 56, 255], List[79, 82, 79, 255], List[88, 97, 98, 255], \
List[91, 103, 101, 255], List[86, 99, 99, 255], List[88, 100, 99, 255], \
List[93, 104, 101, 255], List[88, 98, 100, 255], List[87, 99, 100, 255], \
List[91, 103, 100, 255], List[93, 105, 101, 255], List[91, 102, 100, 255], \
List[89, 99, 100, 255], List[87, 98, 100, 255], List[85, 96, 100, 255], \
List[89, 100, 101, 255], List[89, 100, 101, 255], List[91, 102, 101, 255], \
List[94, 105, 104, 255], List[82, 85, 82, 255], List[129, 125, 116, 255], \
List[88, 84, 79, 255], List[75, 74, 71, 255], List[112, 108, 97, 255], \
List[119, 120, 110, 255], List[132, 126, 112, 255], List[119, 119, 108, 255], \
List[86, 98, 100, 255], List[92, 101, 102, 255], List[84, 95, 99, 255], \
List[90, 99, 101, 255], List[89, 97, 101, 255], List[109, 113, 109, 255], \
List[119, 120, 112, 255], List[103, 106, 105, 255], List[101, 105, 105, 255], \
List[105, 108, 107, 255], List[117, 115, 110, 255], List[128, 125, 114, 255], \
List[140, 137, 118, 255], List[108, 123, 107, 255], List[103, 123, 107, 255], \
List[122, 121, 112, 255], List[157, 147, 125, 255], List[162, 149, 126, 255], \
List[181, 163, 134, 255], List[157, 143, 124, 255], List[180, 161, 133, 255], \
List[172, 151, 128, 255], List[167, 149, 127, 255], List[165, 148, 125, 255], \
List[172, 157, 126, 255], List[148, 129, 143, 255], List[137, 120, 142, 255], \
List[132, 131, 140, 255], List[128, 130, 139, 255], List[121, 127, 137, 255], \
List[128, 129, 143, 255], List[131, 127, 145, 255], List[128, 125, 140, 255], \
List[136, 127, 134, 255], List[135, 128, 141, 255], List[123, 130, 140, 255], \
List[118, 124, 133, 255], List[116, 128, 135, 255], List[121, 129, 139, 255], \
List[129, 135, 135, 255], List[124, 137, 136, 255], List[113, 129, 144, 255], \
List[119, 125, 145, 255], List[114, 129, 145, 255], List[112, 130, 138, \
255]], List[List[53, 66, 96, 255], List[66, 67, 79, 255], List[59, 54, 51, \
255], List[58, 49, 44, 255], List[47, 39, 37, 255], List[84, 90, 81, 255], \
List[103, 114, 105, 255], List[87, 96, 98, 255], List[83, 92, 98, 255], \
List[88, 98, 99, 255], List[90, 102, 99, 255], List[91, 103, 100, 255], \
List[85, 97, 99, 255], List[85, 95, 100, 255], List[85, 96, 99, 255], \
List[86, 98, 100, 255], List[88, 100, 100, 255], List[87, 99, 100, 255], \
List[89, 99, 101, 255], List[86, 96, 100, 255], List[86, 96, 99, 255], \
List[92, 104, 106, 255], List[54, 62, 66, 255], List[103, 100, 93, 255], \
List[109, 106, 99, 255], List[61, 61, 59, 255], List[115, 105, 92, 255], \
List[177, 156, 128, 255], List[203, 174, 138, 255], List[204, 177, 137, 255], \
List[176, 157, 129, 255], List[182, 161, 130, 255], List[187, 163, 134, 255], \
List[191, 168, 136, 255], List[192, 168, 135, 255], List[206, 179, 141, 255], \
List[227, 193, 149, 255], List[216, 182, 143, 255], List[223, 187, 146, 255], \
List[225, 190, 146, 255], List[232, 193, 149, 255], List[219, 189, 145, 255], \
List[135, 147, 113, 255], List[108, 137, 105, 255], List[102, 134, 102, 255], \
List[151, 156, 121, 255], List[231, 192, 149, 255], List[224, 188, 147, 255], \
List[220, 187, 145, 255], List[221, 188, 145, 255], List[214, 182, 143, 255], \
List[211, 181, 143, 255], List[210, 180, 142, 255], List[206, 176, 140, 255], \
List[206, 178, 139, 255], List[152, 133, 140, 255], List[127, 120, 141, 255], \
List[126, 128, 144, 255], List[112, 130, 139, 255], List[116, 125, 132, 255], \
List[122, 126, 144, 255], List[116, 127, 144, 255], List[117, 132, 140, 255], \
List[127, 139, 135, 255], List[119, 131, 137, 255], List[111, 128, 134, 255], \
List[113, 119, 129, 255], List[112, 123, 131, 255], List[113, 129, 134, 255], \
List[124, 131, 135, 255], List[124, 140, 135, 255], List[114, 140, 138, 255], \
List[110, 128, 140, 255], List[113, 123, 140, 255], List[108, 128, 137, \
255]], List[List[49, 60, 86, 255], List[51, 59, 77, 255], List[59, 55, 54, \
255], List[55, 48, 44, 255], List[51, 45, 42, 255], List[90, 102, 87, 255], \
List[106, 118, 103, 255], List[97, 108, 100, 255], List[91, 105, 101, 255], \
List[86, 100, 102, 255], List[90, 105, 103, 255], List[92, 105, 103, 255], \
List[87, 101, 100, 255], List[87, 99, 99, 255], List[90, 102, 100, 255], \
List[88, 100, 100, 255], List[89, 99, 100, 255], List[89, 100, 101, 255], \
List[90, 102, 101, 255], List[90, 101, 101, 255], List[89, 99, 101, 255], \
List[89, 99, 103, 255], List[76, 87, 92, 255], List[60, 60, 58, 255], \
List[119, 114, 106, 255], List[66, 62, 59, 255], List[59, 57, 56, 255], \
List[126, 112, 98, 255], List[173, 148, 125, 255], List[189, 159, 129, 255], \
List[208, 176, 138, 255], List[214, 179, 141, 255], List[222, 184, 145, 255], \
List[222, 186, 144, 255], List[220, 187, 143, 255], List[206, 178, 139, 255], \
List[193, 167, 136, 255], List[186, 162, 133, 255], List[167, 150, 128, 255], \
List[156, 144, 123, 255], List[153, 141, 123, 255], List[116, 127, 103, 255], \
List[82, 111, 85, 255], List[97, 121, 94, 255], List[97, 122, 94, 255], \
List[96, 123, 95, 255], List[107, 115, 107, 255], List[104, 109, 108, 255], \
List[100, 106, 106, 255], List[103, 110, 105, 255], List[96, 104, 105, 255], \
List[88, 97, 103, 255], List[93, 102, 104, 255], List[96, 105, 105, 255], \
List[90, 99, 102, 255], List[121, 123, 126, 255], List[120, 131, 141, 255], \
List[115, 124, 144, 255], List[112, 131, 142, 255], List[113, 128, 137, 255], \
List[116, 125, 142, 255], List[110, 133, 141, 255], List[120, 142, 135, 255], \
List[129, 133, 134, 255], List[125, 132, 132, 255], List[118, 127, 128, 255], \
List[120, 119, 136, 255], List[121, 122, 133, 255], List[123, 132, 127, 255], \
List[133, 134, 133, 255], List[138, 136, 136, 255], List[127, 144, 133, 255], \
List[113, 133, 134, 255], List[111, 119, 132, 255], List[110, 121, 131, \
255]], List[List[38, 49, 74, 255], List[33, 44, 66, 255], List[60, 55, 54, \
255], List[60, 52, 42, 255], List[61, 55, 48, 255], List[108, 115, 104, 255], \
List[121, 121, 107, 255], List[119, 119, 104, 255], List[111, 112, 99, 255], \
List[96, 96, 88, 255], List[101, 91, 81, 255], List[94, 93, 88, 255], \
List[99, 107, 104, 255], List[91, 106, 104, 255], List[89, 103, 101, 255], \
List[87, 101, 99, 255], List[91, 105, 100, 255], List[87, 101, 101, 255], \
List[83, 97, 99, 255], List[84, 96, 100, 255], List[85, 95, 100, 255], \
List[83, 93, 99, 255], List[88, 100, 103, 255], List[78, 88, 86, 255], \
List[73, 77, 71, 255], List[88, 90, 81, 255], List[100, 101, 87, 255], \
List[123, 117, 103, 255], List[120, 114, 105, 255], List[159, 142, 119, 255], \
List[188, 164, 131, 255], List[154, 140, 122, 255], List[137, 130, 117, 255], \
List[118, 118, 110, 255], List[107, 110, 106, 255], List[105, 107, 106, 255], \
List[88, 94, 100, 255], List[105, 106, 107, 255], List[100, 104, 106, 255], \
List[74, 86, 98, 255], List[76, 90, 98, 255], List[79, 102, 82, 255], \
List[84, 105, 80, 255], List[86, 109, 84, 255], List[89, 113, 87, 255], \
List[90, 115, 86, 255], List[83, 103, 95, 255], List[85, 97, 103, 255], \
List[85, 98, 102, 255], List[86, 98, 103, 255], List[83, 94, 102, 255], \
List[80, 91, 102, 255], List[83, 94, 102, 255], List[94, 104, 105, 255], \
List[90, 100, 102, 255], List[110, 122, 124, 255], List[117, 140, 138, 255], \
List[109, 125, 138, 255], List[110, 123, 135, 255], List[107, 127, 134, 255], \
List[110, 125, 134, 255], List[116, 139, 133, 255], List[134, 141, 134, 255], \
List[141, 135, 139, 255], List[129, 138, 133, 255], List[127, 131, 134, 255], \
List[130, 126, 136, 255], List[130, 127, 136, 255], List[126, 134, 136, 255], \
List[132, 141, 139, 255], List[144, 140, 140, 255], List[139, 138, 140, 255], \
List[136, 136, 138, 255], List[125, 126, 135, 255], List[120, 125, 132, \
255]], List[List[48, 53, 59, 255], List[55, 61, 71, 255], List[64, 64, 56, \
255], List[52, 49, 39, 255], List[67, 57, 50, 255], List[113, 87, 75, 255], \
List[96, 81, 69, 255], List[107, 77, 63, 255], List[118, 66, 53, 255], \
List[118, 69, 53, 255], List[107, 61, 47, 255], List[105, 68, 52, 255], \
List[114, 86, 70, 255], List[120, 100, 86, 255], List[117, 117, 105, 255], \
List[106, 112, 107, 255], List[104, 111, 104, 255], List[104, 111, 104, 255], \
List[102, 108, 104, 255], List[104, 108, 106, 255], List[100, 105, 104, 255], \
List[97, 102, 102, 255], List[99, 106, 103, 255], List[104, 112, 106, 255], \
List[105, 112, 104, 255], List[111, 116, 105, 255], List[123, 125, 111, 255], \
List[126, 125, 110, 255], List[116, 117, 107, 255], List[137, 132, 114, 255], \
List[117, 119, 110, 255], List[80, 92, 99, 255], List[83, 94, 100, 255], \
List[87, 97, 101, 255], List[89, 99, 101, 255], List[118, 117, 111, 255], \
List[131, 127, 119, 255], List[108, 109, 108, 255], List[121, 118, 111, 255], \
List[103, 106, 108, 255], List[95, 106, 104, 255], List[91, 114, 88, 255], \
List[76, 96, 74, 255], List[77, 98, 75, 255], List[81, 102, 79, 255], \
List[81, 103, 78, 255], List[84, 102, 87, 255], List[90, 100, 105, 255], \
List[90, 102, 103, 255], List[92, 102, 104, 255], List[91, 100, 103, 255], \
List[89, 98, 103, 255], List[90, 99, 103, 255], List[95, 104, 105, 255], \
List[95, 102, 103, 255], List[121, 122, 123, 255], List[131, 141, 135, 255], \
List[114, 128, 131, 255], List[114, 119, 130, 255], List[112, 123, 131, 255], \
List[123, 128, 132, 255], List[136, 138, 139, 255], List[142, 139, 140, 255], \
List[140, 143, 141, 255], List[126, 136, 142, 255], List[124, 130, 142, 255], \
List[122, 125, 139, 255], List[120, 126, 140, 255], List[121, 129, 142, 255], \
List[127, 131, 142, 255], List[138, 140, 139, 255], List[137, 138, 141, 255], \
List[131, 141, 141, 255], List[126, 138, 137, 255], List[122, 128, 134, \
255]], List[List[80, 74, 59, 255], List[95, 90, 76, 255], List[76, 73, 68, \
255], List[78, 77, 76, 255], List[102, 70, 61, 255], List[111, 67, 51, 255], \
List[74, 58, 51, 255], List[84, 59, 54, 255], List[102, 65, 55, 255], \
List[110, 68, 54, 255], List[104, 65, 55, 255], List[103, 69, 57, 255], \
List[77, 57, 52, 255], List[111, 62, 50, 255], List[117, 70, 56, 255], \
List[122, 99, 88, 255], List[125, 121, 112, 255], List[135, 125, 114, 255], \
List[143, 133, 117, 255], List[134, 128, 115, 255], List[105, 108, 104, 255], \
List[99, 105, 103, 255], List[102, 110, 104, 255], List[105, 109, 103, 255], \
List[113, 113, 105, 255], List[117, 116, 107, 255], List[126, 121, 108, 255], \
List[135, 127, 111, 255], List[127, 123, 110, 255], List[141, 133, 115, 255], \
List[133, 126, 112, 255], List[111, 112, 107, 255], List[110, 113, 108, 255], \
List[110, 112, 109, 255], List[102, 107, 106, 255], List[111, 111, 108, 255], \
List[173, 169, 157, 255], List[130, 130, 125, 255], List[92, 97, 100, 255], \
List[90, 100, 99, 255], List[86, 110, 86, 255], List[82, 104, 80, 255], \
List[69, 88, 68, 255], List[69, 89, 68, 255], List[71, 91, 71, 255], List[70, \
90, 68, 255], List[78, 94, 78, 255], List[98, 107, 106, 255], List[98, 106, \
104, 255], List[103, 109, 106, 255], List[105, 111, 106, 255], List[108, 110, \
106, 255], List[109, 112, 107, 255], List[111, 113, 107, 255], List[111, 112, \
106, 255], List[127, 130, 128, 255], List[141, 140, 141, 255], List[132, 132, \
136, 255], List[124, 128, 133, 255], List[119, 123, 133, 255], List[129, 135, \
137, 255], List[134, 141, 141, 255], List[137, 138, 140, 255], List[135, 133, \
139, 255], List[120, 125, 140, 255], List[111, 127, 140, 255], List[108, 128, \
140, 255], List[107, 128, 140, 255], List[109, 125, 138, 255], List[116, 124, \
138, 255], List[129, 126, 140, 255], List[129, 137, 141, 255], List[126, 141, \
139, 255], List[124, 143, 137, 255], List[125, 137, 134, 255]], List[List[91, \
88, 56, 255], List[100, 99, 61, 255], List[97, 89, 64, 255], List[93, 83, 73, \
255], List[100, 63, 54, 255], List[106, 69, 58, 255], List[116, 74, 61, 255], \
List[106, 67, 57, 255], List[111, 74, 62, 255], List[108, 69, 54, 255], \
List[115, 74, 60, 255], List[114, 74, 61, 255], List[109, 70, 60, 255], \
List[109, 71, 59, 255], List[109, 65, 51, 255], List[86, 67, 60, 255], \
List[112, 113, 105, 255], List[108, 109, 104, 255], List[108, 110, 105, 255], \
List[107, 110, 105, 255], List[95, 102, 102, 255], List[91, 100, 101, 255], \
List[93, 104, 102, 255], List[99, 107, 102, 255], List[110, 114, 104, 255], \
List[124, 122, 107, 255], List[135, 128, 110, 255], List[133, 126, 109, 255], \
List[140, 131, 110, 255], List[158, 145, 119, 255], List[171, 159, 140, 255], \
List[139, 125, 108, 255], List[126, 116, 99, 255], List[116, 108, 94, 255], \
List[107, 101, 92, 255], List[98, 96, 91, 255], List[112, 108, 100, 255], \
List[117, 114, 106, 255], List[96, 88, 80, 255], List[88, 75, 59, 255], \
List[54, 67, 55, 255], List[42, 55, 43, 255], List[60, 76, 59, 255], List[62, \
80, 62, 255], List[62, 79, 62, 255], List[59, 77, 58, 255], List[72, 86, 71, \
255], List[120, 118, 110, 255], List[120, 118, 110, 255], List[123, 120, 110, \
255], List[124, 121, 110, 255], List[124, 122, 110, 255], List[125, 122, 111, \
255], List[124, 121, 110, 255], List[128, 123, 111, 255], List[127, 128, 130, \
255], List[134, 137, 140, 255], List[125, 141, 137, 255], List[122, 136, 133, \
255], List[123, 124, 132, 255], List[123, 138, 137, 255], List[128, 141, 139, \
255], List[128, 134, 140, 255], List[122, 122, 139, 255], List[107, 120, 136, \
255], List[106, 125, 135, 255], List[106, 131, 137, 255], List[106, 131, 137, \
255], List[107, 124, 134, 255], List[103, 116, 135, 255], List[111, 118, 134, \
255], List[119, 131, 138, 255], List[126, 137, 141, 255], List[129, 140, 138, \
255], List[127, 139, 138, 255]], List[List[91, 82, 56, 255], List[91, 87, 57, \
255], List[103, 87, 60, 255], List[82, 64, 48, 255], List[81, 54, 47, 255], \
List[115, 74, 59, 255], List[65, 56, 51, 255], List[88, 62, 56, 255], \
List[102, 63, 52, 255], List[111, 67, 53, 255], List[96, 59, 49, 255], \
List[102, 65, 53, 255], List[89, 64, 56, 255], List[101, 67, 58, 255], \
List[112, 72, 57, 255], List[106, 73, 65, 255], List[101, 105, 100, 255], \
List[98, 107, 103, 255], List[101, 108, 103, 255], List[98, 106, 103, 255], \
List[96, 103, 102, 255], List[92, 101, 101, 255], List[94, 104, 102, 255], \
List[98, 107, 103, 255], List[110, 113, 104, 255], List[128, 122, 109, 255], \
List[146, 135, 114, 255], List[142, 130, 115, 255], List[157, 139, 122, 255], \
List[163, 146, 123, 255], List[141, 134, 117, 255], List[138, 129, 118, 255], \
List[118, 138, 169, 255], List[138, 151, 171, 255], List[113, 112, 111, 255], \
List[105, 96, 83, 255], List[113, 110, 103, 255], List[158, 154, 144, 255], \
List[137, 124, 108, 255], List[111, 94, 76, 255], List[138, 130, 114, 255], \
List[50, 57, 48, 255], List[43, 57, 44, 255], List[57, 72, 56, 255], List[52, \
67, 52, 255], List[46, 62, 48, 255], List[69, 79, 64, 255], List[140, 131, \
117, 255], List[139, 129, 115, 255], List[140, 130, 114, 255], List[140, 130, \
115, 255], List[142, 131, 115, 255], List[139, 127, 114, 255], List[139, 128, \
116, 255], List[146, 133, 115, 255], List[123, 123, 129, 255], List[123, 130, \
138, 255], List[126, 140, 136, 255], List[127, 140, 137, 255], List[131, 135, \
136, 255], List[130, 138, 139, 255], List[123, 138, 141, 255], List[115, 130, \
136, 255], List[100, 121, 131, 255], List[101, 122, 133, 255], List[106, 131, \
134, 255], List[106, 133, 139, 255], List[106, 134, 139, 255], List[108, 133, \
133, 255], List[100, 129, 132, 255], List[91, 128, 131, 255], List[108, 132, \
133, 255], List[114, 140, 135, 255], List[122, 144, 137, 255], List[126, 141, \
141, 255]], List[List[74, 62, 49, 255], List[66, 60, 45, 255], List[79, 67, \
47, 255], List[68, 65, 48, 255], List[81, 72, 63, 255], List[104, 64, 49, \
255], List[96, 74, 58, 255], List[105, 64, 52, 255], List[116, 65, 51, 255], \
List[117, 71, 57, 255], List[114, 65, 52, 255], List[103, 67, 53, 255], \
List[90, 68, 55, 255], List[104, 64, 54, 255], List[112, 65, 51, 255], \
List[93, 65, 58, 255], List[91, 101, 96, 255], List[97, 107, 101, 255], \
List[94, 105, 100, 255], List[92, 104, 100, 255], List[94, 105, 101, 255], \
List[93, 105, 102, 255], List[97, 106, 101, 255], List[101, 108, 102, 255], \
List[110, 112, 103, 255], List[125, 121, 107, 255], List[127, 122, 104, 255], \
List[138, 131, 103, 255], List[152, 147, 91, 255], List[142, 142, 74, 255], \
List[113, 106, 64, 255], List[123, 116, 120, 255], List[154, 165, 186, 255], \
List[145, 148, 168, 255], List[106, 106, 124, 255], List[87, 76, 69, 255], \
List[107, 103, 98, 255], List[128, 124, 118, 255], List[152, 141, 126, 255], \
List[154, 140, 119, 255], List[163, 147, 125, 255], List[112, 108, 91, 255], \
List[29, 44, 34, 255], List[46, 59, 46, 255], List[46, 57, 45, 255], List[32, \
46, 36, 255], List[81, 84, 70, 255], List[165, 147, 127, 255], List[158, 144, \
121, 255], List[155, 145, 121, 255], List[158, 148, 123, 255], List[155, 149, \
123, 255], List[153, 148, 122, 255], List[149, 146, 119, 255], List[156, 147, \
119, 255], List[114, 129, 129, 255], List[104, 128, 138, 255], List[121, 142, \
140, 255], List[122, 143, 140, 255], List[124, 142, 138, 255], List[123, 140, \
136, 255], List[116, 134, 131, 255], List[113, 125, 128, 255], List[98, 122, \
128, 255], List[110, 126, 123, 255], List[122, 122, 122, 255], List[119, 113, \
129, 255], List[121, 111, 128, 255], List[126, 114, 117, 255], List[121, 110, \
111, 255], List[119, 98, 114, 255], List[131, 95, 120, 255], List[143, 94, \
121, 255], List[137, 96, 122, 255], List[128, 96, 115, 255]], List[List[82, \
74, 54, 255], List[72, 64, 49, 255], List[77, 67, 44, 255], List[64, 66, 54, \
255], List[94, 74, 68, 255], List[111, 69, 54, 255], List[100, 64, 53, 255], \
List[89, 68, 56, 255], List[98, 62, 54, 255], List[103, 67, 58, 255], \
List[97, 61, 53, 255], List[106, 69, 55, 255], List[110, 71, 56, 255], \
List[102, 67, 55, 255], List[119, 70, 56, 255], List[108, 66, 54, 255], \
List[97, 100, 103, 255], List[98, 106, 111, 255], List[100, 103, 108, 255], \
List[99, 104, 109, 255], List[100, 104, 106, 255], List[97, 102, 104, 255], \
List[97, 103, 108, 255], List[99, 103, 107, 255], List[104, 109, 107, 255], \
List[116, 117, 110, 255], List[108, 103, 102, 255], List[101, 108, 58, 255], \
List[88, 109, 25, 255], List[73, 66, 57, 255], List[44, 29, 33, 255], \
List[52, 36, 45, 255], List[80, 69, 58, 255], List[77, 65, 53, 255], List[60, \
51, 51, 255], List[72, 71, 66, 255], List[74, 77, 67, 255], List[102, 100, \
89, 255], List[133, 129, 110, 255], List[137, 132, 112, 255], List[138, 131, \
113, 255], List[144, 134, 117, 255], List[78, 80, 70, 255], List[23, 33, 28, \
255], List[20, 29, 24, 255], List[17, 27, 23, 255], List[114, 109, 95, 255], \
List[152, 141, 122, 255], List[154, 133, 114, 255], List[149, 117, 104, 255], \
List[151, 115, 102, 255], List[150, 105, 101, 255], List[152, 104, 102, 255], \
List[148, 97, 112, 255], List[135, 97, 106, 255], List[131, 94, 98, 255], \
List[135, 92, 88, 255], List[141, 86, 90, 255], List[167, 64, 103, 255], \
List[175, 59, 103, 255], List[177, 56, 101, 255], List[166, 48, 94, 255], \
List[159, 42, 93, 255], List[146, 39, 88, 255], List[134, 37, 88, 255], \
List[143, 35, 87, 255], List[149, 37, 85, 255], List[146, 54, 94, 255], \
List[145, 52, 99, 255], List[148, 33, 90, 255], List[163, 23, 82, 255], \
List[174, 21, 84, 255], List[182, 21, 94, 255], List[177, 32, 94, 255], \
List[153, 46, 88, 255]], List[List[92, 90, 54, 255], List[94, 92, 60, 255], \
List[94, 66, 48, 255], List[61, 82, 62, 255], List[95, 92, 78, 255], \
List[110, 60, 50, 255], List[93, 54, 47, 255], List[113, 71, 57, 255], \
List[107, 67, 56, 255], List[98, 66, 58, 255], List[110, 68, 56, 255], \
List[110, 67, 55, 255], List[103, 60, 51, 255], List[97, 64, 54, 255], \
List[96, 63, 57, 255], List[95, 64, 53, 255], List[112, 85, 148, 255], \
List[98, 94, 174, 255], List[123, 89, 168, 255], List[130, 83, 157, 255], \
List[135, 60, 126, 255], List[108, 57, 140, 255], List[93, 58, 163, 255], \
List[94, 79, 153, 255], List[112, 81, 150, 255], List[105, 86, 145, 255], \
List[102, 79, 161, 255], List[94, 61, 109, 255], List[63, 68, 40, 255], \
List[42, 25, 33, 255], List[46, 26, 38, 255], List[44, 25, 36, 255], List[29, \
19, 23, 255], List[57, 51, 39, 255], List[55, 48, 37, 255], List[70, 55, 64, \
255], List[103, 76, 113, 255], List[115, 102, 109, 255], List[112, 102, 110, \
255], List[116, 110, 111, 255], List[122, 120, 109, 255], List[126, 126, 109, \
255], List[133, 132, 113, 255], List[103, 105, 91, 255], List[68, 73, 65, \
255], List[86, 88, 81, 255], List[128, 122, 112, 255], List[122, 128, 113, \
255], List[155, 73, 89, 255], List[161, 22, 69, 255], List[161, 43, 66, 255], \
List[162, 38, 72, 255], List[173, 23, 79, 255], List[177, 28, 106, 255], \
List[155, 41, 101, 255], List[143, 54, 84, 255], List[145, 64, 60, 255], \
List[152, 52, 71, 255], List[198, 28, 101, 255], List[191, 43, 103, 255], \
List[198, 40, 106, 255], List[191, 31, 104, 255], List[166, 33, 99, 255], \
List[152, 27, 92, 255], List[131, 25, 92, 255], List[115, 35, 107, 255], \
List[122, 50, 103, 255], List[119, 65, 109, 255], List[112, 62, 118, 255], \
List[119, 48, 113, 255], List[140, 34, 105, 255], List[165, 33, 94, 255], \
List[174, 31, 84, 255], List[178, 40, 83, 255], List[173, 54, 84, 255]], \
List[List[84, 82, 61, 255], List[83, 82, 62, 255], List[98, 70, 59, 255], \
List[45, 99, 66, 255], List[87, 113, 77, 255], List[105, 59, 55, 255], \
List[98, 62, 55, 255], List[118, 68, 54, 255], List[99, 68, 59, 255], \
List[79, 49, 47, 255], List[101, 68, 59, 255], List[117, 71, 57, 255], \
List[99, 64, 56, 255], List[118, 68, 56, 255], List[113, 73, 61, 255], \
List[116, 70, 53, 255], List[118, 81, 131, 255], List[116, 92, 163, 255], \
List[111, 80, 161, 255], List[126, 52, 144, 255], List[120, 47, 130, 255], \
List[110, 50, 146, 255], List[103, 60, 149, 255], List[108, 77, 137, 255], \
List[133, 77, 151, 255], List[125, 75, 138, 255], List[106, 67, 140, 255], \
List[97, 59, 124, 255], List[59, 44, 44, 255], List[63, 36, 71, 255], \
List[48, 25, 46, 255], List[47, 32, 42, 255], List[34, 26, 38, 255], List[30, \
32, 25, 255], List[38, 30, 37, 255], List[108, 64, 116, 255], List[127, 78, \
144, 255], List[113, 74, 110, 255], List[101, 57, 127, 255], List[98, 53, \
133, 255], List[109, 65, 134, 255], List[100, 70, 124, 255], List[100, 72, \
110, 255], List[107, 94, 118, 255], List[116, 106, 117, 255], List[112, 113, \
112, 255], List[109, 111, 106, 255], List[107, 122, 109, 255], List[154, 67, \
95, 255], List[149, 23, 85, 255], List[136, 51, 94, 255], List[134, 53, 104, \
255], List[155, 32, 92, 255], List[177, 30, 86, 255], List[181, 41, 87, 255], \
List[171, 55, 87, 255], List[160, 69, 73, 255], List[166, 66, 80, 255], \
List[194, 54, 116, 255], List[185, 53, 120, 255], List[189, 55, 118, 255], \
List[180, 55, 110, 255], List[156, 46, 104, 255], List[136, 39, 93, 255], \
List[139, 29, 90, 255], List[133, 35, 109, 255], List[113, 54, 124, 255], \
List[95, 63, 124, 255], List[95, 64, 130, 255], List[102, 45, 117, 255], \
List[114, 33, 110, 255], List[142, 36, 113, 255], List[157, 36, 97, 255], \
List[157, 29, 95, 255], List[157, 42, 93, 255]], List[List[70, 70, 70, 255], \
List[67, 67, 62, 255], List[78, 65, 72, 255], List[49, 127, 89, 255], \
List[67, 116, 77, 255], List[111, 60, 54, 255], List[101, 63, 54, 255], \
List[62, 41, 43, 255], List[74, 49, 51, 255], List[82, 57, 56, 255], List[67, \
44, 47, 255], List[73, 47, 46, 255], List[112, 71, 58, 255], List[91, 56, 51, \
255], List[67, 47, 51, 255], List[84, 56, 48, 255], List[104, 61, 107, 255], \
List[112, 71, 145, 255], List[96, 52, 135, 255], List[105, 45, 132, 255], \
List[108, 59, 151, 255], List[113, 55, 145, 255], List[102, 61, 134, 255], \
List[124, 72, 125, 255], List[132, 78, 148, 255], List[128, 75, 134, 255], \
List[106, 68, 129, 255], List[94, 54, 119, 255], List[70, 36, 86, 255], \
List[101, 55, 133, 255], List[59, 39, 63, 255], List[57, 58, 50, 255], \
List[80, 79, 71, 255], List[81, 65, 95, 255], List[108, 78, 144, 255], \
List[110, 73, 137, 255], List[118, 77, 132, 255], List[98, 81, 115, 255], \
List[94, 62, 135, 255], List[104, 48, 133, 255], List[100, 53, 136, 255], \
List[97, 45, 125, 255], List[87, 37, 120, 255], List[85, 48, 121, 255], \
List[89, 46, 119, 255], List[93, 83, 109, 255], List[109, 117, 106, 255], \
List[104, 121, 108, 255], List[154, 80, 107, 255], List[147, 29, 98, 255], \
List[108, 57, 113, 255], List[102, 61, 119, 255], List[126, 36, 110, 255], \
List[158, 37, 98, 255], List[166, 36, 90, 255], List[166, 48, 93, 255], \
List[164, 69, 97, 255], List[165, 70, 97, 255], List[164, 46, 111, 255], \
List[156, 36, 122, 255], List[157, 39, 116, 255], List[159, 48, 107, 255], \
List[140, 39, 103, 255], List[120, 34, 99, 255], List[122, 39, 92, 255], \
List[146, 32, 98, 255], List[135, 40, 103, 255], List[107, 57, 116, 255], \
List[91, 65, 129, 255], List[90, 43, 116, 255], List[103, 35, 113, 255], \
List[130, 34, 118, 255], List[137, 36, 109, 255], List[132, 33, 101, 255], \
List[137, 30, 97, 255]], List[List[41, 46, 54, 255], List[54, 54, 44, 255], \
List[52, 42, 43, 255], List[39, 135, 87, 255], List[68, 131, 86, 255], \
List[101, 56, 50, 255], List[95, 64, 54, 255], List[102, 70, 58, 255], \
List[92, 56, 54, 255], List[105, 62, 57, 255], List[93, 59, 53, 255], \
List[108, 76, 63, 255], List[100, 67, 55, 255], List[93, 60, 52, 255], \
List[95, 61, 58, 255], List[87, 56, 48, 255], List[88, 54, 97, 255], \
List[112, 66, 143, 255], List[96, 59, 134, 255], List[112, 94, 117, 255], \
List[114, 85, 127, 255], List[112, 60, 136, 255], List[98, 59, 146, 255], \
List[99, 75, 139, 255], List[123, 73, 148, 255], List[106, 79, 142, 255], \
List[88, 69, 149, 255], List[103, 48, 153, 255], List[112, 52, 145, 255], \
List[131, 42, 125, 255], List[114, 87, 105, 255], List[100, 97, 108, 255], \
List[103, 78, 143, 255], List[112, 91, 162, 255], List[109, 86, 163, 255], \
List[87, 71, 147, 255], List[96, 77, 129, 255], List[86, 76, 132, 255], \
List[81, 48, 150, 255], List[91, 46, 135, 255], List[104, 43, 114, 255], \
List[117, 42, 121, 255], List[97, 62, 142, 255], List[100, 74, 129, 255], \
List[96, 66, 126, 255], List[100, 96, 112, 255], List[107, 116, 105, 255], \
List[105, 121, 106, 255], List[141, 84, 110, 255], List[141, 33, 93, 255], \
List[121, 46, 108, 255], List[90, 60, 124, 255], List[105, 56, 109, 255], \
List[134, 33, 115, 255], List[135, 30, 103, 255], List[133, 20, 96, 255], \
List[140, 45, 98, 255], List[135, 59, 108, 255], List[146, 37, 116, 255], \
List[143, 40, 119, 255], List[145, 39, 120, 255], List[138, 46, 114, 255], \
List[136, 47, 106, 255], List[134, 42, 113, 255], List[126, 50, 119, 255], \
List[132, 46, 123, 255], List[138, 34, 110, 255], List[133, 43, 109, 255], \
List[100, 57, 118, 255], List[79, 50, 125, 255], List[91, 36, 129, 255], \
List[100, 36, 118, 255], List[108, 37, 103, 255], List[112, 34, 109, 255], \
List[106, 26, 106, 255]], List[List[52, 50, 53, 255], List[52, 46, 41, 255], \
List[51, 45, 40, 255], List[42, 129, 86, 255], List[51, 131, 79, 255], \
List[96, 59, 52, 255], List[95, 65, 55, 255], List[109, 75, 62, 255], \
List[92, 55, 53, 255], List[100, 58, 55, 255], List[94, 60, 54, 255], \
List[107, 74, 62, 255], List[94, 66, 56, 255], List[104, 71, 59, 255], \
List[102, 65, 60, 255], List[95, 57, 48, 255], List[115, 84, 108, 255], \
List[111, 83, 156, 255], List[109, 89, 141, 255], List[123, 122, 106, 255], \
List[121, 123, 103, 255], List[107, 114, 106, 255], List[91, 95, 123, 255], \
List[88, 90, 136, 255], List[93, 83, 143, 255], List[86, 75, 151, 255], \
List[90, 56, 165, 255], List[97, 54, 159, 255], List[115, 54, 121, 255], \
List[133, 59, 131, 255], List[123, 83, 152, 255], List[125, 81, 164, 255], \
List[116, 86, 174, 255], List[86, 91, 168, 255], List[99, 83, 164, 255], \
List[84, 61, 153, 255], List[89, 77, 133, 255], List[84, 63, 136, 255], \
List[92, 56, 155, 255], List[97, 55, 129, 255], List[118, 55, 108, 255], \
List[106, 67, 112, 255], List[87, 62, 91, 255], List[84, 73, 127, 255], \
List[88, 72, 138, 255], List[101, 103, 112, 255], List[104, 115, 105, 255], \
List[107, 124, 107, 255], List[126, 80, 109, 255], List[134, 33, 112, 255], \
List[126, 56, 108, 255], List[108, 102, 102, 255], List[100, 84, 102, 255], \
List[107, 48, 115, 255], List[118, 63, 107, 255], List[125, 75, 120, 255], \
List[118, 44, 107, 255], List[114, 42, 116, 255], List[127, 57, 120, 255], \
List[129, 53, 120, 255], List[125, 57, 120, 255], List[116, 64, 120, 255], \
List[123, 62, 112, 255], List[136, 60, 123, 255], List[121, 55, 123, 255], \
List[112, 41, 121, 255], List[113, 38, 135, 255], List[107, 44, 136, 255], \
List[112, 38, 128, 255], List[96, 31, 137, 255], List[90, 27, 140, 255], \
List[87, 35, 134, 255], List[92, 41, 117, 255], List[99, 46, 120, 255], \
List[92, 34, 118, 255]], List[List[47, 46, 46, 255], List[47, 39, 40, 255], \
List[50, 55, 45, 255], List[36, 117, 82, 255], List[52, 122, 76, 255], \
List[106, 66, 53, 255], List[94, 58, 50, 255], List[59, 40, 43, 255], \
List[77, 51, 51, 255], List[87, 59, 57, 255], List[67, 44, 47, 255], List[63, \
42, 44, 255], List[101, 64, 52, 255], List[99, 61, 51, 255], List[79, 51, 52, \
255], List[96, 58, 50, 255], List[86, 70, 98, 255], List[93, 85, 171, 255], \
List[117, 101, 131, 255], List[124, 117, 104, 255], List[110, 111, 110, 255], \
List[98, 110, 111, 255], List[92, 106, 115, 255], List[91, 109, 119, 255], \
List[91, 112, 120, 255], List[90, 103, 123, 255], List[100, 90, 136, 255], \
List[112, 83, 135, 255], List[115, 66, 123, 255], List[126, 63, 151, 255], \
List[132, 84, 161, 255], List[129, 87, 160, 255], List[110, 78, 164, 255], \
List[88, 69, 134, 255], List[108, 80, 132, 255], List[108, 46, 153, 255], \
List[109, 71, 129, 255], List[111, 65, 146, 255], List[108, 69, 135, 255], \
List[95, 63, 100, 255], List[89, 60, 89, 255], List[83, 58, 90, 255], \
List[92, 62, 115, 255], List[81, 72, 138, 255], List[91, 73, 141, 255], \
List[109, 108, 114, 255], List[107, 117, 105, 255], List[110, 119, 106, 255], \
List[114, 95, 106, 255], List[120, 64, 110, 255], List[100, 73, 100, 255], \
List[77, 81, 66, 255], List[90, 88, 81, 255], List[152, 154, 144, 255], \
List[157, 164, 152, 255], List[182, 186, 162, 255], List[116, 83, 134, 255], \
List[91, 37, 127, 255], List[109, 54, 131, 255], List[105, 41, 131, 255], \
List[106, 46, 134, 255], List[111, 49, 139, 255], List[114, 51, 136, 255], \
List[128, 63, 140, 255], List[115, 58, 126, 255], List[88, 39, 108, 255], \
List[98, 42, 118, 255], List[94, 60, 132, 255], List[96, 66, 120, 255], \
List[95, 67, 120, 255], List[82, 71, 108, 255], List[79, 86, 89, 255], \
List[90, 66, 111, 255], List[106, 50, 140, 255], List[98, 55, 138, 255]], \
List[List[45, 46, 43, 255], List[43, 33, 37, 255], List[43, 66, 49, 255], \
List[47, 140, 74, 255], List[57, 124, 84, 255], List[108, 72, 64, 255], \
List[96, 53, 49, 255], List[109, 67, 57, 255], List[82, 55, 53, 255], \
List[69, 46, 47, 255], List[101, 67, 59, 255], List[109, 66, 53, 255], \
List[104, 69, 57, 255], List[101, 65, 56, 255], List[88, 56, 54, 255], \
List[67, 47, 44, 255], List[88, 62, 86, 255], List[94, 75, 153, 255], \
List[119, 114, 119, 255], List[114, 113, 109, 255], List[101, 106, 113, 255], \
List[96, 102, 115, 255], List[92, 105, 120, 255], List[90, 109, 122, 255], \
List[92, 108, 122, 255], List[93, 105, 119, 255], List[96, 105, 114, 255], \
List[97, 109, 115, 255], List[100, 106, 117, 255], List[99, 89, 121, 255], \
List[107, 80, 125, 255], List[131, 97, 137, 255], List[133, 100, 148, 255], \
List[116, 97, 119, 255], List[117, 92, 110, 255], List[128, 68, 133, 255], \
List[109, 80, 108, 255], List[96, 75, 102, 255], List[84, 73, 86, 255], \
List[74, 66, 75, 255], List[85, 65, 92, 255], List[99, 79, 106, 255], \
List[91, 82, 101, 255], List[79, 70, 84, 255], List[84, 74, 87, 255], \
List[88, 88, 85, 255], List[88, 89, 84, 255], List[93, 94, 84, 255], List[83, \
78, 85, 255], List[89, 62, 97, 255], List[76, 55, 83, 255], List[43, 35, 51, \
255], List[54, 54, 66, 255], List[129, 153, 153, 255], List[139, 161, 165, \
255], List[155, 176, 168, 255], List[120, 108, 158, 255], List[88, 46, 144, \
255], List[93, 52, 131, 255], List[88, 53, 115, 255], List[90, 64, 117, 255], \
List[96, 76, 123, 255], List[100, 84, 120, 255], List[99, 98, 111, 255], \
List[90, 104, 100, 255], List[77, 113, 89, 255], List[74, 118, 78, 255], \
List[68, 120, 74, 255], List[62, 115, 65, 255], List[60, 112, 57, 255], \
List[59, 110, 56, 255], List[53, 116, 49, 255], List[75, 82, 95, 255], \
List[96, 46, 151, 255], List[97, 69, 140, 255]], List[List[32, 36, 32, 255], \
List[49, 55, 40, 255], List[109, 120, 76, 255], List[90, 112, 74, 255], \
List[44, 70, 51, 255], List[57, 56, 43, 255], List[85, 68, 49, 255], List[89, \
61, 45, 255], List[96, 65, 54, 255], List[102, 64, 57, 255], List[112, 70, \
57, 255], List[115, 67, 52, 255], List[101, 58, 50, 255], List[98, 58, 50, \
255], List[118, 70, 56, 255], List[108, 69, 53, 255], List[118, 71, 78, 255], \
List[112, 81, 127, 255], List[119, 118, 110, 255], List[111, 110, 109, 255], \
List[103, 104, 111, 255], List[95, 106, 113, 255], List[92, 110, 120, 255], \
List[94, 106, 122, 255], List[96, 101, 123, 255], List[96, 101, 120, 255], \
List[97, 101, 117, 255], List[95, 106, 118, 255], List[87, 101, 112, 255], \
List[88, 103, 107, 255], List[131, 144, 124, 255], List[110, 116, 98, 255], \
List[95, 97, 81, 255], List[126, 120, 111, 255], List[84, 75, 78, 255], \
List[59, 55, 55, 255], List[69, 65, 70, 255], List[87, 72, 93, 255], List[69, \
61, 67, 255], List[67, 54, 75, 255], List[72, 61, 79, 255], List[68, 55, 62, \
255], List[71, 47, 64, 255], List[73, 48, 82, 255], List[98, 68, 98, 255], \
List[106, 111, 103, 255], List[113, 116, 107, 255], List[121, 127, 107, 255], \
List[97, 90, 118, 255], List[101, 48, 154, 255], List[89, 56, 138, 255], \
List[59, 43, 124, 255], List[83, 72, 122, 255], List[128, 153, 153, 255], \
List[144, 158, 160, 255], List[153, 158, 152, 255], List[136, 127, 134, 255], \
List[83, 97, 92, 255], List[71, 104, 81, 255], List[77, 113, 73, 255], \
List[73, 118, 68, 255], List[65, 114, 66, 255], List[65, 118, 71, 255], \
List[64, 122, 75, 255], List[65, 121, 74, 255], List[64, 125, 72, 255], \
List[61, 121, 71, 255], List[60, 119, 69, 255], List[60, 113, 67, 255], \
List[61, 111, 63, 255], List[60, 108, 63, 255], List[55, 110, 58, 255], \
List[68, 90, 85, 255], List[102, 49, 149, 255], List[98, 65, 138, 255]], \
List[List[26, 30, 29, 255], List[57, 63, 45, 255], List[151, 151, 108, 255], \
List[84, 85, 68, 255], List[40, 46, 31, 255], List[52, 65, 43, 255], List[50, \
67, 46, 255], List[20, 34, 30, 255], List[63, 47, 44, 255], List[95, 62, 54, \
255], List[86, 59, 52, 255], List[85, 66, 55, 255], List[104, 66, 52, 255], \
List[102, 63, 51, 255], List[87, 61, 54, 255], List[91, 60, 51, 255], \
List[92, 63, 70, 255], List[106, 91, 117, 255], List[119, 114, 106, 255], \
List[113, 111, 105, 255], List[105, 110, 108, 255], List[95, 110, 113, 255], \
List[95, 106, 119, 255], List[95, 99, 124, 255], List[95, 93, 123, 255], \
List[94, 95, 122, 255], List[87, 98, 117, 255], List[81, 97, 111, 255], \
List[78, 91, 108, 255], List[149, 157, 135, 255], List[186, 193, 155, 255], \
List[99, 88, 91, 255], List[83, 59, 81, 255], List[84, 59, 78, 255], List[57, \
47, 53, 255], List[60, 58, 60, 255], List[96, 75, 115, 255], List[85, 61, \
109, 255], List[90, 65, 86, 255], List[70, 46, 67, 255], List[64, 47, 76, \
255], List[110, 68, 106, 255], List[117, 62, 110, 255], List[75, 59, 100, \
255], List[111, 67, 106, 255], List[128, 126, 112, 255], List[131, 131, 113, \
255], List[138, 136, 110, 255], List[97, 105, 119, 255], List[63, 59, 158, \
255], List[86, 75, 148, 255], List[116, 111, 120, 255], List[125, 113, 113, \
255], List[121, 110, 105, 255], List[117, 106, 98, 255], List[102, 93, 88, \
255], List[80, 78, 78, 255], List[65, 101, 64, 255], List[58, 109, 66, 255], \
List[68, 117, 63, 255], List[67, 114, 64, 255], List[63, 107, 73, 255], \
List[64, 117, 75, 255], List[64, 122, 73, 255], List[63, 121, 74, 255], \
List[60, 120, 73, 255], List[60, 118, 72, 255], List[62, 119, 72, 255], \
List[63, 116, 67, 255], List[66, 116, 64, 255], List[60, 114, 61, 255], \
List[58, 114, 58, 255], List[59, 101, 75, 255], List[85, 44, 147, 255], \
List[87, 49, 145, 255]], List[List[50, 61, 40, 255], List[41, 46, 38, 255], \
List[51, 51, 49, 255], List[47, 53, 44, 255], List[44, 55, 38, 255], List[53, \
61, 43, 255], List[50, 61, 43, 255], List[30, 43, 33, 255], List[77, 51, 45, \
255], List[115, 70, 56, 255], List[104, 59, 49, 255], List[98, 64, 52, 255], \
List[89, 62, 52, 255], List[98, 67, 53, 255], List[101, 66, 53, 255], \
List[113, 65, 51, 255], List[101, 66, 64, 255], List[109, 94, 113, 255], \
List[119, 106, 106, 255], List[106, 114, 104, 255], List[97, 114, 105, 255], \
List[91, 112, 111, 255], List[92, 109, 122, 255], List[93, 101, 124, 255], \
List[97, 100, 125, 255], List[98, 100, 123, 255], List[97, 102, 115, 255], \
List[97, 106, 111, 255], List[102, 96, 101, 255], List[129, 115, 108, 255], \
List[106, 84, 102, 255], List[70, 43, 72, 255], List[22, 14, 24, 255], \
List[65, 66, 62, 255], List[115, 109, 104, 255], List[87, 71, 79, 255], \
List[71, 57, 69, 255], List[57, 46, 65, 255], List[88, 53, 91, 255], \
List[108, 65, 93, 255], List[101, 64, 104, 255], List[131, 79, 115, 255], \
List[89, 66, 102, 255], List[65, 60, 99, 255], List[100, 75, 101, 255], \
List[135, 133, 111, 255], List[141, 138, 116, 255], List[147, 143, 114, 255], \
List[103, 107, 118, 255], List[39, 40, 138, 255], List[71, 61, 129, 255], \
List[83, 88, 88, 255], List[80, 83, 87, 255], List[74, 77, 79, 255], List[87, \
88, 84, 255], List[87, 88, 85, 255], List[76, 77, 84, 255], List[65, 92, 68, \
255], List[61, 104, 67, 255], List[64, 111, 63, 255], List[67, 110, 64, 255], \
List[66, 107, 70, 255], List[61, 121, 70, 255], List[60, 127, 69, 255], \
List[60, 127, 70, 255], List[62, 120, 70, 255], List[63, 117, 71, 255], \
List[64, 117, 70, 255], List[67, 117, 68, 255], List[69, 115, 63, 255], \
List[63, 120, 61, 255], List[58, 120, 62, 255], List[54, 109, 66, 255], \
List[50, 44, 138, 255], List[59, 38, 153, 255]], List[List[60, 76, 43, 255], \
List[53, 62, 43, 255], List[77, 85, 59, 255], List[70, 75, 54, 255], List[71, \
80, 53, 255], List[62, 77, 45, 255], List[54, 70, 43, 255], List[27, 40, 32, \
255], List[82, 56, 45, 255], List[102, 60, 49, 255], List[92, 56, 48, 255], \
List[80, 57, 52, 255], List[95, 64, 52, 255], List[89, 62, 52, 255], List[75, \
57, 52, 255], List[102, 59, 46, 255], List[100, 66, 62, 255], List[114, 97, \
115, 255], List[111, 101, 109, 255], List[100, 110, 110, 255], List[96, 110, \
111, 255], List[89, 111, 119, 255], List[97, 107, 110, 255], List[132, 113, \
102, 255], List[135, 114, 99, 255], List[135, 113, 99, 255], List[144, 117, \
106, 255], List[124, 97, 95, 255], List[96, 67, 84, 255], List[77, 49, 84, \
255], List[58, 50, 56, 255], List[9, 13, 12, 255], List[23, 16, 25, 255], \
List[69, 49, 69, 255], List[79, 59, 73, 255], List[67, 51, 66, 255], List[88, \
68, 94, 255], List[108, 82, 108, 255], List[102, 60, 114, 255], List[108, 75, \
106, 255], List[111, 68, 96, 255], List[97, 74, 93, 255], List[70, 67, 103, \
255], List[70, 56, 104, 255], List[89, 84, 105, 255], List[148, 133, 123, \
255], List[161, 150, 123, 255], List[167, 155, 119, 255], List[120, 117, 127, \
255], List[28, 31, 131, 255], List[49, 44, 112, 255], List[95, 98, 102, 255], \
List[122, 120, 115, 255], List[97, 96, 95, 255], List[99, 97, 92, 255], \
List[98, 97, 92, 255], List[96, 96, 99, 255], List[67, 89, 70, 255], List[60, \
99, 61, 255], List[64, 102, 63, 255], List[65, 101, 64, 255], List[66, 105, \
66, 255], List[65, 117, 69, 255], List[63, 124, 71, 255], List[60, 129, 72, \
255], List[62, 122, 72, 255], List[65, 116, 70, 255], List[67, 116, 68, 255], \
List[68, 121, 65, 255], List[68, 119, 63, 255], List[67, 118, 67, 255], \
List[59, 120, 68, 255], List[58, 116, 61, 255], List[38, 52, 113, 255], \
List[37, 36, 140, 255]], List[List[57, 76, 40, 255], List[43, 57, 35, 255], \
List[90, 100, 69, 255], List[94, 98, 72, 255], List[72, 80, 57, 255], \
List[89, 110, 64, 255], List[56, 75, 43, 255], List[26, 34, 30, 255], \
List[80, 52, 45, 255], List[102, 65, 53, 255], List[93, 64, 55, 255], \
List[90, 58, 52, 255], List[107, 62, 51, 255], List[100, 64, 53, 255], \
List[95, 63, 57, 255], List[100, 64, 50, 255], List[101, 78, 81, 255], \
List[106, 101, 119, 255], List[104, 100, 110, 255], List[100, 102, 112, 255], \
List[100, 103, 111, 255], List[90, 106, 122, 255], List[92, 93, 99, 255], \
List[103, 79, 68, 255], List[94, 74, 76, 255], List[97, 75, 81, 255], \
List[87, 64, 80, 255], List[76, 48, 79, 255], List[74, 51, 86, 255], List[92, \
70, 107, 255], List[63, 55, 62, 255], List[31, 26, 35, 255], List[50, 33, 53, \
255], List[68, 58, 67, 255], List[75, 76, 68, 255], List[81, 72, 86, 255], \
List[116, 57, 132, 255], List[104, 49, 123, 255], List[98, 49, 115, 255], \
List[102, 79, 120, 255], List[104, 81, 104, 255], List[75, 71, 89, 255], \
List[89, 76, 119, 255], List[107, 79, 128, 255], List[107, 71, 122, 255], \
List[121, 97, 112, 255], List[153, 146, 123, 255], List[158, 146, 121, 255], \
List[119, 116, 126, 255], List[28, 37, 130, 255], List[34, 35, 109, 255], \
List[112, 113, 114, 255], List[145, 142, 132, 255], List[101, 103, 103, 255], \
List[110, 110, 105, 255], List[107, 108, 102, 255], List[107, 105, 108, 255], \
List[70, 91, 72, 255], List[58, 106, 55, 255], List[61, 107, 58, 255], \
List[63, 110, 58, 255], List[61, 115, 59, 255], List[60, 117, 62, 255], \
List[62, 119, 61, 255], List[62, 124, 59, 255], List[62, 125, 56, 255], \
List[70, 123, 57, 255], List[70, 127, 56, 255], List[66, 128, 57, 255], \
List[71, 127, 68, 255], List[68, 125, 70, 255], List[61, 121, 70, 255], \
List[61, 121, 57, 255], List[34, 58, 94, 255], List[20, 20, 131, 255]], \
List[List[55, 73, 40, 255], List[52, 64, 40, 255], List[126, 129, 98, 255], \
List[118, 121, 92, 255], List[72, 84, 55, 255], List[98, 118, 74, 255], \
List[42, 58, 37, 255], List[22, 27, 29, 255], List[84, 55, 47, 255], List[98, \
63, 52, 255], List[89, 61, 54, 255], List[83, 54, 50, 255], List[103, 61, 50, \
255], List[101, 65, 53, 255], List[85, 59, 54, 255], List[94, 61, 51, 255], \
List[103, 88, 101, 255], List[102, 100, 117, 255], List[101, 100, 111, 255], \
List[100, 99, 110, 255], List[99, 98, 108, 255], List[89, 99, 118, 255], \
List[93, 93, 102, 255], List[109, 86, 83, 255], List[89, 65, 97, 255], \
List[81, 56, 87, 255], List[86, 54, 94, 255], List[90, 57, 97, 255], List[75, \
57, 87, 255], List[91, 70, 101, 255], List[92, 61, 84, 255], List[51, 37, 57, \
255], List[0, 0, 2, 255], List[72, 72, 67, 255], List[78, 79, 67, 255], \
List[77, 71, 84, 255], List[103, 67, 123, 255], List[97, 53, 105, 255], \
List[84, 44, 103, 255], List[95, 61, 110, 255], List[115, 87, 129, 255], \
List[105, 77, 121, 255], List[96, 71, 118, 255], List[78, 56, 99, 255], \
List[96, 81, 97, 255], List[129, 112, 121, 255], List[128, 112, 121, 255], \
List[145, 141, 121, 255], List[113, 110, 121, 255], List[25, 30, 126, 255], \
List[42, 30, 110, 255], List[105, 98, 107, 255], List[148, 135, 122, 255], \
List[105, 96, 93, 255], List[115, 106, 96, 255], List[111, 105, 96, 255], \
List[110, 103, 104, 255], List[70, 85, 74, 255], List[57, 98, 59, 255], \
List[61, 99, 71, 255], List[68, 98, 74, 255], List[71, 101, 76, 255], \
List[67, 105, 81, 255], List[62, 107, 96, 255], List[61, 116, 107, 255], \
List[64, 121, 107, 255], List[72, 120, 100, 255], List[72, 123, 92, 255], \
List[69, 131, 79, 255], List[70, 125, 66, 255], List[68, 122, 69, 255], \
List[61, 120, 70, 255], List[58, 119, 57, 255], List[57, 82, 93, 255], \
List[76, 71, 143, 255]], List[List[73, 91, 53, 255], List[66, 82, 52, 255], \
List[100, 112, 78, 255], List[92, 103, 72, 255], List[81, 96, 63, 255], \
List[90, 110, 67, 255], List[79, 99, 63, 255], List[65, 75, 53, 255], \
List[89, 53, 44, 255], List[95, 57, 47, 255], List[93, 54, 47, 255], List[68, \
54, 49, 255], List[87, 59, 50, 255], List[92, 61, 50, 255], List[76, 59, 49, \
255], List[97, 60, 54, 255], List[105, 91, 111, 255], List[106, 95, 112, \
255], List[102, 97, 107, 255], List[97, 100, 108, 255], List[93, 100, 106, \
255], List[84, 101, 112, 255], List[82, 91, 100, 255], List[101, 81, 72, \
255], List[102, 67, 107, 255], List[89, 56, 93, 255], List[90, 58, 95, 255], \
List[86, 59, 94, 255], List[79, 59, 83, 255], List[91, 66, 89, 255], \
List[109, 72, 96, 255], List[88, 59, 85, 255], List[40, 34, 45, 255], \
List[73, 73, 67, 255], List[63, 55, 71, 255], List[57, 41, 86, 255], List[85, \
63, 117, 255], List[87, 69, 105, 255], List[96, 72, 115, 255], List[102, 73, \
118, 255], List[80, 58, 97, 255], List[82, 55, 90, 255], List[76, 60, 94, \
255], List[79, 64, 104, 255], List[101, 71, 114, 255], List[102, 74, 106, \
255], List[121, 108, 110, 255], List[147, 145, 128, 255], List[120, 127, 136, \
255], List[48, 64, 143, 255], List[61, 76, 149, 255], List[78, 114, 133, \
255], List[99, 147, 149, 255], List[72, 127, 148, 255], List[69, 116, 155, \
255], List[60, 119, 166, 255], List[57, 117, 171, 255], List[51, 114, 166, \
255], List[49, 135, 170, 255], List[57, 127, 164, 255], List[65, 113, 155, \
255], List[83, 106, 148, 255], List[93, 113, 155, 255], List[86, 118, 172, \
255], List[81, 105, 179, 255], List[76, 94, 169, 255], List[69, 86, 135, \
255], List[62, 61, 112, 255], List[60, 62, 78, 255], List[66, 111, 59, 255], \
List[66, 117, 66, 255], List[59, 117, 66, 255], List[50, 111, 60, 255], \
List[86, 115, 82, 255], List[145, 136, 126, 255]], List[List[89, 109, 71, \
255], List[92, 112, 71, 255], List[84, 105, 66, 255], List[87, 107, 68, 255], \
List[93, 111, 73, 255], List[84, 99, 67, 255], List[89, 108, 71, 255], \
List[93, 103, 68, 255], List[99, 61, 50, 255], List[99, 61, 50, 255], \
List[96, 56, 47, 255], List[83, 58, 48, 255], List[85, 55, 47, 255], List[94, \
64, 53, 255], List[96, 63, 48, 255], List[98, 73, 72, 255], List[109, 94, \
109, 255], List[109, 91, 104, 255], List[106, 97, 102, 255], List[93, 106, \
101, 255], List[87, 103, 100, 255], List[81, 101, 106, 255], List[79, 93, \
100, 255], List[90, 75, 62, 255], List[110, 77, 97, 255], List[95, 62, 96, \
255], List[93, 64, 88, 255], List[92, 64, 82, 255], List[88, 63, 84, 255], \
List[93, 69, 81, 255], List[115, 84, 104, 255], List[100, 65, 91, 255], \
List[86, 62, 85, 255], List[72, 67, 98, 255], List[86, 55, 115, 255], \
List[97, 58, 116, 255], List[105, 76, 116, 255], List[104, 78, 114, 255], \
List[85, 56, 99, 255], List[69, 49, 94, 255], List[70, 52, 76, 255], List[47, \
29, 45, 255], List[86, 58, 99, 255], List[84, 51, 94, 255], List[105, 86, 99, \
255], List[133, 133, 117, 255], List[141, 141, 126, 255], List[112, 94, 95, \
255], List[78, 58, 73, 255], List[74, 71, 86, 255], List[64, 69, 83, 255], \
List[54, 70, 81, 255], List[32, 67, 79, 255], List[35, 67, 91, 255], List[36, \
61, 93, 255], List[33, 55, 87, 255], List[32, 50, 84, 255], List[37, 55, 81, \
255], List[39, 55, 78, 255], List[35, 51, 63, 255], List[44, 48, 55, 255], \
List[57, 44, 54, 255], List[60, 44, 51, 255], List[70, 39, 45, 255], List[74, \
25, 36, 255], List[58, 21, 31, 255], List[46, 19, 28, 255], List[41, 11, 25, \
255], List[41, 27, 29, 255], List[64, 108, 61, 255], List[63, 116, 59, 255], \
List[57, 115, 59, 255], List[53, 110, 62, 255], List[60, 101, 67, 255], \
List[100, 93, 89, 255]], List[List[127, 125, 96, 255], List[123, 121, 96, \
255], List[117, 118, 92, 255], List[105, 112, 84, 255], List[94, 107, 75, \
255], List[84, 101, 65, 255], List[88, 107, 69, 255], List[90, 98, 65, 255], \
List[80, 54, 49, 255], List[79, 52, 48, 255], List[78, 58, 51, 255], List[74, \
52, 46, 255], List[89, 53, 44, 255], List[99, 62, 52, 255], List[90, 53, 44, \
255], List[93, 83, 90, 255], List[108, 98, 109, 255], List[109, 92, 99, 255], \
List[107, 99, 97, 255], List[99, 103, 95, 255], List[88, 103, 95, 255], \
List[80, 98, 98, 255], List[80, 87, 100, 255], List[88, 76, 64, 255], \
List[105, 79, 87, 255], List[103, 67, 102, 255], List[90, 67, 84, 255], \
List[87, 72, 88, 255], List[88, 69, 81, 255], List[95, 67, 76, 255], \
List[117, 82, 101, 255], List[108, 78, 103, 255], List[104, 69, 98, 255], \
List[105, 70, 116, 255], List[114, 66, 105, 255], List[111, 67, 101, 255], \
List[96, 63, 105, 255], List[90, 55, 100, 255], List[83, 55, 104, 255], \
List[88, 59, 102, 255], List[82, 56, 91, 255], List[70, 49, 74, 255], \
List[76, 52, 83, 255], List[88, 63, 90, 255], List[110, 99, 102, 255], \
List[118, 116, 107, 255], List[123, 123, 114, 255], List[94, 72, 73, 255], \
List[59, 11, 26, 255], List[57, 23, 30, 255], List[55, 17, 28, 255], List[45, \
9, 25, 255], List[32, 9, 30, 255], List[32, 10, 35, 255], List[29, 20, 36, \
255], List[39, 21, 36, 255], List[44, 21, 36, 255], List[32, 22, 38, 255], \
List[29, 17, 38, 255], List[32, 11, 38, 255], List[35, 12, 32, 255], List[53, \
17, 30, 255], List[58, 25, 34, 255], List[61, 24, 38, 255], List[64, 22, 36, \
255], List[67, 17, 38, 255], List[57, 19, 38, 255], List[52, 16, 41, 255], \
List[44, 39, 44, 255], List[59, 110, 60, 255], List[59, 108, 59, 255], \
List[56, 105, 59, 255], List[55, 107, 59, 255], List[54, 98, 64, 255], \
List[101, 102, 99, 255]], List[List[113, 118, 93, 255], List[126, 127, 98, \
255], List[133, 133, 103, 255], List[134, 136, 105, 255], List[130, 137, 103, \
255], List[95, 110, 73, 255], List[85, 104, 68, 255], List[92, 100, 66, 255], \
List[88, 57, 51, 255], List[89, 58, 51, 255], List[105, 64, 52, 255], \
List[88, 50, 43, 255], List[89, 59, 50, 255], List[97, 57, 48, 255], List[89, \
57, 54, 255], List[93, 91, 100, 255], List[104, 101, 106, 255], List[108, 99, \
101, 255], List[105, 101, 95, 255], List[100, 99, 95, 255], List[91, 94, 97, \
255], List[79, 92, 97, 255], List[81, 90, 100, 255], List[59, 55, 52, 255], \
List[98, 76, 73, 255], List[112, 79, 105, 255], List[90, 72, 89, 255], \
List[94, 72, 85, 255], List[94, 71, 81, 255], List[96, 72, 83, 255], \
List[102, 70, 97, 255], List[119, 79, 120, 255], List[109, 66, 100, 255], \
List[105, 74, 94, 255], List[98, 75, 93, 255], List[96, 62, 91, 255], \
List[100, 59, 94, 255], List[97, 69, 94, 255], List[87, 79, 83, 255], \
List[86, 85, 78, 255], List[92, 95, 86, 255], List[102, 104, 95, 255], \
List[105, 104, 97, 255], List[106, 104, 98, 255], List[107, 104, 98, 255], \
List[107, 104, 98, 255], List[113, 113, 105, 255], List[83, 68, 71, 255], \
List[50, 21, 43, 255], List[67, 31, 51, 255], List[61, 28, 50, 255], List[43, \
22, 53, 255], List[43, 24, 56, 255], List[46, 27, 56, 255], List[41, 34, 55, \
255], List[49, 42, 54, 255], List[55, 43, 52, 255], List[44, 38, 55, 255], \
List[45, 30, 55, 255], List[47, 24, 56, 255], List[42, 22, 56, 255], List[54, \
25, 53, 255], List[69, 28, 51, 255], List[53, 23, 47, 255], List[54, 25, 43, \
255], List[58, 23, 41, 255], List[57, 20, 34, 255], List[58, 14, 39, 255], \
List[46, 39, 45, 255], List[53, 103, 58, 255], List[57, 102, 57, 255], \
List[55, 101, 58, 255], List[52, 102, 57, 255], List[53, 96, 60, 255], \
List[93, 96, 88, 255]], List[List[59, 81, 66, 255], List[66, 83, 67, 255], \
List[73, 87, 68, 255], List[76, 90, 68, 255], List[72, 88, 70, 255], List[74, \
89, 64, 255], List[88, 104, 67, 255], List[88, 101, 68, 255], List[61, 41, \
42, 255], List[67, 46, 46, 255], List[94, 61, 53, 255], List[81, 45, 43, \
255], List[97, 73, 62, 255], List[95, 60, 49, 255], List[92, 72, 68, 255], \
List[91, 99, 106, 255], List[98, 97, 106, 255], List[103, 100, 103, 255], \
List[104, 102, 96, 255], List[94, 93, 96, 255], List[87, 87, 96, 255], \
List[78, 86, 95, 255], List[75, 89, 100, 255], List[64, 60, 57, 255], \
List[81, 66, 56, 255], List[117, 92, 104, 255], List[103, 75, 88, 255], \
List[103, 74, 86, 255], List[102, 71, 91, 255], List[94, 61, 91, 255], \
List[91, 61, 91, 255], List[72, 46, 76, 255], List[77, 49, 79, 255], \
List[108, 80, 106, 255], List[98, 73, 94, 255], List[98, 60, 96, 255], \
List[133, 82, 157, 255], List[166, 113, 199, 255], List[170, 117, 190, 255], \
List[173, 121, 179, 255], List[165, 114, 156, 255], List[146, 110, 137, 255], \
List[123, 112, 115, 255], List[117, 115, 105, 255], List[116, 112, 105, 255], \
List[114, 109, 102, 255], List[118, 116, 106, 255], List[72, 60, 72, 255], \
List[46, 9, 42, 255], List[62, 21, 55, 255], List[56, 21, 61, 255], List[52, \
19, 68, 255], List[52, 23, 61, 255], List[50, 32, 61, 255], List[50, 41, 67, \
255], List[57, 48, 67, 255], List[62, 46, 65, 255], List[51, 46, 69, 255], \
List[51, 35, 65, 255], List[51, 27, 60, 255], List[52, 18, 68, 255], List[55, \
21, 66, 255], List[59, 21, 55, 255], List[55, 21, 51, 255], List[43, 21, 50, \
255], List[51, 21, 45, 255], List[49, 22, 35, 255], List[57, 14, 37, 255], \
List[47, 40, 46, 255], List[54, 98, 55, 255], List[55, 95, 55, 255], List[54, \
97, 55, 255], List[54, 98, 57, 255], List[52, 94, 56, 255], List[92, 93, 78, \
255]], List[List[63, 86, 69, 255], List[71, 83, 69, 255], List[71, 82, 67, \
255], List[69, 78, 64, 255], List[56, 70, 60, 255], List[69, 84, 61, 255], \
List[93, 109, 70, 255], List[84, 99, 66, 255], List[69, 50, 49, 255], \
List[65, 43, 46, 255], List[48, 35, 40, 255], List[75, 46, 43, 255], List[90, \
64, 56, 255], List[74, 46, 43, 255], List[89, 74, 77, 255], List[86, 90, 103, \
255], List[98, 97, 101, 255], List[100, 101, 101, 255], List[103, 99, 95, \
255], List[95, 95, 94, 255], List[84, 89, 95, 255], List[78, 83, 95, 255], \
List[70, 81, 95, 255], List[87, 78, 73, 255], List[86, 69, 55, 255], \
List[112, 90, 99, 255], List[111, 83, 106, 255], List[102, 70, 93, 255], \
List[90, 60, 79, 255], List[97, 76, 80, 255], List[88, 72, 62, 255], List[70, \
58, 50, 255], List[49, 38, 49, 255], List[70, 40, 72, 255], List[114, 62, \
120, 255], List[138, 73, 156, 255], List[145, 88, 176, 255], List[136, 96, \
178, 255], List[154, 95, 184, 255], List[165, 92, 190, 255], List[142, 69, \
173, 255], List[124, 65, 166, 255], List[123, 102, 140, 255], List[130, 130, \
115, 255], List[128, 124, 116, 255], List[127, 123, 114, 255], List[130, 127, \
116, 255], List[91, 80, 89, 255], List[57, 34, 68, 255], List[55, 25, 66, \
255], List[55, 18, 66, 255], List[48, 21, 78, 255], List[47, 29, 76, 255], \
List[56, 40, 77, 255], List[60, 47, 82, 255], List[60, 48, 75, 255], List[60, \
47, 73, 255], List[60, 48, 80, 255], List[59, 42, 80, 255], List[48, 33, 76, \
255], List[45, 23, 79, 255], List[53, 19, 68, 255], List[51, 19, 63, 255], \
List[49, 23, 66, 255], List[39, 22, 60, 255], List[40, 22, 52, 255], List[46, \
20, 39, 255], List[58, 13, 35, 255], List[52, 45, 48, 255], List[57, 97, 56, \
255], List[57, 91, 53, 255], List[54, 95, 56, 255], List[56, 95, 56, 255], \
List[53, 92, 54, 255], List[85, 93, 73, 255]], List[List[65, 82, 70, 255], \
List[70, 81, 69, 255], List[70, 80, 68, 255], List[69, 78, 66, 255], List[61, \
72, 63, 255], List[76, 90, 64, 255], List[91, 109, 70, 255], List[85, 99, 66, \
255], List[86, 56, 49, 255], List[76, 48, 46, 255], List[84, 59, 52, 255], \
List[80, 52, 46, 255], List[81, 56, 50, 255], List[87, 64, 56, 255], List[83, \
78, 93, 255], List[81, 79, 99, 255], List[94, 93, 95, 255], List[100, 94, 93, \
255], List[101, 94, 91, 255], List[101, 96, 88, 255], List[89, 92, 88, 255], \
List[79, 88, 87, 255], List[66, 79, 91, 255], List[90, 82, 81, 255], \
List[108, 88, 70, 255], List[101, 82, 88, 255], List[95, 73, 96, 255], \
List[83, 72, 61, 255], List[89, 80, 61, 255], List[112, 100, 80, 255], \
List[104, 88, 74, 255], List[113, 98, 78, 255], List[110, 94, 80, 255], \
List[121, 59, 116, 255], List[148, 80, 159, 255], List[133, 88, 159, 255], \
List[125, 88, 151, 255], List[121, 97, 152, 255], List[134, 105, 153, 255], \
List[125, 81, 148, 255], List[104, 57, 146, 255], List[102, 65, 147, 255], \
List[99, 91, 109, 255], List[126, 127, 115, 255], List[132, 131, 124, 255], \
List[135, 135, 127, 255], List[135, 134, 126, 255], List[134, 133, 124, 255], \
List[129, 130, 124, 255], List[116, 111, 110, 255], List[56, 39, 69, 255], \
List[33, 30, 72, 255], List[48, 37, 74, 255], List[59, 33, 68, 255], List[53, \
44, 73, 255], List[51, 50, 68, 255], List[51, 51, 68, 255], List[52, 46, 72, \
255], List[59, 35, 69, 255], List[51, 34, 70, 255], List[36, 38, 76, 255], \
List[39, 26, 60, 255], List[42, 21, 58, 255], List[41, 20, 69, 255], List[38, \
19, 72, 255], List[41, 22, 58, 255], List[50, 27, 43, 255], List[53, 21, 34, \
255], List[51, 50, 54, 255], List[65, 93, 58, 255], List[66, 84, 53, 255], \
List[62, 89, 55, 255], List[60, 94, 57, 255], List[56, 92, 52, 255], List[77, \
89, 66, 255]], List[List[70, 81, 71, 255], List[70, 80, 70, 255], List[69, \
78, 69, 255], List[67, 76, 67, 255], List[62, 69, 63, 255], List[78, 91, 65, \
255], List[90, 108, 69, 255], List[91, 107, 72, 255], List[103, 100, 93, \
255], List[106, 101, 97, 255], List[114, 108, 99, 255], List[110, 106, 100, \
255], List[113, 109, 101, 255], List[110, 106, 101, 255], List[77, 71, 91, \
255], List[78, 72, 91, 255], List[87, 84, 89, 255], List[96, 91, 92, 255], \
List[95, 90, 91, 255], List[98, 95, 87, 255], List[95, 95, 83, 255], List[83, \
90, 82, 255], List[68, 82, 90, 255], List[72, 70, 73, 255], List[90, 72, 61, \
255], List[85, 73, 62, 255], List[83, 73, 59, 255], List[91, 82, 64, 255], \
List[94, 84, 69, 255], List[92, 81, 66, 255], List[94, 83, 68, 255], List[83, \
77, 57, 255], List[93, 73, 75, 255], List[155, 81, 146, 255], List[137, 88, \
144, 255], List[131, 98, 153, 255], List[131, 103, 158, 255], List[135, 101, \
159, 255], List[147, 101, 156, 255], List[138, 77, 151, 255], List[122, 59, \
149, 255], List[96, 59, 122, 255], List[57, 58, 57, 255], List[85, 84, 76, \
255], List[93, 93, 88, 255], List[96, 97, 92, 255], List[97, 99, 94, 255], \
List[93, 94, 88, 255], List[95, 95, 89, 255], List[96, 97, 89, 255], List[42, \
47, 62, 255], List[30, 32, 63, 255], List[49, 35, 63, 255], List[56, 34, 64, \
255], List[53, 45, 70, 255], List[44, 46, 72, 255], List[43, 45, 71, 255], \
List[52, 47, 72, 255], List[56, 36, 65, 255], List[50, 34, 62, 255], List[35, \
35, 65, 255], List[25, 33, 53, 255], List[26, 31, 49, 255], List[36, 22, 61, \
255], List[39, 18, 70, 255], List[43, 21, 61, 255], List[47, 36, 52, 255], \
List[41, 29, 40, 255], List[56, 58, 59, 255], List[75, 93, 54, 255], List[70, \
85, 51, 255], List[68, 88, 53, 255], List[64, 94, 57, 255], List[55, 89, 50, \
255], List[76, 93, 70, 255]], List[List[73, 79, 72, 255], List[73, 78, 72, \
255], List[71, 77, 70, 255], List[69, 75, 67, 255], List[63, 67, 63, 255], \
List[76, 89, 63, 255], List[92, 109, 70, 255], List[82, 96, 65, 255], \
List[118, 116, 106, 255], List[125, 121, 114, 255], List[121, 119, 111, 255], \
List[121, 118, 110, 255], List[128, 124, 115, 255], List[100, 95, 97, 255], \
List[72, 62, 79, 255], List[74, 69, 89, 255], List[77, 74, 87, 255], List[88, \
88, 89, 255], List[92, 89, 87, 255], List[96, 92, 84, 255], List[96, 94, 80, \
255], List[86, 93, 76, 255], List[77, 89, 81, 255], List[73, 70, 67, 255], \
List[71, 55, 47, 255], List[84, 76, 62, 255], List[92, 82, 66, 255], List[91, \
79, 64, 255], List[91, 79, 64, 255], List[89, 77, 64, 255], List[84, 73, 61, \
255], List[63, 58, 45, 255], List[72, 52, 62, 255], List[144, 83, 144, 255], \
List[128, 95, 154, 255], List[127, 96, 155, 255], List[132, 104, 156, 255], \
List[140, 104, 154, 255], List[147, 95, 153, 255], List[139, 68, 146, 255], \
List[121, 55, 137, 255], List[85, 47, 105, 255], List[55, 56, 55, 255], \
List[86, 85, 80, 255], List[89, 90, 85, 255], List[94, 95, 90, 255], List[94, \
94, 90, 255], List[89, 90, 86, 255], List[92, 92, 86, 255], List[87, 86, 82, \
255], List[37, 44, 55, 255], List[24, 28, 52, 255], List[42, 36, 60, 255], \
List[48, 39, 62, 255], List[47, 38, 70, 255], List[46, 42, 64, 255], List[47, \
41, 64, 255], List[47, 37, 71, 255], List[48, 40, 63, 255], List[42, 36, 60, \
255], List[27, 32, 55, 255], List[21, 30, 45, 255], List[22, 34, 46, 255], \
List[30, 32, 55, 255], List[38, 25, 58, 255], List[35, 21, 59, 255], List[37, \
31, 56, 255], List[33, 30, 52, 255], List[59, 65, 61, 255], List[82, 95, 55, \
255], List[76, 88, 51, 255], List[73, 94, 53, 255], List[69, 96, 54, 255], \
List[61, 91, 51, 255], List[65, 84, 57, 255]], List[List[73, 79, 73, 255], \
List[72, 78, 71, 255], List[72, 78, 73, 255], List[69, 75, 70, 255], List[62, \
67, 63, 255], List[76, 89, 61, 255], List[89, 106, 68, 255], List[84, 100, \
66, 255], List[109, 108, 95, 255], List[116, 111, 102, 255], List[116, 112, \
102, 255], List[116, 112, 101, 255], List[120, 117, 103, 255], List[90, 87, \
89, 255], List[67, 62, 79, 255], List[69, 64, 89, 255], List[70, 66, 90, \
255], List[82, 79, 87, 255], List[85, 82, 86, 255], List[83, 81, 87, 255], \
List[82, 86, 81, 255], List[80, 89, 74, 255], List[74, 87, 73, 255], List[78, \
74, 61, 255], List[95, 74, 61, 255], List[84, 76, 64, 255], List[90, 79, 65, \
255], List[89, 77, 63, 255], List[88, 76, 62, 255], List[88, 75, 62, 255], \
List[83, 71, 60, 255], List[63, 58, 42, 255], List[77, 52, 73, 255], \
List[134, 78, 162, 255], List[122, 87, 156, 255], List[125, 95, 154, 255], \
List[135, 99, 150, 255], List[139, 104, 148, 255], List[145, 95, 149, 255], \
List[134, 67, 139, 255], List[114, 57, 125, 255], List[82, 46, 96, 255], \
List[54, 53, 53, 255], List[83, 83, 78, 255], List[90, 90, 86, 255], List[94, \
94, 90, 255], List[95, 95, 90, 255], List[92, 93, 88, 255], List[91, 91, 87, \
255], List[88, 88, 82, 255], List[36, 41, 57, 255], List[26, 28, 53, 255], \
List[40, 35, 54, 255], List[35, 37, 56, 255], List[37, 30, 58, 255], List[40, \
41, 59, 255], List[41, 41, 59, 255], List[38, 30, 59, 255], List[35, 37, 57, \
255], List[40, 35, 55, 255], List[31, 33, 60, 255], List[22, 24, 51, 255], \
List[23, 29, 44, 255], List[23, 41, 50, 255], List[35, 37, 60, 255], List[32, \
29, 62, 255], List[36, 28, 59, 255], List[37, 32, 62, 255], List[62, 68, 62, \
255], List[86, 94, 57, 255], List[78, 88, 49, 255], List[77, 91, 48, 255], \
List[76, 93, 49, 255], List[68, 88, 50, 255], List[65, 80, 56, 255]], \
List[List[77, 80, 76, 255], List[74, 78, 75, 255], List[71, 77, 75, 255], \
List[69, 74, 72, 255], List[69, 71, 68, 255], List[75, 89, 61, 255], List[86, \
101, 66, 255], List[85, 100, 66, 255], List[104, 104, 93, 255], List[110, \
106, 101, 255], List[111, 108, 103, 255], List[113, 109, 104, 255], List[112, \
109, 103, 255], List[114, 111, 105, 255], List[103, 99, 100, 255], List[84, \
82, 92, 255], List[71, 70, 88, 255], List[75, 71, 89, 255], List[80, 77, 87, \
255], List[74, 75, 86, 255], List[70, 76, 84, 255], List[67, 81, 78, 255], \
List[64, 83, 75, 255], List[69, 73, 63, 255], List[86, 70, 57, 255], List[86, \
79, 65, 255], List[87, 76, 63, 255], List[85, 74, 59, 255], List[87, 75, 60, \
255], List[89, 77, 61, 255], List[81, 69, 58, 255], List[56, 51, 37, 255], \
List[74, 49, 76, 255], List[135, 76, 159, 255], List[126, 89, 149, 255], \
List[132, 94, 151, 255], List[140, 94, 151, 255], List[145, 100, 151, 255], \
List[146, 91, 149, 255], List[131, 64, 139, 255], List[112, 54, 115, 255], \
List[80, 44, 84, 255], List[54, 55, 54, 255], List[81, 82, 78, 255], List[88, \
89, 84, 255], List[93, 93, 89, 255], List[94, 94, 89, 255], List[91, 91, 87, \
255], List[90, 90, 85, 255], List[89, 89, 83, 255], List[37, 37, 61, 255], \
List[23, 23, 59, 255], List[25, 29, 54, 255], List[23, 28, 48, 255], List[27, \
32, 50, 255], List[31, 45, 64, 255], List[31, 44, 64, 255], List[26, 32, 50, \
255], List[22, 28, 49, 255], List[22, 28, 58, 255], List[24, 25, 63, 255], \
List[16, 19, 54, 255], List[17, 20, 54, 255], List[21, 26, 54, 255], List[21, \
34, 63, 255], List[28, 37, 73, 255], List[29, 33, 65, 255], List[26, 30, 68, \
255], List[71, 73, 79, 255], List[96, 97, 80, 255], List[92, 94, 80, 255], \
List[95, 96, 82, 255], List[94, 95, 83, 255], List[98, 98, 88, 255], \
List[100, 98, 93, 255]], List[List[84, 84, 79, 255], List[84, 82, 77, 255], \
List[77, 77, 74, 255], List[76, 74, 72, 255], List[73, 74, 68, 255], List[74, \
88, 60, 255], List[86, 102, 67, 255], List[84, 101, 66, 255], List[106, 105, \
95, 255], List[111, 108, 102, 255], List[111, 108, 102, 255], List[113, 110, \
103, 255], List[108, 106, 100, 255], List[104, 102, 96, 255], List[95, 93, \
87, 255], List[82, 81, 76, 255], List[65, 64, 64, 255], List[51, 51, 58, \
255], List[64, 63, 73, 255], List[72, 73, 82, 255], List[67, 72, 81, 255], \
List[65, 73, 81, 255], List[67, 80, 79, 255], List[68, 76, 72, 255], List[80, \
70, 59, 255], List[87, 77, 64, 255], List[89, 79, 64, 255], List[93, 81, 66, \
255], List[91, 80, 64, 255], List[86, 75, 60, 255], List[82, 71, 59, 255], \
List[57, 54, 39, 255], List[84, 53, 82, 255], List[139, 79, 157, 255], \
List[130, 81, 151, 255], List[139, 79, 152, 255], List[131, 88, 133, 255], \
List[118, 96, 95, 255], List[126, 85, 115, 255], List[127, 64, 134, 255], \
List[112, 48, 111, 255], List[78, 38, 75, 255], List[52, 54, 52, 255], \
List[80, 81, 77, 255], List[85, 86, 82, 255], List[91, 91, 86, 255], List[92, \
91, 87, 255], List[88, 90, 86, 255], List[88, 89, 84, 255], List[86, 86, 80, \
255], List[37, 38, 59, 255], List[16, 25, 55, 255], List[20, 30, 54, 255], \
List[22, 34, 53, 255], List[26, 42, 57, 255], List[34, 46, 68, 255], List[34, \
46, 67, 255], List[29, 45, 58, 255], List[26, 37, 56, 255], List[27, 37, 59, \
255], List[29, 36, 63, 255], List[32, 34, 57, 255], List[37, 38, 62, 255], \
List[45, 40, 67, 255], List[45, 51, 68, 255], List[49, 63, 75, 255], List[58, \
68, 79, 255], List[68, 70, 79, 255], List[93, 90, 89, 255], List[104, 101, \
95, 255], List[104, 101, 96, 255], List[109, 107, 100, 255], List[113, 108, \
101, 255], List[110, 107, 100, 255], List[113, 110, 102, 255]], List[List[82, \
84, 79, 255], List[82, 82, 77, 255], List[80, 80, 75, 255], List[76, 77, 72, \
255], List[73, 77, 68, 255], List[69, 84, 56, 255], List[74, 88, 59, 255], \
List[84, 100, 67, 255], List[104, 104, 90, 255], List[114, 110, 99, 255], \
List[111, 109, 99, 255], List[110, 108, 98, 255], List[104, 102, 91, 255], \
List[108, 105, 93, 255], List[102, 100, 90, 255], List[98, 96, 88, 255], \
List[97, 95, 85, 255], List[98, 97, 87, 255], List[92, 91, 81, 255], List[93, \
92, 84, 255], List[92, 91, 82, 255], List[92, 90, 81, 255], List[89, 88, 79, \
255], List[82, 80, 72, 255], List[80, 71, 60, 255], List[82, 71, 59, 255], \
List[87, 75, 62, 255], List[86, 73, 60, 255], List[84, 71, 58, 255], List[85, \
73, 58, 255], List[76, 64, 54, 255], List[50, 46, 34, 255], List[88, 60, 87, \
255], List[133, 75, 152, 255], List[129, 71, 139, 255], List[140, 75, 147, \
255], List[117, 87, 101, 255], List[87, 96, 38, 255], List[98, 95, 56, 255], \
List[123, 68, 120, 255], List[115, 50, 113, 255], List[80, 36, 73, 255], \
List[52, 55, 52, 255], List[81, 80, 77, 255], List[90, 91, 86, 255], List[91, \
91, 86, 255], List[94, 93, 89, 255], List[93, 94, 90, 255], List[88, 89, 84, \
255], List[84, 84, 79, 255], List[85, 85, 81, 255], List[91, 90, 84, 255], \
List[92, 89, 83, 255], List[94, 91, 85, 255], List[94, 91, 85, 255], List[94, \
92, 85, 255], List[94, 91, 82, 255], List[98, 95, 87, 255], List[99, 96, 88, \
255], List[102, 99, 89, 255], List[102, 98, 89, 255], List[103, 101, 91, \
255], List[106, 104, 93, 255], List[106, 105, 95, 255], List[106, 103, 91, \
255], List[113, 109, 96, 255], List[113, 110, 97, 255], List[113, 110, 98, \
255], List[112, 109, 98, 255], List[113, 111, 99, 255], List[111, 109, 98, \
255], List[111, 110, 99, 255], List[116, 113, 103, 255], List[115, 112, 101, \
255], List[117, 115, 104, 255]], List[List[82, 84, 77, 255], List[80, 82, 74, \
255], List[78, 81, 72, 255], List[75, 76, 69, 255], List[74, 77, 66, 255], \
List[79, 94, 63, 255], List[74, 89, 60, 255], List[81, 98, 64, 255], \
List[106, 107, 92, 255], List[116, 112, 104, 255], List[108, 106, 98, 255], \
List[113, 109, 101, 255], List[116, 112, 103, 255], List[109, 107, 98, 255], \
List[111, 109, 100, 255], List[107, 105, 97, 255], List[103, 101, 93, 255], \
List[110, 107, 99, 255], List[104, 101, 93, 255], List[102, 99, 93, 255], \
List[99, 97, 90, 255], List[99, 96, 87, 255], List[92, 91, 85, 255], List[81, \
78, 70, 255], List[80, 71, 59, 255], List[84, 73, 60, 255], List[86, 76, 61, \
255], List[87, 75, 61, 255], List[85, 73, 59, 255], List[84, 71, 58, 255], \
List[74, 63, 53, 255], List[47, 45, 32, 255], List[96, 58, 88, 255], \
List[136, 65, 141, 255], List[125, 66, 133, 255], List[131, 66, 141, 255], \
List[105, 85, 75, 255], List[89, 94, 50, 255], List[99, 93, 59, 255], \
List[118, 64, 121, 255], List[103, 54, 114, 255], List[70, 38, 68, 255], \
List[54, 56, 53, 255], List[79, 77, 74, 255], List[85, 86, 81, 255], List[94, \
94, 90, 255], List[94, 94, 90, 255], List[88, 87, 83, 255], List[90, 89, 85, \
255], List[83, 83, 80, 255], List[99, 97, 92, 255], List[110, 107, 100, 255], \
List[112, 109, 102, 255], List[114, 110, 102, 255], List[114, 110, 101, 255], \
List[114, 110, 102, 255], List[118, 115, 107, 255], List[118, 114, 107, 255], \
List[118, 112, 105, 255], List[119, 115, 107, 255], List[120, 117, 108, 255], \
List[119, 114, 106, 255], List[119, 116, 108, 255], List[122, 119, 111, 255], \
List[118, 116, 109, 255], List[118, 115, 109, 255], List[121, 119, 112, 255], \
List[118, 115, 110, 255], List[120, 117, 111, 255], List[121, 118, 111, 255], \
List[124, 120, 113, 255], List[119, 116, 110, 255], List[120, 117, 111, 255], \
List[123, 119, 112, 255], List[122, 119, 112, 255]]], \
\\\"UnsignedInteger8\\\"], List[List[0, 43.`], List[75.`, 0]], List[0, 255], \
Rule[ColorFunction, RGBColor], Rule[ImageResolution, List[72, 72]]], \
BoxForm`ImageTag[\\\"Byte\\\", Rule[ColorSpace, \\\"RGB\\\"], \
Rule[Interleaving, True], Rule[MetaInformation, \
Association[Rule[\\\"Exif\\\", Association[Rule[\\\"ImageWidth\\\", 1200], \
Rule[\\\"ImageLength\\\", 680], Rule[\\\"XResolution\\\", 72], \
Rule[\\\"YResolution\\\", 72], Rule[\\\"ResolutionUnit\\\", \\\"Inch\\\"], \
Rule[\\\"Software\\\", \\\"Created with the Wolfram Language : \
www.wolfram.com\\\"], Rule[\\\"DateTime\\\", DateObject[List[2022, 12, 6, 13, \
37, 51.`], \\\"Instant\\\", \\\"Gregorian\\\", -5.`]], \
Rule[\\\"TimeZoneOffset\\\", -5]]], Rule[\\\"Comments\\\", \
Association[Rule[\\\"Software\\\", \\\"Created with the Wolfram Language : \
www.wolfram.com\\\"], Rule[\\\"Creation Time\\\", DateObject[List[2022, 12, \
6, 13, 37, 51.`], \\\"Instant\\\"]]]]]]], Rule[Selectable, False]], \
Rule[DefaultBaseStyle, \\\"ImageGraphics\\\"], Rule[ImageSizeRaw, List[75.`, \
43.`]], Rule[PlotRange, List[List[0, 75.`], List[0, 43.`]]]]}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"dispLeft\\\\\\\"\\\", \\\"\[Rule]\\\", \
GraphicsBox[TagBox[RasterBox[NumericArray[List[List[0.18202999234199524`, \
0.18115226924419403`, 0.18037883937358856`, 0.17956869304180145`, \
0.17896072566509247`, 0.17846810817718506`, 0.17776961624622345`, \
0.17691320180892944`, 0.17625711858272552`, 0.17571312189102173`, \
0.17508448660373688`, 0.17453667521476746`, 0.17402224242687225`, \
0.1735246479511261`, 0.17315582931041718`, 0.1726224273443222`, \
0.17180147767066956`, 0.17159545421600342`, 0.17096441984176636`, \
0.17055043578147888`, 0.1707107275724411`, 0.1698252260684967`, \
0.16963671147823334`, 0.16940777003765106`, 0.16855929791927338`, \
0.16870325803756714`, 0.16862577199935913`, 0.16782435774803162`, \
0.1676015406847`, 0.1677035391330719`, 0.16771432757377625`, \
0.16764786839485168`, 0.16684982180595398`, 0.16661681234836578`, \
0.16668537259101868`, 0.16669414937496185`, 0.16668552160263062`, \
0.16671492159366608`, 0.1667436808347702`, 0.16673776507377625`, \
0.16674186289310455`, 0.1667107790708542`, 0.16664697229862213`, \
0.16674496233463287`, 0.16712740063667297`, 0.16766293346881866`, \
0.16770441830158234`, 0.16770657896995544`, 0.16766127943992615`, \
0.16793352365493774`, 0.16867490112781525`, 0.1686953753232956`, \
0.16857871413230896`, 0.16911621391773224`, 0.16972322762012482`, \
0.16957567632198334`, 0.16999226808547974`, 0.17059198021888733`, \
0.17081664502620697`, 0.17164595425128937`, 0.17166857421398163`, \
0.1725044697523117`, 0.17290371656417847`, 0.17205965518951416`, \
0.18393726646900177`, 0.19194190204143524`, 0.19036827981472015`, \
0.19415141642093658`, 0.1824742555618286`, 0.1486562192440033`, \
0.15275289118289948`, 0.15265506505966187`, 0.15328197181224823`, \
0.1540275663137436`, 0.15493199229240417`], List[0.18591463565826416`, \
0.1788552701473236`, 0.17911607027053833`, 0.17844735085964203`, \
0.1777898222208023`, 0.17695191502571106`, 0.176227405667305`, \
0.17572453618049622`, 0.17512977123260498`, 0.1742870956659317`, \
0.17382289469242096`, 0.17312215268611908`, 0.17282670736312866`, \
0.17204509675502777`, 0.17197033762931824`, 0.17108137905597687`, \
0.1707061380147934`, 0.16998016834259033`, 0.17011809349060059`, \
0.16925957798957825`, 0.16904832422733307`, 0.16881786286830902`, \
0.16812801361083984`, 0.16808167099952698`, 0.16743649542331696`, \
0.16707642376422882`, 0.16716597974300385`, 0.16706500947475433`, \
0.16670216619968414`, 0.1661003977060318`, 0.1661292165517807`, \
0.16618697345256805`, 0.16604413092136383`, 0.1659107655286789`, \
0.16550825536251068`, 0.16522647440433502`, 0.1653045266866684`, \
0.1651783585548401`, 0.16506287455558777`, 0.16508662700653076`, \
0.16507935523986816`, 0.16518017649650574`, 0.1655745804309845`, \
0.1660212129354477`, 0.16622649133205414`, 0.166142538189888`, \
0.16615165770053864`, 0.1661558449268341`, 0.16603852808475494`, \
0.16685594618320465`, 0.16720479726791382`, 0.16701312363147736`, \
0.16753120720386505`, 0.1681814044713974`, 0.16803501546382904`, \
0.16829530894756317`, 0.1691557765007019`, 0.1689109355211258`, \
0.17736929655075073`, 0.17930689454078674`, 0.1783323734998703`, \
0.17713403701782227`, 0.17619340121746063`, 0.18471413850784302`, \
0.13001379370689392`, 0.09646812081336975`, 0.10658150911331177`, \
0.09391999244689941`, 0.14482071995735168`, 0.28212451934814453`, \
0.2694339156150818`, 0.27248847484588623`, 0.27302128076553345`, \
0.27369800209999084`, 0.2743690609931946`], List[0.1599317342042923`, \
0.19766680896282196`, 0.17734473943710327`, 0.17717556655406952`, \
0.17622025310993195`, 0.17571870982646942`, 0.17515674233436584`, \
0.1743651032447815`, 0.173561230301857`, 0.17297032475471497`, \
0.1724487841129303`, 0.17195634543895721`, 0.17143389582633972`, \
0.17088130116462708`, 0.1703856885433197`, 0.16978991031646729`, \
0.1694296896457672`, 0.16869491338729858`, 0.1685238480567932`, \
0.16818538308143616`, 0.16746580600738525`, 0.1676671802997589`, \
0.16701991856098175`, 0.1664995551109314`, 0.1665584146976471`, \
0.16557762026786804`, 0.1655280739068985`, 0.16558264195919037`, \
0.1657085418701172`, 0.1667315512895584`, 0.1816939115524292`, \
0.16889072954654694`, 0.16361887753009796`, 0.16487661004066467`, \
0.16462399065494537`, 0.1645946502685547`, 0.16465537250041962`, \
0.1643429547548294`, 0.16403132677078247`, 0.16409540176391602`, \
0.16404399275779724`, 0.16447415947914124`, 0.16466684639453888`, \
0.1646311730146408`, 0.16459055244922638`, 0.16459226608276367`, \
0.164552241563797`, 0.16451938450336456`, 0.1651177704334259`, \
0.16563542187213898`, 0.16550230979919434`, 0.1659691482782364`, \
0.16663159430027008`, 0.16653285920619965`, 0.16670383512973785`, \
0.16619591414928436`, 0.1785922795534134`, 0.18688629567623138`, \
0.13514071702957153`, 0.12451891601085663`, 0.13228794932365417`, \
0.13907195627689362`, 0.14687666296958923`, 0.1040944829583168`, \
0.4053693115711212`, 0.5919445753097534`, 0.5586532950401306`, \
0.5348883867263794`, 0.6705087423324585`, 1.0393511056900024`, \
1.0039832592010498`, 1.0103871822357178`, 1.010420322418213`, \
1.0104169845581055`, 1.0103977918624878`], List[0.2544907033443451`, \
0.09426137059926987`, 0.17827478051185608`, 0.18686841428279877`, \
0.1802959442138672`, 0.17333640158176422`, 0.17382179200649261`, \
0.17298002541065216`, 0.17246592044830322`, 0.17181460559368134`, \
0.17106306552886963`, 0.1707882285118103`, 0.1700173020362854`, \
0.16973520815372467`, 0.1690034419298172`, 0.16866664588451385`, \
0.16799284517765045`, 0.16759897768497467`, 0.16684246063232422`, \
0.16708651185035706`, 0.1664782613515854`, 0.16588300466537476`, \
0.1659412384033203`, 0.16504471004009247`, 0.16496697068214417`, \
0.16491681337356567`, 0.16417540609836578`, 0.16440695524215698`, \
0.17194809019565582`, 0.1578953117132187`, 0.08910354226827621`, \
0.14426150918006897`, 0.16740453243255615`, 0.1621231734752655`, \
0.16306453943252563`, 0.16307030618190765`, 0.16305777430534363`, \
0.16309580206871033`, 0.16314709186553955`, 0.16313669085502625`, \
0.16314437985420227`, 0.1630769520998001`, 0.16305513679981232`, \
0.16305440664291382`, 0.1629818081855774`, 0.16304530203342438`, \
0.1633603572845459`, 0.16387653350830078`, 0.16407069563865662`, \
0.1640232652425766`, 0.1639985889196396`, 0.1648956835269928`, \
0.16505081951618195`, 0.16498620808124542`, 0.16465726494789124`, \
0.17052027583122253`, 0.11775662750005722`, 0.08489222824573517`, \
0.31348517537117004`, 0.30482539534568787`, 0.5287767052650452`, \
0.9077861309051514`, 0.8575451374053955`, 0.846155047416687`, \
0.9958474636077881`, 1.0883634090423584`, 1.0679010152816772`, \
1.0766270160675049`, 1.0544673204421997`, 0.9941977858543396`, \
0.9999780058860779`, 0.998930037021637`, 0.9989238977432251`, \
0.998923659324646`, 0.9989268183708191`], List[0.9160357117652893`, \
0.5564067959785461`, 0.1829777956008911`, 0.12319284677505493`, \
0.1614033281803131`, 0.1894674003124237`, 0.17302599549293518`, \
0.17194083333015442`, 0.1709742546081543`, 0.17034272849559784`, \
0.16996730864048004`, 0.1693350225687027`, 0.16886399686336517`, \
0.16835808753967285`, 0.16775868833065033`, 0.16737768054008484`, \
0.16665785014629364`, 0.1664072722196579`, 0.1658942550420761`, \
0.16536182165145874`, 0.16534383594989777`, 0.16453568637371063`, \
0.1644880771636963`, 0.1639680564403534`, 0.16337457299232483`, \
0.163496732711792`, 0.1641002744436264`, 0.16157479584217072`, \
0.12322268635034561`, 0.18706989288330078`, 0.6561022996902466`, \
0.29584693908691406`, 0.13305208086967468`, 0.16746969521045685`, \
0.1614445000886917`, 0.16144192218780518`, 0.16145695745944977`, \
0.16151927411556244`, 0.16150589287281036`, 0.16150790452957153`, \
0.16150952875614166`, 0.16151146590709686`, 0.16145271062850952`, \
0.16147078573703766`, 0.16183800995349884`, 0.1622878611087799`, \
0.16257977485656738`, 0.16268447041511536`, 0.16410931944847107`, \
0.17414520680904388`, 0.17501981556415558`, 0.16313536465168`, \
0.1634047031402588`, 0.1637469381093979`, 0.17101290822029114`, \
0.1353360414505005`, 0.49080395698547363`, 0.6650167107582092`, \
0.9850097894668579`, 1.0582561492919922`, 1.0375547409057617`, \
1.0336424112319946`, 1.033587098121643`, 1.0386719703674316`, \
1.0020792484283447`, 0.9794641733169556`, 0.9844443798065186`, \
0.982430636882782`, 0.9873285889625549`, 1.0006464719772339`, \
0.9993706345558167`, 0.9996034502983093`, 0.9996038675308228`, \
0.9996042251586914`, 0.9996045827865601`], List[1.023484468460083`, \
1.0537046194076538`, 0.9317807555198669`, 0.5180635452270508`, \
0.20154666900634766`, 0.10376723110675812`, 0.16631926596164703`, \
0.16973315179347992`, 0.16968005895614624`, 0.16902713477611542`, \
0.168697327375412`, 0.1679627001285553`, 0.16769090294837952`, \
0.1668938845396042`, 0.16666319966316223`, 0.16584959626197815`, \
0.16561372578144073`, 0.16480648517608643`, 0.1647784560918808`, \
0.16386689245700836`, 0.1639154851436615`, 0.16371436417102814`, \
0.16280128061771393`, 0.1630023717880249`, 0.16241908073425293`, \
0.16192060708999634`, 0.16937877237796783`, 0.12721559405326843`, \
0.503633439540863`, 0.9647027254104614`, 1.1134874820709229`, \
0.34290820360183716`, 0.10630406439304352`, 0.17271161079406738`, \
0.1601983904838562`, 0.16027943789958954`, 0.16020818054676056`, \
0.15987949073314667`, 0.15988901257514954`, 0.15989035367965698`, \
0.15987493097782135`, 0.15993985533714294`, 0.16025492548942566`, \
0.1607666015625`, 0.16100816428661346`, 0.16131691634655`, \
0.1594407856464386`, 0.16849862039089203`, 0.15477310121059418`, \
0.10885167866945267`, 0.10897770524024963`, 0.17245794832706451`, \
0.1625760942697525`, 0.162444069981575`, 0.17568077147006989`, \
0.10528473556041718`, 0.8355860114097595`, 1.1210969686508179`, \
0.989825427532196`, 0.9876682758331299`, 0.9919624924659729`, \
0.9930774569511414`, 0.9929813742637634`, 0.9922946691513062`, \
0.9973891973495483`, 1.0005393028259277`, 0.9998760223388672`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`], List[0.9930907487869263`, 0.987860918045044`, \
1.0124988555908203`, 1.0754671096801758`, 0.8977987170219421`, \
0.5296179056167603`, 0.1790914684534073`, 0.17731742560863495`, \
0.1690632849931717`, 0.16791486740112305`, 0.1672956645488739`, \
0.16688156127929688`, 0.1662600338459015`, 0.16582229733467102`, \
0.16523905098438263`, 0.16475722193717957`, 0.164228618144989`, \
0.1636689007282257`, 0.1632642149925232`, 0.1631540060043335`, \
0.1623305082321167`, 0.1623224914073944`, 0.16173909604549408`, \
0.1612369865179062`, 0.16134841740131378`, 0.16077351570129395`, \
0.1631859391927719`, 0.14253640174865723`, 0.9255910515785217`, \
1.0386782884597778`, 1.0153610706329346`, 0.7203546762466431`, \
0.13805238902568817`, 0.16377080976963043`, 0.15985217690467834`, \
0.15949822962284088`, 0.15943476557731628`, 0.15909267961978912`, \
0.15909990668296814`, 0.15910182893276215`, 0.15908528864383698`, \
0.15915228426456451`, 0.15950000286102295`, 0.15942040085792542`, \
0.1593838930130005`, 0.1574193388223648`, 0.16808843612670898`, \
0.13814058899879456`, 0.14518967270851135`, 0.5904645919799805`, \
0.5900596380233765`, 0.08357783406972885`, 0.1707361787557602`, \
0.16180193424224854`, 0.1734118014574051`, 0.10916274040937424`, \
0.7869263887405396`, 1.0310238599777222`, 0.9875007271766663`, \
1.0005502700805664`, 0.9998885989189148`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.000123381614685`, \
0.9994716644287109`, 0.9979024529457092`, 0.9798148274421692`, \
1.0306370258331299`, 1.063324213027954`, 0.8978050351142883`, \
0.15367908775806427`, 0.17069277167320251`, 0.16604827344417572`, \
0.17273399233818054`, 0.18388931453227997`, 0.18218137323856354`, \
0.1672591269016266`, 0.16380532085895538`, 0.16382509469985962`, \
0.1632072478532791`, 0.1627189964056015`, 0.16211199760437012`, \
0.16172225773334503`, 0.16156551241874695`, 0.16080795228481293`, \
0.16074946522712708`, 0.16032370924949646`, 0.15988098084926605`, \
0.1599978506565094`, 0.1619371771812439`, 0.1431226283311844`, \
0.9022146463394165`, 1.0026116371154785`, 1.017797827720642`, \
0.8929157257080078`, 0.10826089978218079`, 0.16614830493927002`, \
0.15676847100257874`, 0.1577787697315216`, 0.15779072046279907`, \
0.1578761488199234`, 0.15788446366786957`, 0.15788200497627258`, \
0.1578873097896576`, 0.15786413848400116`, 0.15775258839130402`, \
0.15790089964866638`, 0.15796144306659698`, 0.16775541007518768`, \
0.12051176279783249`, 0.2953946590423584`, 0.9465041160583496`, \
1.0362293720245361`, 1.078980803489685`, 0.5552686452865601`, \
0.10106342285871506`, 0.17201748490333557`, 0.17197492718696594`, \
0.10678965598344803`, 0.7950679063796997`, 1.0479872226715088`, \
0.9894495606422424`, 0.9999998807907104`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 0.9997495412826538`, \
1.0014110803604126`, 0.9798358082771301`, 1.040717363357544`, \
0.49565017223358154`, 0.12835267186164856`, 0.1762947291135788`, \
0.17418953776359558`, 0.14004383981227875`, 0.08574371039867401`, \
0.09110664576292038`, 0.1554824411869049`, 0.17326854169368744`, \
0.1740242838859558`, 0.16466490924358368`, 0.16106872260570526`, \
0.16125255823135376`, 0.1609565019607544`, 0.16035324335098267`, \
0.1600879728794098`, 0.15968815982341766`, 0.15926675498485565`, \
0.159122496843338`, 0.15849760174751282`, 0.16819119453430176`, \
0.11214516311883926`, 0.4968334436416626`, 1.1165796518325806`, \
1.0092341899871826`, 1.1099064350128174`, 0.5186999440193176`, \
0.0943785309791565`, 0.17168991267681122`, 0.15706586837768555`, \
0.15713649988174438`, 0.15676374733448029`, 0.15640154480934143`, \
0.15655097365379333`, 0.15604284405708313`, 0.15831409394741058`, \
0.1681821346282959`, 0.15853779017925262`, 0.16164319217205048`, \
0.13934411108493805`, 0.2253289371728897`, 0.961216151714325`, \
1.0358171463012695`, 0.9837955236434937`, 0.9841857552528381`, \
1.0807710886001587`, 0.4878404140472412`, 0.10285975784063339`, \
0.18437336385250092`, 0.10599610209465027`, 0.7952213287353516`, \
1.0480421781539917`, 0.9894362092018127`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
0.9999788403511047`, 0.9873859286308289`, 1.0563600063323975`, \
0.3096972703933716`, 0.09885130077600479`, 0.16835331916809082`, \
0.11446600407361984`, 0.3124106526374817`, 0.6311082243919373`, \
0.5955339074134827`, 0.20922903716564178`, 0.11117754876613617`, \
0.10980928689241409`, 0.16349104046821594`, 0.17249004542827606`, \
0.15787260234355927`, 0.1599631905555725`, 0.15949586033821106`, \
0.15877050161361694`, 0.15867829322814941`, 0.1581253856420517`, \
0.15764378011226654`, 0.15769284963607788`, 0.16289673745632172`, \
0.13321813941001892`, 0.21512751281261444`, 0.6471536755561829`, \
0.8135784268379211`, 0.577781617641449`, 0.3904869258403778`, \
0.11651335656642914`, 0.16474549472332`, 0.1557237058877945`, \
0.15688052773475647`, 0.15579307079315186`, 0.15593190491199493`, \
0.15422523021697998`, 0.16512887179851532`, 0.1649666577577591`, \
0.10453518480062485`, 0.15127551555633545`, 0.16441763937473297`, \
0.13263824582099915`, 0.2758599817752838`, 1.0309762954711914`, \
0.9883875250816345`, 1.001334309577942`, 0.980537474155426`, \
1.0731204748153687`, 0.5926969051361084`, 0.07787911593914032`, \
0.18899521231651306`, 0.10449136793613434`, 0.7948958277702332`, \
1.0481175184249878`, 0.9894198179244995`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, \
0.9947287440299988`, 1.0220775604248047`, 0.599097728729248`, \
0.8690870404243469`, 0.9022654294967651`, 0.8793572187423706`, \
0.9587831497192383`, 1.0864105224609375`, 1.0624173879623413`, \
0.9612074494361877`, 0.5491634607315063`, 0.34517666697502136`, \
0.15866191685199738`, 0.10771191120147705`, 0.1687822788953781`, \
0.15713825821876526`, 0.15824855864048004`, 0.15789969265460968`, \
0.15736643970012665`, 0.15713955461978912`, 0.15693829953670502`, \
0.1564350575208664`, 0.15520507097244263`, 0.16106265783309937`, \
0.13851214945316315`, 0.09955189377069473`, 0.19188126921653748`, \
0.061218686401844025`, 0.11675360053777695`, 0.16216102242469788`, \
0.1534276008605957`, 0.15483394265174866`, 0.1509220153093338`, \
0.1685912162065506`, 0.16792672872543335`, 0.1743985414505005`, \
0.11360087245702744`, 0.1132919043302536`, 0.3741034269332886`, \
0.1681457906961441`, 0.14954684674739838`, 0.07064982503652573`, \
0.7017998099327087`, 1.044915795326233`, 0.9902799725532532`, \
0.999718427658081`, 0.998170018196106`, 1.0045146942138672`, \
0.957318902015686`, 0.24742472171783447`, 0.145699605345726`, \
0.10863874852657318`, 0.794762134552002`, 1.0481499433517456`, \
0.989410400390625`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.0005884170532227`, \
0.9974389672279358`, 1.037315011024475`, 1.0302656888961792`, \
1.02642023563385`, 1.0311897993087769`, 1.0115166902542114`, \
0.9798566699028015`, 0.9837986826896667`, 1.019694209098816`, \
1.040824294090271`, 1.0694046020507812`, 0.8195738792419434`, \
0.40039438009262085`, 0.11728383600711823`, 0.16795004904270172`, \
0.15743611752986908`, 0.1567135900259018`, 0.1565636247396469`, \
0.1561173051595688`, 0.1555878072977066`, 0.1556376814842224`, \
0.15558373928070068`, 0.15384970605373383`, 0.16005192697048187`, \
0.16700921952724457`, 0.14430561661720276`, 0.17549456655979156`, \
0.16131620109081268`, 0.152338907122612`, 0.15325722098350525`, \
0.15771621465682983`, 0.16007761657238007`, 0.07905379682779312`, \
0.09829249978065491`, 0.06047756224870682`, 0.3494594097137451`, \
0.7735074758529663`, 1.066171646118164`, 0.3332633972167969`, \
0.1452227681875229`, 0.33532384037971497`, 0.9711264967918396`, \
1.0099848508834839`, 0.9957079887390137`, 1.0000040531158447`, \
1.000219464302063`, 0.9947664141654968`, 1.030781865119934`, \
0.27472540736198425`, 0.1378789246082306`, 0.10848984122276306`, \
0.7943945527076721`, 1.0482354164123535`, 0.9893937706947327`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, \
1.`, 1.`, 1.0000001192092896`, 0.9998730421066284`, 1.0005464553833008`, \
0.9917829036712646`, 0.9938898086547852`, 0.9946545958518982`, \
0.9939987659454346`, 0.9964709877967834`, 1.000448226928711`, \
0.9998905658721924`, 0.9957056045532227`, 0.991215705871582`, \
0.9645097255706787`, 1.1246837377548218`, 0.6152794361114502`, \
0.07755155861377716`, 0.17454974353313446`, 0.1561928242444992`, \
0.15583226084709167`, 0.15535692870616913`, 0.15504255890846252`, \
0.1549452841281891`, 0.15425720810890198`, 0.15398433804512024`, \
0.15405692160129547`, 0.15363146364688873`, 0.15418964624404907`, \
0.15602408349514008`, 0.15484760701656342`, 0.16996636986732483`, \
0.16874249279499054`, 0.18161071836948395`, 0.11471274495124817`, \
0.720321774482727`, 0.5436314344406128`, 0.43236243724823`, \
0.4582383632659912`, 0.9755700826644897`, 1.0660006999969482`, \
1.0127017498016357`, 0.8364130258560181`, 0.8180860280990601`, \
1.0798081159591675`, 1.0653936862945557`, 0.9833861589431763`, \
1.0025811195373535`, 0.999692976474762`, 1.000112771987915`, \
0.9952528476715088`, 1.0279642343521118`, 0.27252787351608276`, \
0.13693292438983917`, 0.10738661885261536`, 0.794257640838623`, \
1.0482679605484009`, 0.989384651184082`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
0.9999804496765137`, 1.000227928161621`, 0.9990984201431274`, \
0.9956070780754089`, 1.0005308389663696`, 0.999875545501709`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 0.999785840511322`, 0.9846941828727722`, 1.0596015453338623`, \
0.5739097595214844`, 0.09362461417913437`, 0.18008951842784882`, \
0.16374142467975616`, 0.1630486696958542`, 0.16283991932868958`, \
0.16247493028640747`, 0.16185355186462402`, 0.1617177277803421`, \
0.16160109639167786`, 0.16132497787475586`, 0.16093547642230988`, \
0.160236194729805`, 0.1641482561826706`, 0.1434444636106491`, \
0.06916603446006775`, 0.08208823204040527`, 0.07353870570659637`, \
0.11948949843645096`, 0.6410732865333557`, 0.4701123535633087`, \
1.006940484046936`, 1.084755539894104`, 1.0011909008026123`, \
0.9800394177436829`, 0.9986318349838257`, 0.9657264947891235`, \
0.5952802896499634`, 0.6426041722297668`, 0.44533771276474`, \
1.0568721294403076`, 0.9841833114624023`, 1.0018855333328247`, \
0.9980764389038086`, 1.004152536392212`, 0.9764097332954407`, \
0.2572784721851349`, 0.14995640516281128`, 0.11441782861948013`, \
0.7959389686584473`, 1.0478731393814087`, 0.989473283290863`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, \
1.`, 1.0000940561294556`, 0.9986073970794678`, 1.005867838859558`, \
1.0138572454452515`, 0.9919028878211975`, 1.0018914937973022`, \
0.999787449836731`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9824711680412292`, \
1.0764108896255493`, 0.5578740835189819`, 0.03893503546714783`, \
0.13238003849983215`, 0.1144762933254242`, 0.114089734852314`, \
0.11361193656921387`, 0.11330340802669525`, 0.11277984082698822`, \
0.11261793226003647`, 0.11232281476259232`, 0.11216437816619873`, \
0.11198790371417999`, 0.11537878215312958`, 0.09299973398447037`, \
0.21101941168308258`, 0.6064031720161438`, 0.5491694211959839`, \
0.4906216263771057`, 0.7506298422813416`, 0.6348546743392944`, \
0.6624462008476257`, 1.0242441892623901`, 0.977217435836792`, \
0.9951719641685486`, 1.0050557851791382`, 1.0586618185043335`, \
1.0095187425613403`, 0.3139246702194214`, 0.0763627365231514`, \
0.13780491054058075`, 0.8417903184890747`, 1.0584416389465332`, \
0.9816794395446777`, 0.9844191670417786`, 1.0767688751220703`, \
0.5540891289710999`, 0.035663068294525146`, 0.144161656498909`, \
0.056812115013599396`, 0.7840926051139832`, 1.050654411315918`, \
0.9888598918914795`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 0.9981968998908997`, \
1.0223170518875122`, 0.9101488590240479`, 0.6263224482536316`, \
1.0731111764907837`, 0.9828898906707764`, 1.0009249448776245`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 0.9864189624786377`, 1.0592032670974731`, 0.657439649105072`, \
0.25550606846809387`, 0.32789847254753113`, 0.31399106979370117`, \
0.3137650191783905`, 0.3133102357387543`, 0.3131355047225952`, \
0.31271475553512573`, 0.3125026226043701`, 0.312326580286026`, \
0.3122590482234955`, 0.31175678968429565`, 0.31374645233154297`, \
0.30035120248794556`, 0.23650017380714417`, 0.8366941809654236`, \
1.0415860414505005`, 1.0891811847686768`, 1.0389137268066406`, \
1.0579158067703247`, 1.0553865432739258`, 0.994256317615509`, \
0.9993797540664673`, 1.0095559358596802`, 0.9568470120429993`, \
0.8239621520042419`, 0.2610982656478882`, 0.029366742819547653`, \
0.18724186718463898`, 0.1391909271478653`, 0.15874025225639343`, \
0.8501384854316711`, 1.05682373046875`, 0.9735467433929443`, \
1.0607017278671265`, 0.6563078761100769`, 0.25367170572280884`, \
0.3367577791213989`, 0.26938754320144653`, 0.8327683806419373`, \
1.0392342805862427`, 0.9913710355758667`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
0.9977161288261414`, 1.018389344215393`, 0.9372711181640625`, \
0.2822719216346741`, 0.9071163535118103`, 1.0215872526168823`, \
0.9940561056137085`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.0008028745651245`, \
0.9965001344680786`, 1.020249843597412`, 1.0440596342086792`, \
1.0397497415542603`, 1.040571928024292`, 1.0406157970428467`, \
1.0405933856964111`, 1.0406521558761597`, 1.0406521558761597`, \
1.0406378507614136`, 1.0406910181045532`, 1.04071044921875`, \
1.040704369544983`, 1.034366488456726`, 1.0693767070770264`, \
0.7224714756011963`, 0.5363132357597351`, 0.9331397414207458`, \
0.9957743287086487`, 0.9874417185783386`, 0.987233579158783`, \
0.9898971915245056`, 1.0015555620193481`, 0.9967816472053528`, \
1.0049901008605957`, 0.9880889654159546`, 0.3253832757472992`, \
0.4581834673881531`, 0.5853453874588013`, 0.10568301379680634`, \
0.14218896627426147`, 0.13014483451843262`, 0.16439221799373627`, \
0.8514683246612549`, 1.0312944650650024`, 0.9880771636962891`, \
1.0206317901611328`, 1.0442842245101929`, 1.0391725301742554`, \
1.0432188510894775`, 1.0099021196365356`, 0.9976768493652344`, \
1.0005106925964355`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 0.9978120923042297`, \
1.0096359252929688`, 0.9811747670173645`, 0.11494061350822449`, \
0.7611531615257263`, 1.0556318759918213`, 0.9885569214820862`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 0.9998296499252319`, 1.0007426738739014`, 0.9957027435302734`, \
0.990654468536377`, 0.9915662407875061`, 0.9913918375968933`, \
0.9913852214813232`, 0.9913855791091919`, 0.9913774728775024`, \
0.991375207901001`, 0.9913758635520935`, 0.9913684725761414`, \
0.9913657903671265`, 0.9913654327392578`, 0.9925641417503357`, \
0.9859331846237183`, 1.0522663593292236`, 1.0858781337738037`, \
1.009639859199524`, 0.9972373247146606`, 1.0005600452423096`, 1.`, 1.`, 1.`, \
1.0005600452423096`, 0.9941406846046448`, 1.0222190618515015`, \
1.0140248537063599`, 0.5881940126419067`, 0.5219994187355042`, \
0.4174288511276245`, 0.20427007973194122`, 0.16147343814373016`, \
0.06461315602064133`, 0.6559012532234192`, 1.0709600448608398`, \
0.9846554398536682`, 0.9956876039505005`, 0.9906331896781921`, \
0.9916800260543823`, 0.9908314943313599`, 0.9979000687599182`, \
1.0004926919937134`, 0.9998916983604431`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
0.9978384375572205`, 1.0108057260513306`, 0.9747530817985535`, \
0.15739469230175018`, 0.788166880607605`, 1.049332618713379`, \
0.989620566368103`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9997658729553223`, \
1.0010559558868408`, 0.9876975417137146`, 0.9823566675186157`, \
0.9980085492134094`, 1.0005683898925781`, 0.9998846650123596`, 1.`, 1.`, 1.`, \
0.9998846650123596`, 1.001319408416748`, 0.99454665184021`, \
1.0022294521331787`, 1.0275042057037354`, 1.013211727142334`, \
1.1196902990341187`, 0.37636569142341614`, 0.11677950620651245`, \
0.10519421100616455`, 0.698327362537384`, 1.062302827835083`, \
0.9856163263320923`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
0.9995214939117432`, 0.9908780455589294`, 1.053948998451233`, \
0.5285776853561401`, 0.7369004487991333`, 1.0613441467285156`, \
0.989408552646637`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 0.9999150037765503`, 1.000341773033142`, \
0.9980151653289795`, 0.9904232621192932`, 0.9771838784217834`, \
1.0418859720230103`, 0.32795098423957825`, 0.08499178290367126`, \
0.017021168023347855`, 0.6599032282829285`, 1.0702513456344604`, \
0.9839130640029907`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
1.0000745058059692`, 0.9845291376113892`, 1.0789432525634766`, \
0.655443549156189`, 0.7237829566001892`, 1.064421534538269`, \
0.9894818067550659`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9895719289779663`, \
1.0469967126846313`, 0.4516029953956604`, 0.21930283308029175`, \
0.803375244140625`, 0.9777483940124512`, 1.004681944847107`, \
0.9979445934295654`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
0.9999831318855286`, 0.9850344657897949`, 1.0776249170303345`, \
0.6210214495658875`, 0.7157384157180786`, 1.0662946701049805`, \
0.9890779852867126`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999271631240845`, \
1.0003379583358765`, 0.9982210993766785`, 0.9952629804611206`, \
1.013588786125183`, 0.5951098799705505`, 0.8312327861785889`, \
1.0346463918685913`, 0.9926958680152893`, 0.9999982714653015`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 0.9870653748512268`, \
1.0668840408325195`, 0.6799488663673401`, 0.7571156024932861`, \
1.0566452741622925`, 0.99068284034729`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.0003149509429932`, 0.9903943538665771`, 1.0439711809158325`, \
0.5896088480949402`, 0.39274880290031433`, 0.43789806962013245`, \
0.9775438904762268`, 1.0013641119003296`, 0.9980469942092896`, \
0.9999726414680481`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
0.9986274242401123`, 1.0070974826812744`, 0.9660374522209167`, \
0.9742261171340942`, 1.0060110092163086`, 0.9990112781524658`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 0.997633159160614`, 1.0134485960006714`, 0.9343762993812561`, \
1.0212913751602173`, 1.0943025350570679`, 0.8611579537391663`, \
0.8182493448257446`, 1.0476833581924438`, 0.9905694127082825`, \
1.0000998973846436`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
1.0002658367156982`, 0.9986250996589661`, 1.0065791606903076`, \
1.0049928426742554`, 0.998835563659668`, 1.000191569328308`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 0.9994242787361145`, 0.9986969232559204`, 0.9945999979972839`, \
0.801500141620636`, 0.4570326507091522`, 0.061354752629995346`, \
0.4796951115131378`, 1.035119652748108`, 0.9931710362434387`, \
0.9991942644119263`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
0.9999083876609802`, 1.0004736185073853`, 0.9977337121963501`, \
0.9982801079750061`, 1.0004011392593384`, 0.9999340176582336`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.0000271797180176`, 0.9872410893440247`, 1.0585062503814697`, \
0.3477419316768646`, 0.05504675582051277`, 0.1492886245250702`, \
0.1582234501838684`, 0.9525394439697266`, 1.0133131742477417`, \
0.9976120591163635`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.0006095170974731`, \
0.990680992603302`, 1.0460745096206665`, 0.8933823704719543`, \
0.11790600419044495`, 0.13149826228618622`, 0.15062223374843597`, \
0.9624775052070618`, 1.011201024055481`, 0.9977001547813416`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 0.9886344075202942`, 1.054263949394226`, 0.7378910779953003`, \
0.7382647395133972`, 0.2601013779640198`, 0.16168497502803802`, \
0.37144309282302856`, 0.9674239754676819`, 1.0087617635726929`, \
0.998240053653717`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9898175001144409`, \
1.051032543182373`, 0.7480866312980652`, 0.6841291189193726`, \
0.8966407179832458`, 0.7650278210639954`, 1.0456733703613281`, \
0.996673583984375`, 0.9997231960296631`, 1.0000553131103516`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 0.9995227456092834`, 1.001771092414856`, 0.9922491908073425`, \
0.9272122383117676`, 1.0337859392166138`, 0.97609543800354`, \
0.8108898997306824`, 0.9950317740440369`, 1.002357006072998`, \
0.9995250105857849`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.0001662969589233`, \
0.9993007779121399`, 1.0032016038894653`, 1.0186229944229126`, \
0.9908725023269653`, 0.9664907455444336`, 1.0146456956863403`, \
0.9998797178268433`, 0.999843180179596`, 1.000031590461731`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 0.9999551177024841`, 1.000213384628296`, 0.9989679455757141`, \
0.9974453449249268`, 1.00059974193573`, 1.0048223733901978`, \
0.9967260956764221`, 0.9999769926071167`, 1.0000381469726562`, \
0.999992311000824`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9999995231628418`, 1.0000150203704834`, 0.9999405145645142`, \
0.9989489912986755`, 1.0000499486923218`, 0.9999877214431763`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], \
List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`]], \\\"Real32\\\"], List[List[0, 43.`], List[75.`, 0]], List[0.`, \
1.`], Rule[ColorFunction, GrayLevel]], BoxForm`ImageTag[\\\"Real32\\\", \
Rule[ColorSpace, \\\"Grayscale\\\"], Rule[Interleaving, None]], \
Rule[Selectable, False]], Rule[DefaultBaseStyle, \\\"ImageGraphics\\\"], \
Rule[ImageSizeRaw, List[75.`, 43.`]], Rule[PlotRange, List[List[0, 75.`], \
List[0, 43.`]]]]}]}], \\\"\[RightAssociation]\\\"}], \\\",\\\", \
RowBox[{\\\"TargetDevice\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"GPU\\\\\\\"\\\"}]}], \\\"]\\\"}]\\).\"", 2, 68, 9, 
   29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879696752070698*^9, 3.880400275467451*^9, 
  3.880409159241756*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[68]:=",ExpressionUUID->"2b7089a5-5aef-4207-b19d-b9d0d26d417b"],

Cell[BoxData[
 TemplateBox[{
  "MeanAbsoluteLossLayer", "invindata2", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array\\\\\\\"\\\"}]\\) (or a list of \
these).\"", 2, 68, 10, 29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879696752070698*^9, 3.880400275467451*^9, 
  3.880409159280677*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[68]:=",ExpressionUUID->"e4bf1708-8298-4571-8ef3-b1a1c3b8b667"],

Cell[BoxData[
 TemplateBox[{
  "ImageData", "imginv", 
   "\"Expecting an image or graphics instead of \
\\!\\(\\*RowBox[{\\\"$Failed\\\", \\\"[\\\", RowBox[{RowBox[{\\\"\
\[LeftAssociation]\\\", RowBox[{RowBox[{\\\"\\\\\\\"dims\\\\\\\"\\\", \\\"\
\[Rule]\\\", RowBox[{\\\"{\\\", RowBox[{\\\"120\\\", \\\",\\\", \\\"68\\\"}], \
\\\"}\\\"}]}], \\\",\\\", RowBox[{\\\"\\\\\\\"leftName\\\\\\\"\\\", \\\"\
\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/left/\
021.png\\\\\\\"\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"rightName\\\\\\\"\\\", \
\\\"\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/\
right/021.png\\\\\\\"\\\"}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"dispName\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/disp/\
021.png\\\\\\\"\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"iLeft\\\\\\\"\\\", \\\"\
\[Rule]\\\", GraphicsBox[TagBox[RasterBox[NumericArray[List[List[List[152, \
148, 140, 255], List[147, 143, 134, 255], List[144, 140, 132, 255], List[142, \
139, 131, 255], List[142, 138, 130, 255], List[140, 137, 129, 255], List[141, \
137, 129, 255], List[144, 140, 132, 255], List[147, 144, 135, 255], List[151, \
147, 138, 255], List[156, 152, 143, 255], List[159, 155, 146, 255], List[163, \
159, 149, 255], List[166, 162, 152, 255], List[166, 164, 152, 255], List[181, \
168, 165, 255], List[115, 161, 108, 255], List[31, 135, 33, 255], List[46, \
120, 54, 255], List[45, 124, 59, 255], List[53, 129, 70, 255], List[57, 93, \
88, 255], List[51, 75, 84, 255], List[37, 91, 78, 255], List[44, 80, 69, \
255], List[37, 90, 61, 255], List[34, 88, 79, 255], List[168, 133, 99, 255], \
List[250, 135, 108, 255], List[230, 125, 104, 255], List[245, 142, 106, 255], \
List[198, 151, 127, 255], List[168, 151, 137, 255], List[164, 151, 138, 255], \
List[165, 152, 136, 255], List[165, 151, 136, 255], List[166, 151, 136, 255], \
List[170, 151, 136, 255], List[171, 150, 135, 255], List[174, 149, 135, 255], \
List[175, 149, 135, 255], List[175, 147, 134, 255], List[176, 146, 133, 255], \
List[176, 145, 132, 255], List[174, 145, 132, 255], List[173, 144, 131, 255], \
List[174, 143, 131, 255], List[176, 144, 131, 255], List[175, 142, 130, 255], \
List[176, 143, 131, 255], List[177, 143, 130, 255], List[179, 144, 130, 255], \
List[179, 143, 130, 255], List[179, 143, 130, 255], List[181, 143, 130, 255], \
List[181, 143, 130, 255], List[179, 144, 130, 255], List[178, 144, 130, 255], \
List[177, 143, 129, 255], List[177, 143, 130, 255], List[177, 142, 129, 255], \
List[175, 141, 129, 255], List[174, 140, 129, 255], List[172, 139, 129, 255], \
List[171, 139, 129, 255], List[170, 139, 129, 255], List[167, 138, 128, 255], \
List[165, 136, 127, 255], List[162, 136, 127, 255], List[161, 136, 127, 255], \
List[159, 136, 127, 255], List[155, 134, 126, 255], List[152, 133, 126, 255], \
List[150, 133, 126, 255], List[149, 132, 126, 255]], List[List[134, 129, 120, \
255], List[145, 144, 136, 255], List[148, 145, 138, 255], List[145, 142, 134, \
255], List[142, 139, 130, 255], List[143, 139, 131, 255], List[144, 141, 132, \
255], List[146, 143, 134, 255], List[149, 146, 137, 255], List[152, 148, 139, \
255], List[155, 151, 142, 255], List[158, 154, 145, 255], List[161, 157, 148, \
255], List[164, 160, 150, 255], List[166, 162, 152, 255], List[173, 165, 157, \
255], List[103, 128, 97, 255], List[59, 123, 50, 255], List[57, 122, 41, \
255], List[41, 123, 45, 255], List[50, 131, 57, 255], List[65, 114, 78, 255], \
List[67, 102, 76, 255], List[52, 101, 67, 255], List[60, 95, 69, 255], \
List[37, 102, 63, 255], List[30, 89, 66, 255], List[37, 79, 84, 255], \
List[177, 132, 99, 255], List[255, 162, 108, 255], List[254, 141, 105, 255], \
List[228, 155, 121, 255], List[167, 152, 138, 255], List[169, 153, 137, 255], \
List[164, 152, 136, 255], List[164, 151, 136, 255], List[163, 151, 137, 255], \
List[164, 150, 137, 255], List[166, 151, 136, 255], List[169, 152, 136, 255], \
List[171, 150, 136, 255], List[173, 149, 136, 255], List[173, 148, 135, 255], \
List[173, 147, 134, 255], List[173, 146, 133, 255], List[173, 146, 133, 255], \
List[173, 145, 132, 255], List[174, 146, 131, 255], List[174, 145, 131, 255], \
List[175, 144, 131, 255], List[176, 144, 131, 255], List[177, 144, 131, 255], \
List[176, 145, 132, 255], List[178, 145, 131, 255], List[181, 145, 131, 255], \
List[182, 145, 131, 255], List[180, 146, 131, 255], List[180, 146, 131, 255], \
List[180, 145, 131, 255], List[180, 145, 131, 255], List[180, 144, 131, 255], \
List[179, 143, 130, 255], List[179, 144, 130, 255], List[177, 142, 130, 255], \
List[176, 141, 130, 255], List[176, 140, 130, 255], List[175, 140, 129, 255], \
List[171, 139, 129, 255], List[170, 139, 129, 255], List[167, 138, 128, 255], \
List[165, 138, 128, 255], List[163, 137, 127, 255], List[160, 136, 127, 255], \
List[159, 136, 127, 255], List[157, 134, 127, 255]], List[List[106, 89, 72, \
255], List[115, 100, 84, 255], List[127, 118, 107, 255], List[139, 136, 128, \
255], List[146, 144, 137, 255], List[148, 144, 136, 255], List[147, 143, 134, \
255], List[147, 143, 134, 255], List[149, 145, 137, 255], List[152, 148, 140, \
255], List[155, 151, 142, 255], List[158, 154, 145, 255], List[160, 156, 147, \
255], List[162, 158, 148, 255], List[168, 163, 154, 255], List[156, 152, 140, \
255], List[121, 110, 101, 255], List[122, 116, 105, 255], List[93, 120, 78, \
255], List[48, 137, 46, 255], List[36, 148, 45, 255], List[59, 118, 64, 255], \
List[60, 112, 66, 255], List[53, 131, 65, 255], List[63, 123, 75, 255], \
List[48, 108, 65, 255], List[45, 99, 60, 255], List[66, 69, 75, 255], \
List[48, 72, 86, 255], List[172, 141, 102, 255], List[255, 138, 107, 255], \
List[245, 138, 110, 255], List[195, 153, 131, 255], List[167, 147, 137, 255], \
List[163, 155, 137, 255], List[163, 152, 136, 255], List[163, 151, 137, 255], \
List[162, 151, 136, 255], List[163, 151, 136, 255], List[163, 151, 135, 255], \
List[165, 151, 136, 255], List[168, 151, 137, 255], List[170, 149, 136, 255], \
List[170, 150, 136, 255], List[171, 148, 134, 255], List[173, 148, 134, 255], \
List[172, 146, 134, 255], List[173, 146, 132, 255], List[172, 146, 132, 255], \
List[172, 146, 132, 255], List[173, 146, 133, 255], List[173, 146, 132, 255], \
List[175, 145, 132, 255], List[177, 146, 132, 255], List[179, 146, 132, 255], \
List[180, 145, 132, 255], List[181, 146, 131, 255], List[180, 145, 131, 255], \
List[181, 146, 131, 255], List[181, 146, 131, 255], List[180, 145, 133, 255], \
List[181, 145, 132, 255], List[181, 145, 132, 255], List[181, 145, 131, 255], \
List[180, 145, 131, 255], List[180, 144, 131, 255], List[179, 142, 130, 255], \
List[178, 141, 131, 255], List[176, 142, 130, 255], List[174, 140, 130, 255], \
List[171, 140, 128, 255], List[170, 140, 129, 255], List[168, 138, 128, 255], \
List[169, 138, 128, 255], List[166, 137, 128, 255]], List[List[112, 94, 75, \
255], List[115, 92, 70, 255], List[116, 93, 70, 255], List[114, 96, 78, 255], \
List[122, 111, 98, 255], List[135, 129, 121, 255], List[146, 144, 137, 255], \
List[152, 150, 141, 255], List[152, 148, 139, 255], List[151, 147, 138, 255], \
List[154, 150, 141, 255], List[157, 153, 144, 255], List[160, 156, 147, 255], \
List[160, 156, 147, 255], List[167, 164, 153, 255], List[133, 128, 116, 255], \
List[116, 111, 95, 255], List[109, 108, 100, 255], List[118, 113, 111, 255], \
List[107, 119, 102, 255], List[73, 148, 67, 255], List[43, 143, 48, 255], \
List[34, 116, 50, 255], List[54, 153, 53, 255], List[69, 144, 81, 255], \
List[57, 126, 80, 255], List[48, 95, 63, 255], List[74, 71, 65, 255], \
List[52, 82, 71, 255], List[25, 82, 75, 255], List[169, 122, 93, 255], \
List[255, 198, 111, 255], List[242, 217, 119, 255], List[199, 163, 129, 255], \
List[172, 145, 134, 255], List[161, 149, 136, 255], List[163, 153, 137, 255], \
List[162, 150, 137, 255], List[161, 151, 136, 255], List[162, 150, 136, 255], \
List[163, 150, 136, 255], List[164, 149, 136, 255], List[164, 150, 137, 255], \
List[165, 150, 136, 255], List[167, 150, 136, 255], List[169, 150, 136, 255], \
List[170, 148, 135, 255], List[172, 149, 135, 255], List[171, 148, 134, 255], \
List[170, 147, 134, 255], List[171, 147, 134, 255], List[172, 147, 133, 255], \
List[173, 147, 132, 255], List[174, 147, 132, 255], List[176, 147, 132, 255], \
List[177, 146, 132, 255], List[179, 147, 133, 255], List[181, 147, 133, 255], \
List[181, 146, 133, 255], List[181, 145, 132, 255], List[181, 146, 133, 255], \
List[181, 147, 133, 255], List[182, 147, 132, 255], List[181, 146, 132, 255], \
List[182, 147, 133, 255], List[181, 146, 132, 255], List[181, 146, 131, 255], \
List[181, 145, 131, 255], List[181, 144, 130, 255], List[179, 143, 130, 255], \
List[177, 142, 130, 255], List[176, 143, 130, 255], List[175, 142, 130, 255], \
List[174, 140, 129, 255], List[172, 139, 129, 255]], List[List[110, 92, 73, \
255], List[115, 94, 75, 255], List[119, 98, 76, 255], List[121, 98, 76, 255], \
List[122, 97, 73, 255], List[118, 96, 76, 255], List[118, 102, 87, 255], \
List[129, 122, 112, 255], List[146, 142, 134, 255], List[160, 155, 147, 255], \
List[159, 155, 146, 255], List[156, 152, 143, 255], List[157, 153, 143, 255], \
List[162, 158, 149, 255], List[156, 153, 143, 255], List[108, 105, 98, 255], \
List[114, 111, 102, 255], List[106, 107, 101, 255], List[105, 107, 97, 255], \
List[113, 110, 105, 255], List[121, 114, 112, 255], List[99, 124, 91, 255], \
List[53, 131, 54, 255], List[53, 155, 46, 255], List[72, 143, 79, 255], \
List[62, 146, 91, 255], List[51, 117, 66, 255], List[48, 98, 64, 255], \
List[39, 101, 60, 255], List[33, 95, 65, 255], List[26, 73, 58, 255], \
List[178, 188, 95, 255], List[255, 236, 114, 255], List[255, 209, 111, 255], \
List[234, 216, 125, 255], List[193, 164, 130, 255], List[169, 147, 135, 255], \
List[164, 152, 137, 255], List[162, 151, 136, 255], List[160, 151, 137, 255], \
List[161, 150, 137, 255], List[162, 150, 137, 255], List[161, 150, 137, 255], \
List[161, 150, 137, 255], List[160, 149, 136, 255], List[162, 148, 136, 255], \
List[164, 149, 136, 255], List[166, 150, 136, 255], List[168, 150, 137, 255], \
List[169, 150, 136, 255], List[168, 149, 135, 255], List[171, 149, 135, 255], \
List[173, 148, 134, 255], List[173, 148, 134, 255], List[175, 147, 133, 255], \
List[177, 147, 133, 255], List[176, 148, 134, 255], List[179, 148, 134, 255], \
List[180, 148, 134, 255], List[179, 147, 133, 255], List[179, 147, 134, 255], \
List[180, 148, 134, 255], List[180, 146, 134, 255], List[180, 147, 133, 255], \
List[182, 147, 133, 255], List[181, 147, 133, 255], List[181, 147, 133, 255], \
List[183, 147, 132, 255], List[183, 146, 132, 255], List[182, 144, 131, 255], \
List[181, 144, 132, 255], List[181, 145, 131, 255], List[181, 144, 130, 255], \
List[180, 143, 131, 255], List[177, 142, 131, 255]], List[List[109, 91, 73, \
255], List[114, 93, 73, 255], List[115, 94, 73, 255], List[119, 98, 76, 255], \
List[123, 100, 78, 255], List[123, 98, 76, 255], List[121, 96, 74, 255], \
List[107, 83, 64, 255], List[91, 76, 65, 255], List[103, 103, 91, 255], \
List[139, 134, 127, 255], List[162, 158, 148, 255], List[165, 160, 151, 255], \
List[170, 165, 158, 255], List[123, 121, 100, 255], List[89, 88, 55, 255], \
List[107, 104, 91, 255], List[115, 113, 103, 255], List[108, 110, 103, 255], \
List[109, 111, 101, 255], List[101, 104, 97, 255], List[124, 113, 107, 255], \
List[119, 112, 102, 255], List[94, 134, 79, 255], List[69, 146, 71, 255], \
List[45, 151, 76, 255], List[54, 149, 78, 255], List[58, 133, 86, 255], \
List[59, 112, 73, 255], List[52, 96, 66, 255], List[35, 68, 67, 255], \
List[193, 190, 103, 255], List[255, 236, 114, 255], List[252, 208, 110, 255], \
List[255, 212, 111, 255], List[255, 214, 116, 255], List[205, 173, 130, 255], \
List[164, 149, 136, 255], List[165, 153, 136, 255], List[162, 152, 136, 255], \
List[161, 151, 136, 255], List[160, 150, 137, 255], List[160, 150, 137, 255], \
List[159, 149, 137, 255], List[160, 151, 139, 255], List[160, 153, 140, 255], \
List[156, 149, 137, 255], List[159, 148, 136, 255], List[161, 149, 137, 255], \
List[163, 151, 137, 255], List[164, 150, 136, 255], List[167, 151, 136, 255], \
List[169, 151, 136, 255], List[171, 150, 136, 255], List[173, 149, 135, 255], \
List[176, 149, 135, 255], List[176, 148, 135, 255], List[176, 148, 135, 255], \
List[177, 149, 135, 255], List[178, 148, 135, 255], List[177, 148, 135, 255], \
List[178, 148, 135, 255], List[178, 147, 135, 255], List[179, 148, 134, 255], \
List[180, 147, 134, 255], List[180, 147, 134, 255], List[181, 147, 133, 255], \
List[180, 148, 133, 255], List[181, 147, 133, 255], List[182, 146, 133, 255], \
List[182, 145, 133, 255], List[182, 146, 132, 255], List[183, 147, 132, 255], \
List[183, 145, 131, 255], List[182, 145, 131, 255]], List[List[109, 88, 71, \
255], List[111, 91, 72, 255], List[113, 94, 74, 255], List[117, 96, 76, 255], \
List[120, 97, 76, 255], List[116, 91, 70, 255], List[116, 93, 72, 255], \
List[120, 98, 82, 255], List[106, 96, 89, 255], List[72, 68, 61, 255], \
List[73, 68, 63, 255], List[78, 78, 70, 255], List[122, 121, 111, 255], \
List[149, 146, 136, 255], List[57, 57, 54, 255], List[48, 49, 36, 255], \
List[90, 88, 54, 255], List[115, 107, 90, 255], List[118, 115, 106, 255], \
List[108, 108, 99, 255], List[112, 111, 102, 255], List[121, 116, 100, 255], \
List[121, 115, 104, 255], List[122, 107, 103, 255], List[121, 117, 96, 255], \
List[79, 139, 83, 255], List[61, 144, 84, 255], List[70, 141, 78, 255], \
List[65, 140, 74, 255], List[42, 93, 65, 255], List[145, 135, 94, 255], \
List[255, 187, 114, 255], List[247, 162, 106, 255], List[251, 174, 110, 255], \
List[249, 141, 107, 255], List[248, 149, 106, 255], List[251, 203, 118, 255], \
List[185, 152, 132, 255], List[163, 152, 137, 255], List[168, 151, 137, 255], \
List[164, 152, 136, 255], List[162, 151, 136, 255], List[161, 151, 137, 255], \
List[161, 151, 139, 255], List[158, 153, 137, 255], List[161, 155, 138, 255], \
List[159, 154, 141, 255], List[159, 153, 141, 255], List[157, 150, 138, 255], \
List[157, 149, 137, 255], List[159, 150, 137, 255], List[160, 150, 137, 255], \
List[161, 149, 136, 255], List[164, 150, 137, 255], List[165, 151, 137, 255], \
List[168, 150, 136, 255], List[170, 148, 136, 255], List[172, 148, 136, 255], \
List[173, 150, 136, 255], List[173, 150, 136, 255], List[173, 149, 136, 255], \
List[174, 149, 136, 255], List[176, 148, 136, 255], List[176, 148, 136, 255], \
List[174, 148, 136, 255], List[176, 148, 136, 255], List[177, 148, 135, 255], \
List[177, 148, 134, 255], List[179, 148, 134, 255], List[180, 148, 134, 255], \
List[180, 147, 134, 255], List[180, 147, 133, 255], List[180, 147, 133, 255], \
List[181, 147, 133, 255], List[183, 147, 133, 255]], List[List[107, 88, 72, \
255], List[109, 90, 74, 255], List[113, 94, 76, 255], List[116, 94, 76, 255], \
List[116, 94, 74, 255], List[115, 92, 72, 255], List[115, 93, 73, 255], \
List[112, 103, 96, 255], List[109, 103, 100, 255], List[113, 103, 98, 255], \
List[88, 84, 74, 255], List[55, 57, 36, 255], List[78, 74, 64, 255], List[75, \
75, 62, 255], List[52, 54, 42, 255], List[42, 42, 41, 255], List[46, 48, 39, \
255], List[52, 54, 44, 255], List[108, 105, 92, 255], List[143, 139, 126, \
255], List[110, 108, 102, 255], List[107, 103, 93, 255], List[114, 109, 97, \
255], List[119, 114, 101, 255], List[122, 112, 100, 255], List[128, 109, 101, \
255], List[107, 117, 92, 255], List[73, 141, 65, 255], List[43, 132, 50, \
255], List[59, 101, 73, 255], List[186, 148, 111, 255], List[217, 148, 110, \
255], List[241, 129, 108, 255], List[251, 149, 108, 255], List[248, 165, 110, \
255], List[246, 146, 109, 255], List[254, 155, 106, 255], List[232, 176, 121, \
255], List[168, 151, 135, 255], List[169, 152, 137, 255], List[164, 152, 137, \
255], List[164, 153, 136, 255], List[162, 152, 136, 255], List[163, 154, 139, \
255], List[160, 154, 138, 255], List[159, 153, 137, 255], List[159, 155, 139, \
255], List[154, 152, 139, 255], List[156, 152, 141, 255], List[156, 151, 139, \
255], List[155, 150, 137, 255], List[155, 150, 137, 255], List[156, 150, 137, \
255], List[158, 150, 137, 255], List[159, 149, 137, 255], List[159, 150, 136, \
255], List[160, 149, 136, 255], List[162, 150, 136, 255], List[164, 150, 136, \
255], List[165, 150, 136, 255], List[166, 150, 136, 255], List[166, 149, 136, \
255], List[169, 149, 136, 255], List[167, 147, 135, 255], List[167, 149, 136, \
255], List[168, 149, 136, 255], List[169, 150, 136, 255], List[173, 149, 136, \
255], List[175, 150, 136, 255], List[176, 149, 136, 255], List[178, 148, 136, \
255], List[178, 148, 135, 255], List[179, 148, 134, 255], List[179, 147, 133, \
255], List[180, 147, 133, 255]], List[List[105, 87, 72, 255], List[108, 89, \
74, 255], List[112, 91, 73, 255], List[116, 93, 74, 255], List[112, 90, 73, \
255], List[111, 90, 70, 255], List[125, 110, 94, 255], List[145, 142, 136, \
255], List[122, 118, 112, 255], List[128, 124, 120, 255], List[115, 114, 106, \
255], List[106, 104, 91, 255], List[111, 101, 98, 255], List[103, 94, 89, \
255], List[103, 97, 85, 255], List[69, 70, 55, 255], List[53, 56, 42, 255], \
List[40, 45, 36, 255], List[42, 47, 34, 255], List[117, 117, 81, 255], \
List[150, 148, 131, 255], List[122, 122, 120, 255], List[117, 111, 99, 255], \
List[121, 109, 94, 255], List[120, 111, 97, 255], List[117, 115, 103, 255], \
List[122, 112, 103, 255], List[124, 115, 106, 255], List[90, 114, 88, 255], \
List[91, 103, 95, 255], List[96, 93, 109, 255], List[92, 99, 107, 255], \
List[164, 118, 108, 255], List[254, 151, 109, 255], List[251, 156, 108, 255], \
List[255, 178, 109, 255], List[254, 187, 110, 255], List[248, 183, 110, 255], \
List[187, 153, 129, 255], List[164, 152, 136, 255], List[169, 154, 137, 255], \
List[165, 153, 137, 255], List[164, 153, 137, 255], List[160, 152, 136, 255], \
List[160, 152, 136, 255], List[159, 151, 136, 255], List[159, 154, 140, 255], \
List[150, 148, 136, 255], List[155, 152, 138, 255], List[160, 155, 140, 255], \
List[160, 155, 140, 255], List[158, 153, 139, 255], List[157, 152, 138, 255], \
List[155, 150, 137, 255], List[156, 151, 137, 255], List[156, 150, 137, 255], \
List[156, 150, 136, 255], List[155, 151, 137, 255], List[156, 149, 137, 255], \
List[156, 149, 137, 255], List[156, 148, 136, 255], List[158, 149, 137, 255], \
List[160, 149, 137, 255], List[159, 149, 138, 255], List[159, 149, 138, 255], \
List[160, 150, 137, 255], List[160, 149, 137, 255], List[162, 149, 137, 255], \
List[165, 149, 137, 255], List[167, 149, 137, 255], List[170, 149, 136, 255], \
List[173, 148, 136, 255], List[176, 149, 136, 255], List[177, 149, 136, 255], \
List[178, 149, 136, 255]], List[List[103, 85, 72, 255], List[109, 91, 75, \
255], List[112, 91, 73, 255], List[109, 88, 73, 255], List[112, 90, 73, 255], \
List[110, 88, 69, 255], List[140, 132, 121, 255], List[163, 158, 148, 255], \
List[160, 156, 146, 255], List[133, 132, 128, 255], List[122, 122, 118, 255], \
List[132, 131, 128, 255], List[131, 129, 124, 255], List[119, 111, 105, 255], \
List[113, 103, 98, 255], List[99, 91, 85, 255], List[65, 67, 49, 255], \
List[45, 50, 38, 255], List[48, 52, 43, 255], List[51, 52, 36, 255], List[61, \
63, 45, 255], List[110, 111, 99, 255], List[126, 124, 117, 255], List[125, \
115, 100, 255], List[121, 112, 100, 255], List[114, 109, 98, 255], List[122, \
117, 102, 255], List[114, 111, 100, 255], List[115, 112, 107, 255], List[117, \
116, 110, 255], List[110, 110, 109, 255], List[95, 99, 109, 255], List[113, \
103, 108, 255], List[239, 180, 113, 255], List[255, 203, 111, 255], List[253, \
199, 110, 255], List[254, 186, 111, 255], List[253, 172, 109, 255], List[244, \
197, 121, 255], List[190, 164, 133, 255], List[165, 151, 137, 255], List[171, \
155, 137, 255], List[158, 148, 134, 255], List[156, 150, 133, 255], List[158, \
150, 136, 255], List[158, 150, 136, 255], List[157, 152, 137, 255], List[158, \
154, 140, 255], List[159, 153, 139, 255], List[160, 154, 138, 255], List[160, \
155, 138, 255], List[160, 155, 139, 255], List[152, 148, 134, 255], List[157, \
152, 139, 255], List[156, 151, 138, 255], List[155, 151, 137, 255], List[154, \
149, 136, 255], List[155, 149, 136, 255], List[155, 151, 137, 255], List[158, \
154, 141, 255], List[158, 154, 141, 255], List[154, 150, 137, 255], List[155, \
149, 138, 255], List[156, 149, 138, 255], List[156, 150, 138, 255], List[155, \
148, 138, 255], List[155, 148, 138, 255], List[156, 149, 138, 255], List[155, \
149, 138, 255], List[158, 148, 138, 255], List[160, 149, 137, 255], List[163, \
149, 136, 255], List[165, 150, 136, 255], List[169, 149, 136, 255], List[172, \
149, 136, 255]], List[List[102, 85, 72, 255], List[107, 88, 73, 255], \
List[110, 90, 74, 255], List[107, 89, 74, 255], List[109, 87, 70, 255], \
List[115, 98, 84, 255], List[150, 147, 138, 255], List[155, 151, 141, 255], \
List[159, 155, 145, 255], List[148, 145, 138, 255], List[137, 136, 130, 255], \
List[145, 143, 137, 255], List[150, 149, 144, 255], List[141, 139, 132, 255], \
List[129, 124, 118, 255], List[117, 110, 102, 255], List[70, 72, 46, 255], \
List[62, 63, 51, 255], List[78, 75, 63, 255], List[63, 63, 53, 255], List[46, \
50, 41, 255], List[49, 53, 38, 255], List[99, 72, 61, 255], List[104, 93, 86, \
255], List[107, 108, 105, 255], List[111, 110, 104, 255], List[113, 110, 100, \
255], List[112, 113, 105, 255], List[107, 109, 101, 255], List[111, 112, 103, \
255], List[115, 115, 106, 255], List[117, 115, 107, 255], List[114, 108, 110, \
255], List[143, 131, 118, 255], List[225, 165, 111, 255], List[255, 172, 109, \
255], List[251, 143, 107, 255], List[250, 145, 107, 255], List[255, 169, 109, \
255], List[247, 175, 116, 255], List[192, 168, 134, 255], List[171, 155, 139, \
255], List[161, 155, 137, 255], List[154, 150, 134, 255], List[153, 147, 133, \
255], List[156, 151, 138, 255], List[153, 152, 139, 255], List[156, 150, 136, \
255], List[159, 151, 136, 255], List[161, 153, 137, 255], List[161, 154, 138, \
255], List[160, 154, 136, 255], List[152, 149, 133, 255], List[160, 154, 137, \
255], List[158, 154, 139, 255], List[160, 155, 141, 255], List[162, 157, 142, \
255], List[162, 156, 141, 255], List[155, 150, 137, 255], List[138, 135, 124, \
255], List[133, 130, 120, 255], List[159, 153, 141, 255], List[155, 150, 137, \
255], List[156, 150, 138, 255], List[156, 150, 138, 255], List[155, 150, 138, \
255], List[154, 150, 138, 255], List[153, 149, 138, 255], List[153, 149, 137, \
255], List[153, 147, 137, 255], List[155, 149, 138, 255], List[156, 149, 138, \
255], List[156, 150, 137, 255], List[159, 150, 138, 255], List[160, 149, 138, \
255]], List[List[103, 85, 72, 255], List[104, 85, 69, 255], List[105, 88, 73, \
255], List[108, 90, 74, 255], List[105, 85, 69, 255], List[127, 119, 110, \
255], List[150, 148, 140, 255], List[153, 149, 139, 255], List[158, 154, 144, \
255], List[162, 158, 147, 255], List[155, 152, 145, 255], List[157, 155, 148, \
255], List[158, 156, 149, 255], List[157, 155, 148, 255], List[147, 145, 141, \
255], List[128, 128, 123, 255], List[110, 111, 96, 255], List[106, 100, 91, \
255], List[93, 85, 81, 255], List[79, 75, 65, 255], List[60, 69, 45, 255], \
List[76, 62, 50, 255], List[81, 47, 39, 255], List[61, 54, 46, 255], \
List[110, 108, 100, 255], List[113, 111, 104, 255], List[110, 108, 101, 255], \
List[116, 112, 101, 255], List[115, 115, 107, 255], List[112, 113, 105, 255], \
List[106, 106, 99, 255], List[122, 116, 103, 255], List[123, 117, 101, 255], \
List[114, 110, 106, 255], List[133, 117, 114, 255], List[227, 156, 115, 255], \
List[255, 134, 107, 255], List[247, 155, 108, 255], List[249, 217, 115, 255], \
List[255, 233, 120, 255], List[207, 185, 106, 255], List[76, 79, 84, 255], \
List[117, 115, 106, 255], List[158, 152, 135, 255], List[162, 157, 139, 255], \
List[146, 144, 134, 255], List[148, 146, 136, 255], List[156, 152, 137, 255], \
List[158, 151, 136, 255], List[161, 153, 136, 255], List[162, 154, 136, 255], \
List[159, 152, 134, 255], List[163, 155, 136, 255], List[162, 155, 138, 255], \
List[160, 154, 138, 255], List[151, 147, 133, 255], List[134, 131, 120, 255], \
List[116, 112, 104, 255], List[97, 95, 90, 255], List[85, 84, 80, 255], \
List[83, 81, 78, 255], List[140, 136, 125, 255], List[162, 156, 143, 255], \
List[156, 151, 138, 255], List[155, 152, 138, 255], List[156, 152, 139, 255], \
List[155, 152, 139, 255], List[153, 151, 138, 255], List[154, 150, 138, 255], \
List[154, 150, 138, 255], List[154, 150, 138, 255], List[154, 150, 138, 255], \
List[154, 149, 138, 255], List[155, 149, 138, 255], List[155, 150, 139, \
255]], List[List[105, 86, 70, 255], List[106, 86, 72, 255], List[104, 87, 72, \
255], List[104, 84, 68, 255], List[106, 90, 77, 255], List[135, 135, 129, \
255], List[147, 143, 135, 255], List[152, 148, 139, 255], List[157, 153, 143, \
255], List[159, 155, 145, 255], List[172, 168, 157, 255], List[175, 171, 161, \
255], List[173, 169, 159, 255], List[159, 157, 149, 255], List[148, 147, 141, \
255], List[132, 131, 127, 255], List[133, 133, 131, 255], List[136, 130, 125, \
255], List[117, 108, 102, 255], List[106, 97, 91, 255], List[103, 95, 83, \
255], List[101, 67, 56, 255], List[79, 51, 42, 255], List[97, 92, 83, 255], \
List[111, 108, 100, 255], List[109, 107, 99, 255], List[108, 108, 101, 255], \
List[115, 112, 101, 255], List[111, 108, 98, 255], List[117, 113, 103, 255], \
List[116, 114, 105, 255], List[121, 114, 100, 255], List[119, 115, 104, 255], \
List[122, 113, 99, 255], List[124, 116, 101, 255], List[129, 114, 109, 255], \
List[205, 137, 115, 255], List[255, 220, 120, 255], List[255, 248, 120, 255], \
List[255, 222, 116, 255], List[116, 105, 80, 255], List[41, 53, 63, 255], \
List[38, 45, 48, 255], List[60, 64, 68, 255], List[124, 122, 114, 255], \
List[152, 149, 138, 255], List[153, 150, 136, 255], List[154, 150, 133, 255], \
List[155, 150, 134, 255], List[158, 151, 135, 255], List[155, 148, 130, 255], \
List[156, 152, 133, 255], List[160, 152, 134, 255], List[164, 157, 140, 255], \
List[148, 140, 127, 255], List[95, 91, 86, 255], List[84, 82, 77, 255], \
List[83, 81, 77, 255], List[86, 84, 80, 255], List[89, 87, 83, 255], List[86, \
84, 80, 255], List[96, 94, 89, 255], List[158, 152, 138, 255], List[158, 154, \
140, 255], List[156, 152, 139, 255], List[157, 153, 139, 255], List[157, 152, \
139, 255], List[156, 153, 139, 255], List[155, 151, 139, 255], List[155, 151, \
139, 255], List[154, 151, 138, 255], List[155, 150, 138, 255], List[155, 151, \
139, 255], List[155, 151, 139, 255], List[156, 151, 139, 255]], \
List[List[105, 85, 69, 255], List[102, 83, 70, 255], List[106, 87, 72, 255], \
List[103, 83, 67, 255], List[115, 108, 99, 255], List[137, 139, 134, 255], \
List[145, 141, 133, 255], List[152, 148, 138, 255], List[155, 150, 141, 255], \
List[162, 157, 147, 255], List[176, 170, 160, 255], List[176, 171, 160, 255], \
List[177, 172, 161, 255], List[171, 167, 157, 255], List[164, 161, 152, 255], \
List[155, 153, 146, 255], List[147, 147, 141, 255], List[148, 146, 140, 255], \
List[125, 119, 113, 255], List[115, 108, 105, 255], List[134, 121, 111, 255], \
List[90, 57, 50, 255], List[80, 65, 64, 255], List[110, 107, 101, 255], \
List[117, 108, 94, 255], List[111, 107, 99, 255], List[108, 108, 103, 255], \
List[101, 103, 103, 255], List[111, 110, 102, 255], List[115, 111, 101, 255], \
List[110, 108, 101, 255], List[112, 110, 102, 255], List[118, 111, 99, 255], \
List[121, 113, 100, 255], List[123, 113, 101, 255], List[115, 112, 100, 255], \
List[123, 119, 103, 255], List[191, 173, 119, 255], List[204, 166, 118, 255], \
List[147, 119, 103, 255], List[62, 71, 78, 255], List[68, 76, 77, 255], \
List[38, 44, 48, 255], List[24, 31, 40, 255], List[38, 44, 50, 255], List[98, \
102, 99, 255], List[143, 140, 129, 255], List[162, 154, 138, 255], List[155, \
150, 134, 255], List[153, 147, 129, 255], List[182, 176, 165, 255], List[169, \
165, 154, 255], List[155, 148, 131, 255], List[164, 155, 138, 255], List[145, \
140, 126, 255], List[58, 62, 62, 255], List[89, 89, 85, 255], List[89, 87, \
82, 255], List[88, 87, 81, 255], List[88, 86, 82, 255], List[89, 87, 82, \
255], List[83, 81, 77, 255], List[117, 112, 104, 255], List[171, 162, 147, \
255], List[164, 158, 142, 255], List[161, 156, 141, 255], List[160, 156, 141, \
255], List[159, 154, 140, 255], List[158, 154, 140, 255], List[159, 154, 142, \
255], List[159, 154, 142, 255], List[157, 153, 140, 255], List[154, 154, 140, \
255], List[152, 153, 139, 255], List[153, 153, 139, 255]], List[List[104, 83, \
68, 255], List[102, 82, 69, 255], List[106, 85, 69, 255], List[104, 86, 72, \
255], List[129, 127, 120, 255], List[140, 138, 131, 255], List[145, 140, 132, \
255], List[150, 146, 137, 255], List[153, 149, 139, 255], List[168, 163, 153, \
255], List[174, 170, 159, 255], List[172, 168, 157, 255], List[172, 168, 156, \
255], List[174, 169, 158, 255], List[174, 170, 158, 255], List[173, 168, 157, \
255], List[171, 166, 155, 255], List[174, 169, 158, 255], List[163, 158, 149, \
255], List[138, 137, 130, 255], List[118, 105, 97, 255], List[69, 53, 54, \
255], List[96, 92, 85, 255], List[111, 106, 95, 255], List[104, 100, 93, \
255], List[108, 105, 99, 255], List[101, 104, 102, 255], List[95, 102, 103, \
255], List[107, 108, 103, 255], List[107, 106, 101, 255], List[116, 113, 105, \
255], List[111, 111, 106, 255], List[116, 112, 103, 255], List[127, 113, 95, \
255], List[120, 111, 98, 255], List[121, 115, 103, 255], List[123, 116, 102, \
255], List[107, 105, 103, 255], List[119, 117, 116, 255], List[108, 114, 116, \
255], List[97, 106, 108, 255], List[68, 74, 75, 255], List[24, 29, 36, 255], \
List[40, 45, 48, 255], List[60, 66, 68, 255], List[69, 76, 79, 255], List[70, \
76, 75, 255], List[88, 89, 87, 255], List[155, 148, 134, 255], List[194, 190, \
179, 255], List[178, 168, 152, 255], List[131, 113, 84, 255], List[150, 146, \
129, 255], List[168, 167, 151, 255], List[96, 97, 93, 255], List[72, 43, 27, \
255], List[103, 84, 68, 255], List[84, 86, 84, 255], List[89, 87, 82, 255], \
List[88, 86, 81, 255], List[88, 86, 81, 255], List[89, 87, 81, 255], List[85, \
83, 79, 255], List[123, 117, 113, 255], List[155, 149, 136, 255], List[167, \
160, 141, 255], List[167, 161, 143, 255], List[167, 162, 144, 255], List[166, \
160, 145, 255], List[165, 159, 143, 255], List[162, 156, 140, 255], List[165, \
159, 142, 255], List[165, 159, 143, 255], List[165, 161, 144, 255], List[164, \
161, 142, 255]], List[List[100, 81, 65, 255], List[104, 85, 69, 255], \
List[102, 81, 65, 255], List[112, 101, 89, 255], List[138, 136, 128, 255], \
List[140, 136, 128, 255], List[145, 141, 132, 255], List[148, 144, 135, 255], \
List[157, 153, 144, 255], List[172, 167, 157, 255], List[171, 166, 155, 255], \
List[170, 166, 155, 255], List[170, 165, 154, 255], List[170, 165, 154, 255], \
List[170, 165, 154, 255], List[169, 165, 154, 255], List[169, 163, 152, 255], \
List[167, 162, 151, 255], List[168, 163, 153, 255], List[170, 164, 153, 255], \
List[154, 149, 141, 255], List[117, 116, 112, 255], List[95, 93, 88, 255], \
List[115, 106, 93, 255], List[121, 110, 98, 255], List[100, 100, 97, 255], \
List[92, 101, 106, 255], List[98, 102, 102, 255], List[110, 108, 101, 255], \
List[114, 109, 98, 255], List[110, 106, 98, 255], List[109, 108, 105, 255], \
List[111, 109, 106, 255], List[116, 109, 101, 255], List[114, 112, 106, 255], \
List[113, 109, 98, 255], List[121, 116, 105, 255], List[102, 103, 96, 255], \
List[132, 133, 123, 255], List[131, 137, 134, 255], List[114, 119, 120, 255], \
List[42, 48, 51, 255], List[45, 51, 55, 255], List[45, 51, 56, 255], List[51, \
58, 63, 255], List[75, 80, 78, 255], List[47, 53, 58, 255], List[71, 75, 82, \
255], List[192, 187, 176, 255], List[152, 138, 115, 255], List[116, 95, 62, \
255], List[136, 125, 101, 255], List[157, 144, 125, 255], List[136, 111, 90, \
255], List[111, 69, 44, 255], List[155, 96, 57, 255], List[98, 89, 80, 255], \
List[67, 67, 66, 255], List[86, 84, 79, 255], List[88, 86, 81, 255], List[89, \
87, 82, 255], List[89, 87, 83, 255], List[89, 87, 81, 255], List[83, 82, 81, \
255], List[101, 104, 108, 255], List[110, 112, 114, 255], List[109, 113, 114, \
255], List[124, 126, 122, 255], List[135, 134, 130, 255], List[128, 128, 126, \
255], List[111, 115, 115, 255], List[124, 125, 121, 255], List[118, 120, 119, \
255], List[134, 133, 126, 255], List[128, 128, 123, 255]], List[List[103, 83, \
66, 255], List[110, 89, 71, 255], List[101, 83, 66, 255], List[124, 120, 110, \
255], List[138, 134, 127, 255], List[140, 136, 128, 255], List[144, 141, 131, \
255], List[148, 144, 135, 255], List[166, 161, 151, 255], List[169, 164, 154, \
255], List[168, 163, 153, 255], List[167, 163, 152, 255], List[167, 163, 152, \
255], List[166, 162, 151, 255], List[166, 161, 150, 255], List[164, 160, 149, \
255], List[163, 158, 148, 255], List[161, 156, 146, 255], List[158, 154, 144, \
255], List[160, 155, 145, 255], List[160, 153, 143, 255], List[103, 103, 100, \
255], List[100, 96, 89, 255], List[132, 114, 99, 255], List[145, 121, 100, \
255], List[128, 116, 104, 255], List[92, 98, 100, 255], List[101, 103, 101, \
255], List[107, 104, 96, 255], List[114, 108, 96, 255], List[114, 107, 96, \
255], List[112, 107, 98, 255], List[113, 108, 103, 255], List[107, 109, 108, \
255], List[111, 109, 103, 255], List[112, 110, 104, 255], List[112, 110, 100, \
255], List[119, 118, 109, 255], List[147, 150, 145, 255], List[153, 157, 151, \
255], List[88, 94, 93, 255], List[67, 74, 78, 255], List[54, 61, 66, 255], \
List[33, 39, 46, 255], List[58, 64, 66, 255], List[57, 62, 63, 255], List[41, \
49, 56, 255], List[82, 86, 88, 255], List[196, 190, 178, 255], List[152, 141, \
119, 255], List[121, 105, 88, 255], List[146, 106, 79, 255], List[144, 83, \
45, 255], List[129, 66, 27, 255], List[140, 67, 22, 255], List[132, 102, 79, \
255], List[137, 139, 128, 255], List[79, 76, 71, 255], List[77, 75, 72, 255], \
List[77, 75, 71, 255], List[81, 79, 75, 255], List[82, 80, 76, 255], List[86, \
84, 80, 255], List[85, 84, 79, 255], List[111, 108, 100, 255], List[149, 146, \
136, 255], List[109, 114, 115, 255], List[105, 110, 114, 255], List[116, 119, \
121, 255], List[107, 112, 116, 255], List[101, 109, 114, 255], List[114, 120, \
122, 255], List[118, 123, 122, 255], List[115, 121, 121, 255], List[115, 122, \
121, 255]], List[List[38, 36, 40, 255], List[55, 48, 45, 255], List[99, 90, \
80, 255], List[135, 132, 124, 255], List[136, 132, 124, 255], List[140, 137, \
128, 255], List[141, 138, 129, 255], List[154, 150, 141, 255], List[167, 162, \
151, 255], List[165, 161, 150, 255], List[165, 161, 151, 255], List[164, 160, \
149, 255], List[163, 159, 148, 255], List[162, 158, 148, 255], List[160, 156, \
146, 255], List[159, 154, 144, 255], List[156, 152, 142, 255], List[155, 151, \
142, 255], List[151, 148, 139, 255], List[154, 152, 146, 255], List[113, 125, \
120, 255], List[93, 91, 86, 255], List[128, 112, 98, 255], List[146, 125, \
106, 255], List[142, 121, 104, 255], List[145, 124, 105, 255], List[134, 117, \
102, 255], List[109, 105, 97, 255], List[110, 106, 95, 255], List[110, 104, \
95, 255], List[109, 105, 100, 255], List[113, 106, 96, 255], List[114, 107, \
96, 255], List[112, 107, 98, 255], List[112, 109, 102, 255], List[113, 112, \
105, 255], List[110, 107, 97, 255], List[142, 140, 130, 255], List[163, 167, \
162, 255], List[123, 128, 124, 255], List[107, 114, 113, 255], List[89, 100, \
107, 255], List[40, 47, 54, 255], List[41, 48, 54, 255], List[79, 84, 81, \
255], List[48, 54, 60, 255], List[54, 61, 66, 255], List[71, 77, 77, 255], \
List[167, 163, 153, 255], List[222, 220, 211, 255], List[188, 165, 146, 255], \
List[130, 61, 20, 255], List[134, 69, 28, 255], List[136, 70, 29, 255], \
List[151, 107, 79, 255], List[128, 124, 115, 255], List[123, 119, 110, 255], \
List[95, 92, 85, 255], List[74, 72, 69, 255], List[88, 86, 81, 255], List[84, \
82, 78, 255], List[80, 78, 74, 255], List[83, 82, 77, 255], List[88, 87, 83, \
255], List[82, 81, 77, 255], List[138, 132, 119, 255], List[168, 162, 147, \
255], List[127, 129, 125, 255], List[116, 120, 121, 255], List[122, 127, 123, \
255], List[124, 129, 125, 255], List[123, 129, 126, 255], List[130, 135, 130, \
255], List[132, 136, 131, 255], List[129, 136, 131, 255]], List[List[21, 21, \
30, 255], List[42, 40, 43, 255], List[90, 87, 85, 255], List[122, 118, 112, \
255], List[131, 128, 121, 255], List[134, 131, 124, 255], List[145, 141, 132, \
255], List[163, 159, 148, 255], List[163, 159, 148, 255], List[162, 158, 147, \
255], List[161, 157, 147, 255], List[161, 156, 147, 255], List[160, 155, 146, \
255], List[159, 154, 145, 255], List[156, 151, 141, 255], List[152, 149, 140, \
255], List[147, 146, 139, 255], List[142, 143, 137, 255], List[147, 146, 136, \
255], List[112, 127, 132, 255], List[43, 98, 136, 255], List[121, 109, 93, \
255], List[143, 121, 102, 255], List[138, 119, 102, 255], List[139, 120, 103, \
255], List[138, 120, 105, 255], List[141, 117, 99, 255], List[139, 117, 100, \
255], List[118, 110, 99, 255], List[107, 102, 93, 255], List[111, 105, 96, \
255], List[110, 102, 94, 255], List[110, 106, 100, 255], List[108, 98, 86, \
255], List[108, 99, 86, 255], List[103, 100, 95, 255], List[111, 110, 105, \
255], List[174, 175, 166, 255], List[156, 160, 153, 255], List[135, 140, 134, \
255], List[110, 117, 122, 255], List[51, 63, 72, 255], List[38, 45, 53, 255], \
List[57, 63, 66, 255], List[47, 54, 60, 255], List[41, 48, 56, 255], List[68, \
78, 82, 255], List[73, 64, 59, 255], List[157, 129, 109, 255], List[206, 204, \
193, 255], List[228, 226, 215, 255], List[174, 142, 119, 255], List[131, 73, \
40, 255], List[172, 147, 127, 255], List[184, 181, 171, 255], List[149, 142, \
126, 255], List[160, 152, 137, 255], List[84, 81, 76, 255], List[51, 51, 49, \
255], List[91, 89, 84, 255], List[87, 85, 81, 255], List[88, 86, 82, 255], \
List[87, 85, 81, 255], List[86, 84, 81, 255], List[86, 84, 80, 255], List[90, \
88, 84, 255], List[147, 143, 130, 255], List[133, 133, 124, 255], List[123, \
127, 124, 255], List[115, 120, 119, 255], List[122, 124, 122, 255], List[128, \
132, 127, 255], List[121, 126, 124, 255], List[124, 128, 125, 255], List[125, \
130, 127, 255]], List[List[37, 27, 32, 255], List[83, 70, 66, 255], List[87, \
82, 80, 255], List[94, 91, 88, 255], List[108, 108, 106, 255], List[112, 112, \
108, 255], List[137, 135, 129, 255], List[154, 151, 143, 255], List[160, 156, \
145, 255], List[161, 156, 146, 255], List[159, 154, 145, 255], List[157, 153, \
143, 255], List[156, 152, 142, 255], List[155, 150, 141, 255], List[152, 148, \
138, 255], List[148, 145, 136, 255], List[140, 141, 135, 255], List[135, 137, \
133, 255], List[131, 135, 131, 255], List[44, 74, 92, 255], List[92, 88, 88, \
255], List[142, 115, 94, 255], List[135, 115, 95, 255], List[136, 114, 95, \
255], List[138, 119, 102, 255], List[139, 122, 107, 255], List[136, 115, 98, \
255], List[139, 115, 98, 255], List[136, 113, 97, 255], List[112, 103, 95, \
255], List[106, 101, 94, 255], List[111, 104, 94, 255], List[110, 104, 95, \
255], List[100, 81, 71, 255], List[100, 78, 73, 255], List[93, 74, 74, 255], \
List[135, 130, 126, 255], List[191, 193, 182, 255], List[149, 152, 146, 255], \
List[135, 140, 138, 255], List[85, 94, 99, 255], List[37, 50, 64, 255], \
List[47, 65, 82, 255], List[65, 71, 74, 255], List[37, 46, 58, 255], List[55, \
62, 67, 255], List[71, 82, 84, 255], List[95, 55, 32, 255], List[150, 101, \
70, 255], List[194, 193, 184, 255], List[225, 219, 205, 255], List[216, 210, \
198, 255], List[171, 164, 153, 255], List[169, 169, 161, 255], List[129, 129, \
122, 255], List[121, 118, 108, 255], List[147, 140, 124, 255], List[52, 51, \
51, 255], List[31, 31, 33, 255], List[71, 69, 67, 255], List[90, 88, 83, \
255], List[85, 83, 79, 255], List[88, 86, 81, 255], List[91, 89, 84, 255], \
List[89, 87, 82, 255], List[84, 82, 78, 255], List[114, 110, 102, 255], \
List[140, 140, 130, 255], List[137, 140, 133, 255], List[128, 131, 128, 255], \
List[122, 125, 123, 255], List[130, 132, 128, 255], List[127, 131, 128, 255], \
List[129, 132, 128, 255], List[133, 137, 130, 255]], List[List[56, 41, 41, \
255], List[63, 56, 51, 255], List[71, 68, 66, 255], List[92, 86, 84, 255], \
List[96, 95, 95, 255], List[103, 104, 101, 255], List[130, 129, 124, 255], \
List[137, 135, 130, 255], List[147, 144, 136, 255], List[147, 145, 137, 255], \
List[152, 149, 140, 255], List[156, 152, 142, 255], List[152, 148, 139, 255], \
List[150, 146, 137, 255], List[148, 144, 135, 255], List[145, 141, 132, 255], \
List[137, 137, 129, 255], List[136, 137, 130, 255], List[79, 93, 101, 255], \
List[79, 76, 80, 255], List[146, 116, 92, 255], List[137, 114, 95, 255], \
List[138, 118, 101, 255], List[137, 116, 99, 255], List[134, 112, 94, 255], \
List[135, 115, 97, 255], List[135, 115, 98, 255], List[136, 116, 100, 255], \
List[132, 111, 97, 255], List[134, 114, 101, 255], List[113, 101, 93, 255], \
List[102, 103, 99, 255], List[106, 91, 82, 255], List[106, 76, 69, 255], \
List[108, 75, 75, 255], List[108, 79, 80, 255], List[164, 164, 156, 255], \
List[184, 185, 175, 255], List[142, 145, 140, 255], List[132, 137, 134, 255], \
List[53, 62, 68, 255], List[38, 62, 87, 255], List[66, 90, 112, 255], \
List[43, 48, 54, 255], List[45, 53, 62, 255], List[53, 63, 66, 255], List[72, \
65, 60, 255], List[132, 69, 32, 255], List[140, 78, 41, 255], List[185, 173, \
158, 255], List[216, 212, 200, 255], List[231, 225, 210, 255], List[184, 180, \
170, 255], List[103, 100, 94, 255], List[126, 105, 92, 255], List[130, 109, \
96, 255], List[113, 107, 96, 255], List[94, 87, 77, 255], List[26, 27, 30, \
255], List[39, 39, 40, 255], List[87, 85, 80, 255], List[93, 91, 85, 255], \
List[85, 83, 79, 255], List[69, 67, 65, 255], List[63, 63, 62, 255], \
List[125, 123, 114, 255], List[138, 133, 121, 255], List[139, 140, 132, 255], \
List[136, 139, 132, 255], List[137, 140, 133, 255], List[138, 142, 134, 255], \
List[138, 142, 134, 255], List[138, 141, 134, 255], List[137, 141, 134, 255], \
List[137, 140, 132, 255]], List[List[98, 85, 82, 255], List[58, 56, 48, 255], \
List[51, 50, 49, 255], List[66, 63, 59, 255], List[76, 77, 67, 255], \
List[110, 110, 106, 255], List[121, 122, 118, 255], List[130, 129, 124, 255], \
List[132, 131, 126, 255], List[129, 127, 123, 255], List[128, 127, 123, 255], \
List[139, 137, 130, 255], List[147, 144, 135, 255], List[146, 143, 133, 255], \
List[143, 140, 131, 255], List[141, 137, 129, 255], List[136, 133, 125, 255], \
List[111, 115, 114, 255], List[85, 81, 80, 255], List[137, 110, 87, 255], \
List[137, 114, 94, 255], List[135, 112, 93, 255], List[137, 115, 99, 255], \
List[137, 117, 101, 255], List[132, 109, 91, 255], List[133, 112, 94, 255], \
List[132, 112, 97, 255], List[131, 110, 94, 255], List[130, 112, 100, 255], \
List[126, 108, 96, 255], List[128, 107, 92, 255], List[115, 102, 91, 255], \
List[110, 80, 73, 255], List[113, 77, 66, 255], List[111, 75, 66, 255], \
List[120, 108, 107, 255], List[151, 157, 152, 255], List[165, 167, 159, 255], \
List[138, 144, 142, 255], List[61, 70, 77, 255], List[37, 58, 82, 255], \
List[63, 97, 130, 255], List[51, 69, 85, 255], List[35, 42, 50, 255], \
List[49, 56, 60, 255], List[57, 64, 67, 255], List[107, 63, 40, 255], \
List[123, 67, 33, 255], List[86, 49, 28, 255], List[146, 137, 127, 255], \
List[212, 208, 196, 255], List[227, 221, 207, 255], List[224, 220, 207, 255], \
List[154, 132, 123, 255], List[121, 95, 83, 255], List[131, 87, 63, 255], \
List[112, 98, 85, 255], List[135, 127, 110, 255], List[58, 56, 52, 255], \
List[25, 26, 29, 255], List[50, 49, 48, 255], List[52, 52, 52, 255], List[49, \
48, 47, 255], List[28, 28, 30, 255], List[108, 103, 94, 255], List[148, 143, \
128, 255], List[139, 139, 128, 255], List[139, 143, 136, 255], List[138, 141, \
133, 255], List[138, 140, 132, 255], List[138, 141, 133, 255], List[139, 142, \
134, 255], List[139, 142, 134, 255], List[138, 142, 132, 255], List[138, 141, \
132, 255]], List[List[119, 107, 104, 255], List[121, 107, 101, 255], List[70, \
63, 59, 255], List[35, 38, 34, 255], List[55, 57, 41, 255], List[94, 90, 82, \
255], List[103, 98, 94, 255], List[105, 101, 96, 255], List[116, 115, 112, \
255], List[114, 114, 113, 255], List[108, 107, 106, 255], List[113, 113, 111, \
255], List[133, 131, 126, 255], List[146, 143, 133, 255], List[141, 137, 129, \
255], List[133, 129, 122, 255], List[126, 124, 117, 255], List[102, 95, 89, \
255], List[128, 106, 86, 255], List[137, 112, 91, 255], List[136, 112, 94, \
255], List[134, 112, 93, 255], List[130, 107, 91, 255], List[133, 113, 96, \
255], List[132, 111, 94, 255], List[131, 110, 93, 255], List[130, 112, 98, \
255], List[123, 101, 86, 255], List[127, 108, 94, 255], List[123, 104, 89, \
255], List[121, 104, 90, 255], List[118, 100, 85, 255], List[112, 93, 81, \
255], List[110, 79, 78, 255], List[105, 85, 89, 255], List[128, 138, 137, \
255], List[144, 154, 155, 255], List[153, 157, 153, 255], List[81, 82, 81, \
255], List[24, 36, 53, 255], List[57, 82, 109, 255], List[52, 81, 107, 255], \
List[41, 53, 65, 255], List[42, 52, 64, 255], List[51, 57, 60, 255], List[50, \
52, 55, 255], List[60, 47, 43, 255], List[58, 60, 61, 255], List[30, 40, 49, \
255], List[96, 100, 102, 255], List[203, 196, 184, 255], List[222, 217, 204, \
255], List[218, 213, 200, 255], List[206, 198, 187, 255], List[171, 167, 158, \
255], List[102, 85, 73, 255], List[100, 91, 80, 255], List[141, 133, 117, \
255], List[109, 102, 91, 255], List[33, 33, 35, 255], List[58, 56, 54, 255], \
List[95, 89, 80, 255], List[84, 79, 71, 255], List[72, 68, 62, 255], \
List[140, 130, 110, 255], List[133, 123, 105, 255], List[140, 133, 117, 255], \
List[142, 138, 127, 255], List[142, 143, 134, 255], List[140, 143, 135, 255], \
List[139, 142, 134, 255], List[137, 141, 133, 255], List[138, 141, 132, 255], \
List[140, 142, 133, 255], List[140, 143, 133, 255]], List[List[143, 121, 113, \
255], List[133, 116, 110, 255], List[127, 112, 109, 255], List[83, 80, 75, \
255], List[48, 50, 39, 255], List[66, 64, 57, 255], List[82, 75, 73, 255], \
List[88, 81, 78, 255], List[93, 87, 83, 255], List[88, 89, 77, 255], List[95, \
95, 88, 255], List[110, 106, 105, 255], List[108, 105, 101, 255], List[111, \
108, 103, 255], List[121, 118, 112, 255], List[120, 118, 112, 255], List[113, \
107, 99, 255], List[122, 103, 85, 255], List[131, 108, 86, 255], List[132, \
109, 90, 255], List[131, 110, 93, 255], List[135, 115, 99, 255], List[134, \
113, 97, 255], List[131, 111, 95, 255], List[133, 113, 97, 255], List[128, \
106, 89, 255], List[131, 111, 97, 255], List[127, 108, 95, 255], List[120, \
100, 86, 255], List[118, 98, 85, 255], List[118, 100, 86, 255], List[113, 97, \
84, 255], List[108, 98, 82, 255], List[121, 74, 76, 255], List[123, 74, 71, \
255], List[138, 97, 66, 255], List[172, 115, 71, 255], List[169, 112, 63, \
255], List[119, 81, 57, 255], List[111, 74, 53, 255], List[57, 62, 79, 255], \
List[44, 61, 82, 255], List[21, 45, 75, 255], List[30, 49, 73, 255], List[46, \
52, 55, 255], List[47, 54, 61, 255], List[45, 54, 60, 255], List[51, 56, 57, \
255], List[36, 41, 47, 255], List[62, 66, 68, 255], List[187, 182, 170, 255], \
List[201, 196, 184, 255], List[190, 185, 173, 255], List[147, 145, 136, 255], \
List[118, 114, 108, 255], List[131, 119, 108, 255], List[103, 98, 86, 255], \
List[118, 110, 96, 255], List[80, 76, 69, 255], List[87, 82, 74, 255], \
List[138, 130, 113, 255], List[138, 129, 112, 255], List[123, 115, 100, 255], \
List[129, 121, 105, 255], List[129, 120, 103, 255], List[131, 122, 104, 255], \
List[130, 120, 102, 255], List[132, 121, 104, 255], List[134, 126, 110, 255], \
List[141, 135, 121, 255], List[143, 141, 129, 255], List[142, 145, 135, 255], \
List[139, 144, 136, 255], List[140, 145, 135, 255], List[139, 143, 133, \
255]], List[List[146, 128, 116, 255], List[140, 116, 107, 255], List[158, \
131, 123, 255], List[129, 108, 97, 255], List[122, 116, 103, 255], List[98, \
94, 83, 255], List[83, 79, 69, 255], List[70, 66, 60, 255], List[56, 55, 48, \
255], List[40, 45, 30, 255], List[64, 63, 55, 255], List[88, 81, 77, 255], \
List[89, 82, 80, 255], List[86, 81, 79, 255], List[81, 79, 77, 255], List[89, \
78, 72, 255], List[119, 100, 84, 255], List[132, 114, 95, 255], List[133, \
112, 93, 255], List[131, 111, 94, 255], List[128, 108, 91, 255], List[129, \
110, 94, 255], List[129, 108, 91, 255], List[129, 106, 89, 255], List[128, \
106, 90, 255], List[125, 102, 87, 255], List[119, 96, 83, 255], List[121, \
102, 90, 255], List[124, 104, 91, 255], List[120, 102, 89, 255], List[113, \
93, 81, 255], List[108, 92, 77, 255], List[108, 75, 62, 255], List[112, 67, \
85, 255], List[64, 69, 68, 255], List[49, 16, 44, 255], List[68, 43, 34, \
255], List[127, 81, 40, 255], List[0, 23, 51, 255], List[79, 61, 52, 255], \
List[57, 70, 88, 255], List[70, 67, 73, 255], List[100, 85, 79, 255], \
List[86, 64, 51, 255], List[64, 61, 57, 255], List[49, 57, 61, 255], List[49, \
52, 53, 255], List[39, 51, 63, 255], List[40, 45, 50, 255], List[50, 64, 77, \
255], List[162, 165, 164, 255], List[176, 170, 158, 255], List[121, 118, 112, \
255], List[136, 135, 127, 255], List[140, 121, 112, 255], List[114, 99, 86, \
255], List[132, 126, 110, 255], List[93, 87, 79, 255], List[72, 69, 63, 255], \
List[129, 120, 104, 255], List[124, 114, 98, 255], List[126, 117, 101, 255], \
List[132, 123, 107, 255], List[127, 119, 103, 255], List[131, 123, 107, 255], \
List[132, 123, 107, 255], List[130, 120, 103, 255], List[131, 123, 107, 255], \
List[131, 122, 107, 255], List[129, 121, 105, 255], List[132, 122, 106, 255], \
List[137, 128, 112, 255], List[141, 135, 120, 255], List[143, 142, 130, 255], \
List[144, 146, 136, 255]], List[List[143, 122, 111, 255], List[139, 120, 110, \
255], List[154, 142, 126, 255], List[121, 111, 95, 255], List[143, 135, 119, \
255], List[141, 134, 120, 255], List[131, 124, 111, 255], List[110, 103, 90, \
255], List[91, 77, 71, 255], List[71, 65, 62, 255], List[60, 56, 51, 255], \
List[54, 53, 51, 255], List[56, 56, 51, 255], List[69, 65, 62, 255], List[94, \
82, 75, 255], List[117, 97, 82, 255], List[120, 100, 82, 255], List[128, 106, \
87, 255], List[130, 109, 91, 255], List[128, 111, 95, 255], List[125, 106, \
90, 255], List[126, 107, 91, 255], List[124, 102, 86, 255], List[124, 104, \
88, 255], List[124, 106, 92, 255], List[128, 110, 97, 255], List[123, 104, \
91, 255], List[115, 95, 83, 255], List[111, 91, 79, 255], List[110, 94, 84, \
255], List[107, 91, 81, 255], List[95, 88, 77, 255], List[98, 66, 61, 255], \
List[92, 52, 83, 255], List[56, 47, 55, 255], List[65, 39, 33, 255], List[88, \
56, 32, 255], List[167, 88, 24, 255], List[103, 63, 33, 255], List[141, 78, \
29, 255], List[170, 96, 37, 255], List[170, 93, 30, 255], List[195, 100, 19, \
255], List[203, 100, 13, 255], List[162, 89, 29, 255], List[51, 52, 52, 255], \
List[35, 50, 69, 255], List[31, 45, 65, 255], List[44, 61, 76, 255], List[48, \
74, 99, 255], List[81, 89, 96, 255], List[115, 112, 104, 255], List[138, 134, \
126, 255], List[234, 230, 216, 255], List[198, 188, 176, 255], List[120, 109, \
95, 255], List[135, 128, 114, 255], List[115, 107, 93, 255], List[120, 111, \
96, 255], List[133, 123, 107, 255], List[124, 113, 97, 255], List[126, 116, \
100, 255], List[125, 115, 99, 255], List[127, 118, 101, 255], List[132, 122, \
106, 255], List[129, 121, 104, 255], List[133, 124, 109, 255], List[128, 119, \
103, 255], List[131, 122, 106, 255], List[129, 119, 102, 255], List[131, 121, \
103, 255], List[132, 124, 106, 255], List[130, 118, 101, 255], List[133, 120, \
102, 255], List[137, 127, 110, 255]], List[List[100, 78, 73, 255], List[95, \
73, 73, 255], List[137, 112, 109, 255], List[153, 129, 121, 255], List[151, \
135, 123, 255], List[140, 131, 115, 255], List[125, 113, 98, 255], List[137, \
115, 106, 255], List[141, 126, 119, 255], List[127, 110, 106, 255], List[116, \
99, 92, 255], List[100, 87, 82, 255], List[65, 63, 56, 255], List[54, 50, 46, \
255], List[91, 73, 64, 255], List[131, 113, 95, 255], List[124, 106, 89, \
255], List[128, 107, 88, 255], List[127, 105, 88, 255], List[129, 113, 97, \
255], List[125, 108, 93, 255], List[124, 110, 95, 255], List[124, 107, 93, \
255], List[123, 106, 91, 255], List[121, 103, 89, 255], List[116, 96, 82, \
255], List[117, 98, 85, 255], List[119, 102, 91, 255], List[120, 95, 77, \
255], List[125, 91, 68, 255], List[126, 92, 67, 255], List[118, 79, 54, 255], \
List[119, 71, 41, 255], List[133, 71, 27, 255], List[170, 90, 25, 255], \
List[193, 101, 22, 255], List[214, 105, 14, 255], List[206, 102, 13, 255], \
List[188, 103, 34, 255], List[189, 97, 20, 255], List[181, 95, 23, 255], \
List[178, 93, 22, 255], List[182, 88, 10, 255], List[152, 94, 45, 255], \
List[118, 106, 94, 255], List[77, 66, 61, 255], List[24, 48, 80, 255], \
List[34, 48, 69, 255], List[47, 69, 94, 255], List[48, 82, 111, 255], \
List[68, 49, 59, 255], List[122, 92, 87, 255], List[120, 121, 114, 255], \
List[197, 191, 180, 255], List[229, 224, 211, 255], List[139, 129, 113, 255], \
List[119, 107, 89, 255], List[136, 125, 110, 255], List[143, 136, 123, 255], \
List[126, 116, 100, 255], List[131, 120, 103, 255], List[130, 120, 105, 255], \
List[126, 118, 102, 255], List[126, 116, 100, 255], List[127, 117, 101, 255], \
List[128, 119, 102, 255], List[131, 123, 107, 255], List[127, 119, 104, 255], \
List[129, 120, 105, 255], List[131, 121, 105, 255], List[129, 118, 100, 255], \
List[131, 120, 102, 255], List[132, 122, 104, 255], List[132, 121, 104, 255], \
List[130, 121, 104, 255]], List[List[69, 55, 60, 255], List[75, 56, 56, 255], \
List[86, 62, 55, 255], List[121, 83, 71, 255], List[150, 110, 105, 255], \
List[165, 124, 113, 255], List[160, 125, 107, 255], List[158, 127, 116, 255], \
List[145, 122, 116, 255], List[131, 113, 107, 255], List[135, 121, 114, 255], \
List[124, 109, 105, 255], List[119, 105, 100, 255], List[97, 87, 84, 255], \
List[89, 85, 81, 255], List[104, 95, 85, 255], List[130, 109, 91, 255], \
List[132, 111, 93, 255], List[125, 105, 89, 255], List[123, 104, 88, 255], \
List[122, 104, 90, 255], List[122, 107, 94, 255], List[122, 104, 89, 255], \
List[121, 102, 88, 255], List[120, 101, 87, 255], List[118, 100, 87, 255], \
List[112, 93, 80, 255], List[107, 93, 84, 255], List[117, 70, 45, 255], \
List[133, 62, 10, 255], List[130, 68, 22, 255], List[132, 66, 15, 255], \
List[130, 67, 15, 255], List[138, 33, 27, 255], List[180, 75, 19, 255], \
List[188, 97, 13, 255], List[138, 80, 34, 255], List[136, 77, 28, 255], \
List[177, 89, 14, 255], List[173, 87, 14, 255], List[173, 81, 7, 255], \
List[175, 85, 14, 255], List[175, 86, 19, 255], List[134, 93, 61, 255], \
List[149, 150, 143, 255], List[87, 92, 97, 255], List[26, 46, 72, 255], \
List[37, 57, 83, 255], List[32, 53, 78, 255], List[43, 60, 82, 255], \
List[113, 67, 69, 255], List[117, 71, 62, 255], List[106, 94, 85, 255], \
List[122, 120, 114, 255], List[210, 206, 194, 255], List[177, 169, 151, 255], \
List[149, 141, 126, 255], List[186, 183, 175, 255], List[161, 154, 141, 255], \
List[121, 110, 94, 255], List[124, 113, 97, 255], List[132, 123, 106, 255], \
List[132, 124, 108, 255], List[130, 120, 104, 255], List[125, 115, 97, 255], \
List[125, 115, 99, 255], List[130, 122, 107, 255], List[130, 122, 107, 255], \
List[129, 120, 106, 255], List[130, 122, 107, 255], List[131, 121, 104, 255], \
List[131, 120, 102, 255], List[125, 114, 95, 255], List[130, 120, 103, 255], \
List[130, 121, 105, 255]], List[List[68, 55, 65, 255], List[72, 59, 66, 255], \
List[93, 66, 52, 255], List[85, 62, 53, 255], List[91, 67, 59, 255], \
List[125, 91, 79, 255], List[159, 117, 106, 255], List[174, 126, 107, 255], \
List[163, 123, 106, 255], List[155, 125, 114, 255], List[146, 125, 121, 255], \
List[129, 114, 109, 255], List[127, 117, 110, 255], List[112, 108, 101, 255], \
List[89, 88, 84, 255], List[80, 78, 77, 255], List[92, 80, 72, 255], \
List[124, 105, 87, 255], List[124, 104, 88, 255], List[121, 103, 90, 255], \
List[121, 105, 92, 255], List[119, 101, 87, 255], List[117, 97, 82, 255], \
List[120, 101, 88, 255], List[116, 98, 86, 255], List[113, 98, 89, 255], \
List[111, 94, 83, 255], List[107, 92, 82, 255], List[109, 68, 47, 255], \
List[108, 59, 27, 255], List[105, 59, 30, 255], List[108, 62, 34, 255], \
List[117, 63, 26, 255], List[152, 81, 31, 255], List[183, 87, 14, 255], \
List[160, 91, 32, 255], List[99, 108, 113, 255], List[96, 83, 70, 255], \
List[162, 79, 15, 255], List[155, 86, 33, 255], List[164, 117, 80, 255], \
List[148, 123, 107, 255], List[109, 109, 114, 255], List[59, 60, 63, 255], \
List[119, 121, 120, 255], List[70, 88, 105, 255], List[28, 41, 61, 255], \
List[43, 65, 91, 255], List[24, 45, 72, 255], List[69, 51, 58, 255], \
List[116, 71, 64, 255], List[102, 69, 58, 255], List[103, 69, 58, 255], \
List[104, 94, 87, 255], List[132, 131, 123, 255], List[179, 175, 166, 255], \
List[166, 160, 149, 255], List[138, 121, 95, 255], List[111, 94, 61, 255], \
List[128, 116, 96, 255], List[125, 116, 100, 255], List[123, 113, 95, 255], \
List[125, 115, 98, 255], List[127, 116, 99, 255], List[134, 124, 108, 255], \
List[131, 121, 107, 255], List[127, 118, 102, 255], List[126, 116, 101, 255], \
List[129, 121, 105, 255], List[128, 120, 106, 255], List[125, 117, 101, 255], \
List[133, 124, 108, 255], List[132, 123, 107, 255], List[131, 121, 105, 255], \
List[127, 118, 103, 255]], List[List[70, 55, 61, 255], List[80, 60, 57, 255], \
List[91, 62, 51, 255], List[86, 63, 58, 255], List[86, 65, 60, 255], List[85, \
65, 59, 255], List[89, 71, 68, 255], List[136, 104, 92, 255], List[159, 118, \
103, 255], List[168, 123, 104, 255], List[166, 129, 111, 255], List[148, 125, \
117, 255], List[135, 123, 116, 255], List[132, 125, 115, 255], List[113, 108, \
101, 255], List[90, 89, 86, 255], List[63, 62, 64, 255], List[64, 57, 56, \
255], List[115, 99, 87, 255], List[127, 109, 96, 255], List[118, 102, 89, \
255], List[116, 98, 84, 255], List[120, 103, 91, 255], List[115, 96, 83, \
255], List[112, 94, 83, 255], List[111, 96, 85, 255], List[107, 90, 78, 255], \
List[102, 90, 81, 255], List[107, 64, 35, 255], List[103, 57, 26, 255], \
List[103, 56, 25, 255], List[98, 56, 29, 255], List[109, 57, 23, 255], \
List[134, 64, 18, 255], List[152, 81, 20, 255], List[115, 78, 48, 255], \
List[138, 138, 131, 255], List[138, 134, 125, 255], List[138, 137, 131, 255], \
List[132, 142, 141, 255], List[145, 164, 168, 255], List[140, 156, 161, 255], \
List[112, 129, 141, 255], List[110, 124, 134, 255], List[123, 133, 139, 255], \
List[117, 130, 138, 255], List[44, 58, 78, 255], List[36, 61, 90, 255], \
List[41, 53, 72, 255], List[103, 68, 60, 255], List[104, 66, 56, 255], \
List[99, 64, 55, 255], List[89, 57, 49, 255], List[107, 87, 76, 255], \
List[114, 111, 101, 255], List[117, 109, 96, 255], List[118, 101, 72, 255], \
List[110, 89, 57, 255], List[122, 109, 89, 255], List[128, 118, 99, 255], \
List[127, 117, 98, 255], List[129, 119, 103, 255], List[124, 114, 98, 255], \
List[130, 120, 103, 255], List[127, 117, 101, 255], List[124, 114, 99, 255], \
List[128, 121, 106, 255], List[125, 116, 101, 255], List[125, 117, 101, 255], \
List[129, 121, 107, 255], List[125, 117, 102, 255], List[130, 122, 107, 255], \
List[128, 120, 106, 255], List[131, 124, 110, 255], List[129, 120, 106, \
255]], List[List[72, 56, 59, 255], List[82, 58, 55, 255], List[85, 60, 53, \
255], List[89, 66, 57, 255], List[80, 63, 63, 255], List[85, 67, 67, 255], \
List[93, 69, 61, 255], List[117, 90, 78, 255], List[123, 92, 77, 255], \
List[128, 95, 83, 255], List[132, 97, 90, 255], List[157, 110, 88, 255], \
List[150, 125, 114, 255], List[132, 137, 138, 255], List[133, 132, 128, 255], \
List[137, 124, 111, 255], List[119, 105, 95, 255], List[74, 69, 69, 255], \
List[41, 40, 44, 255], List[98, 86, 76, 255], List[123, 103, 88, 255], \
List[118, 100, 87, 255], List[113, 94, 80, 255], List[112, 93, 81, 255], \
List[109, 93, 83, 255], List[105, 88, 76, 255], List[103, 86, 75, 255], \
List[97, 82, 71, 255], List[89, 76, 66, 255], List[61, 45, 47, 255], List[31, \
25, 25, 255], List[58, 60, 50, 255], List[70, 44, 58, 255], List[62, 44, 67, \
255], List[109, 107, 107, 255], List[48, 49, 50, 255], List[116, 111, 105, \
255], List[138, 153, 154, 255], List[134, 161, 168, 255], List[139, 158, 160, \
255], List[137, 152, 154, 255], List[139, 150, 151, 255], List[142, 152, 151, \
255], List[148, 158, 155, 255], List[156, 163, 159, 255], List[153, 157, 152, \
255], List[73, 86, 99, 255], List[26, 50, 80, 255], List[73, 65, 61, 255], \
List[105, 70, 52, 255], List[98, 60, 50, 255], List[96, 57, 48, 255], \
List[91, 59, 51, 255], List[121, 111, 98, 255], List[122, 112, 94, 255], \
List[114, 98, 71, 255], List[122, 109, 86, 255], List[131, 122, 106, 255], \
List[125, 115, 97, 255], List[116, 109, 79, 255], List[120, 111, 86, 255], \
List[133, 121, 105, 255], List[132, 122, 104, 255], List[130, 121, 100, 255], \
List[131, 120, 101, 255], List[125, 114, 99, 255], List[133, 125, 112, 255], \
List[128, 120, 106, 255], List[130, 122, 108, 255], List[126, 119, 105, 255], \
List[126, 118, 103, 255], List[124, 116, 102, 255], List[127, 118, 103, 255], \
List[128, 119, 104, 255], List[133, 126, 112, 255]], List[List[69, 53, 57, \
255], List[80, 56, 54, 255], List[83, 61, 54, 255], List[89, 64, 55, 255], \
List[84, 63, 61, 255], List[83, 64, 62, 255], List[100, 75, 64, 255], \
List[125, 94, 83, 255], List[129, 91, 73, 255], List[123, 92, 83, 255], \
List[121, 90, 82, 255], List[134, 94, 74, 255], List[137, 91, 72, 255], \
List[122, 100, 96, 255], List[105, 155, 181, 255], List[116, 158, 179, 255], \
List[131, 141, 147, 255], List[141, 122, 116, 255], List[116, 101, 97, 255], \
List[67, 63, 64, 255], List[87, 74, 67, 255], List[117, 99, 85, 255], \
List[114, 94, 80, 255], List[109, 92, 81, 255], List[106, 90, 80, 255], \
List[104, 87, 75, 255], List[102, 88, 78, 255], List[91, 75, 67, 255], \
List[82, 74, 65, 255], List[94, 56, 86, 255], List[92, 40, 94, 255], List[93, \
65, 100, 255], List[66, 41, 67, 255], List[42, 49, 76, 255], List[115, 107, \
114, 255], List[108, 104, 96, 255], List[102, 98, 92, 255], List[130, 137, \
137, 255], List[129, 150, 155, 255], List[129, 151, 157, 255], List[131, 149, \
153, 255], List[131, 147, 151, 255], List[135, 150, 153, 255], List[138, 153, \
153, 255], List[138, 152, 153, 255], List[153, 162, 159, 255], List[117, 130, \
134, 255], List[37, 47, 62, 255], List[96, 73, 51, 255], List[97, 65, 48, \
255], List[94, 60, 47, 255], List[87, 52, 42, 255], List[97, 73, 63, 255], \
List[124, 118, 104, 255], List[118, 107, 93, 255], List[127, 117, 102, 255], \
List[126, 117, 101, 255], List[127, 117, 102, 255], List[128, 119, 101, 255], \
List[120, 112, 88, 255], List[125, 114, 94, 255], List[123, 112, 95, 255], \
List[129, 116, 93, 255], List[113, 105, 72, 255], List[131, 121, 99, 255], \
List[130, 120, 102, 255], List[127, 118, 102, 255], List[126, 116, 100, 255], \
List[126, 117, 102, 255], List[123, 115, 100, 255], List[127, 118, 104, 255], \
List[124, 115, 101, 255], List[125, 116, 102, 255], List[129, 120, 105, 255], \
List[128, 118, 104, 255]], List[List[80, 68, 61, 255], List[82, 56, 48, 255], \
List[86, 63, 54, 255], List[85, 62, 55, 255], List[88, 67, 59, 255], List[90, \
68, 60, 255], List[101, 78, 75, 255], List[119, 88, 83, 255], List[119, 89, \
83, 255], List[114, 88, 89, 255], List[132, 94, 75, 255], List[137, 97, 75, \
255], List[138, 93, 72, 255], List[93, 75, 64, 255], List[33, 50, 47, 255], \
List[55, 85, 98, 255], List[69, 118, 139, 255], List[136, 148, 151, 255], \
List[149, 133, 126, 255], List[135, 111, 105, 255], List[111, 96, 94, 255], \
List[105, 92, 82, 255], List[110, 92, 80, 255], List[107, 93, 84, 255], \
List[102, 86, 76, 255], List[93, 75, 64, 255], List[87, 73, 64, 255], \
List[79, 64, 61, 255], List[74, 80, 57, 255], List[70, 104, 69, 255], \
List[73, 56, 82, 255], List[96, 62, 102, 255], List[104, 82, 107, 255], \
List[102, 99, 94, 255], List[123, 116, 109, 255], List[120, 116, 108, 255], \
List[115, 110, 103, 255], List[115, 108, 100, 255], List[120, 119, 114, 255], \
List[125, 136, 140, 255], List[124, 145, 152, 255], List[127, 148, 154, 255], \
List[131, 150, 153, 255], List[134, 151, 154, 255], List[137, 153, 154, 255], \
List[142, 156, 155, 255], List[121, 137, 142, 255], List[71, 65, 59, 255], \
List[93, 60, 49, 255], List[89, 58, 50, 255], List[91, 58, 45, 255], List[78, \
50, 43, 255], List[96, 87, 80, 255], List[123, 115, 100, 255], List[123, 115, \
101, 255], List[125, 115, 100, 255], List[119, 108, 93, 255], List[118, 109, \
92, 255], List[121, 112, 94, 255], List[128, 118, 102, 255], List[132, 121, \
105, 255], List[126, 115, 94, 255], List[120, 109, 81, 255], List[119, 115, \
78, 255], List[130, 119, 90, 255], List[131, 120, 95, 255], List[125, 112, \
94, 255], List[131, 118, 101, 255], List[138, 126, 109, 255], List[136, 125, \
107, 255], List[132, 122, 106, 255], List[128, 120, 105, 255], List[126, 117, \
103, 255], List[127, 118, 104, 255], List[125, 114, 99, 255]], List[List[95, \
85, 73, 255], List[95, 73, 66, 255], List[76, 55, 51, 255], List[82, 61, 58, \
255], List[83, 65, 61, 255], List[92, 66, 56, 255], List[114, 84, 78, 255], \
List[123, 91, 82, 255], List[122, 93, 85, 255], List[123, 86, 74, 255], \
List[130, 92, 75, 255], List[136, 94, 72, 255], List[138, 96, 75, 255], \
List[60, 59, 50, 255], List[30, 41, 37, 255], List[44, 47, 34, 255], List[40, \
42, 28, 255], List[40, 45, 33, 255], List[92, 85, 76, 255], List[144, 123, \
113, 255], List[145, 125, 114, 255], List[131, 106, 98, 255], List[112, 102, \
90, 255], List[102, 91, 81, 255], List[100, 84, 74, 255], List[114, 102, 92, \
255], List[110, 100, 90, 255], List[84, 72, 70, 255], List[89, 96, 74, 255], \
List[78, 118, 59, 255], List[81, 99, 86, 255], List[74, 86, 85, 255], \
List[103, 99, 99, 255], List[129, 113, 103, 255], List[114, 102, 96, 255], \
List[115, 105, 99, 255], List[123, 118, 110, 255], List[116, 111, 105, 255], \
List[111, 106, 99, 255], List[113, 106, 99, 255], List[119, 122, 119, 255], \
List[122, 138, 143, 255], List[126, 150, 156, 255], List[128, 150, 156, 255], \
List[130, 149, 151, 255], List[137, 156, 159, 255], List[117, 130, 128, 255], \
List[76, 57, 46, 255], List[81, 55, 50, 255], List[83, 56, 47, 255], List[82, \
54, 45, 255], List[59, 49, 60, 255], List[112, 107, 97, 255], List[122, 114, \
99, 255], List[118, 109, 94, 255], List[122, 112, 97, 255], List[124, 115, \
100, 255], List[126, 117, 101, 255], List[122, 112, 95, 255], List[117, 107, \
91, 255], List[126, 116, 101, 255], List[128, 119, 98, 255], List[114, 106, \
76, 255], List[128, 119, 92, 255], List[129, 119, 85, 255], List[120, 110, \
75, 255], List[133, 120, 91, 255], List[134, 124, 93, 255], List[123, 116, \
83, 255], List[130, 121, 93, 255], List[129, 117, 95, 255], List[130, 120, \
105, 255], List[130, 123, 109, 255], List[127, 117, 104, 255], List[126, 117, \
103, 255]], List[List[133, 96, 89, 255], List[135, 111, 103, 255], List[92, \
69, 61, 255], List[74, 58, 56, 255], List[75, 59, 62, 255], List[100, 72, 63, \
255], List[129, 90, 72, 255], List[132, 96, 79, 255], List[128, 94, 78, 255], \
List[123, 87, 74, 255], List[134, 94, 75, 255], List[137, 94, 73, 255], \
List[109, 83, 71, 255], List[32, 41, 34, 255], List[36, 47, 36, 255], \
List[40, 50, 38, 255], List[47, 52, 38, 255], List[46, 46, 33, 255], \
List[133, 112, 105, 255], List[152, 129, 119, 255], List[131, 116, 104, 255], \
List[126, 112, 102, 255], List[122, 116, 101, 255], List[143, 137, 125, 255], \
List[170, 165, 154, 255], List[189, 185, 174, 255], List[194, 190, 178, 255], \
List[184, 178, 167, 255], List[155, 152, 147, 255], List[111, 116, 117, 255], \
List[97, 103, 105, 255], List[106, 105, 104, 255], List[108, 95, 90, 255], \
List[118, 104, 99, 255], List[120, 107, 101, 255], List[121, 105, 98, 255], \
List[113, 102, 95, 255], List[118, 114, 107, 255], List[116, 112, 106, 255], \
List[111, 108, 102, 255], List[111, 106, 98, 255], List[114, 108, 102, 255], \
List[120, 125, 124, 255], List[124, 144, 149, 255], List[125, 149, 155, 255], \
List[130, 153, 158, 255], List[86, 86, 77, 255], List[69, 50, 41, 255], \
List[78, 55, 46, 255], List[83, 52, 42, 255], List[57, 42, 52, 255], List[70, \
66, 76, 255], List[124, 116, 100, 255], List[119, 112, 98, 255], List[117, \
108, 92, 255], List[117, 108, 93, 255], List[119, 110, 95, 255], List[123, \
115, 101, 255], List[125, 116, 102, 255], List[121, 111, 96, 255], List[124, \
114, 99, 255], List[125, 115, 98, 255], List[129, 118, 100, 255], List[129, \
118, 99, 255], List[126, 114, 94, 255], List[127, 115, 91, 255], List[133, \
121, 82, 255], List[124, 112, 75, 255], List[116, 109, 68, 255], List[116, \
112, 69, 255], List[125, 113, 88, 255], List[129, 116, 101, 255], List[128, \
118, 103, 255], List[128, 119, 105, 255], List[124, 116, 104, 255]], \
List[List[143, 115, 110, 255], List[164, 138, 133, 255], List[119, 94, 91, \
255], List[78, 61, 61, 255], List[81, 60, 57, 255], List[112, 84, 76, 255], \
List[124, 88, 73, 255], List[122, 93, 84, 255], List[116, 84, 76, 255], \
List[124, 89, 78, 255], List[133, 91, 72, 255], List[128, 89, 74, 255], \
List[103, 89, 86, 255], List[68, 72, 60, 255], List[56, 64, 48, 255], \
List[58, 60, 43, 255], List[55, 52, 41, 255], List[63, 61, 58, 255], \
List[134, 120, 115, 255], List[141, 119, 112, 255], List[146, 119, 114, 255], \
List[152, 129, 118, 255], List[139, 132, 121, 255], List[169, 165, 155, 255], \
List[181, 177, 167, 255], List[184, 179, 168, 255], List[189, 183, 173, 255], \
List[192, 188, 176, 255], List[194, 189, 176, 255], List[158, 155, 147, 255], \
List[111, 115, 112, 255], List[127, 111, 106, 255], List[131, 108, 101, 255], \
List[118, 101, 95, 255], List[113, 100, 95, 255], List[121, 110, 103, 255], \
List[102, 92, 89, 255], List[114, 103, 96, 255], List[118, 113, 105, 255], \
List[113, 110, 104, 255], List[113, 109, 102, 255], List[111, 106, 100, 255], \
List[110, 104, 96, 255], List[114, 110, 105, 255], List[125, 133, 136, 255], \
List[106, 118, 118, 255], List[61, 48, 36, 255], List[69, 52, 46, 255], \
List[73, 49, 43, 255], List[67, 45, 51, 255], List[46, 36, 65, 255], List[99, \
90, 87, 255], List[121, 113, 97, 255], List[119, 111, 99, 255], List[119, \
110, 97, 255], List[120, 111, 97, 255], List[117, 108, 93, 255], List[117, \
108, 93, 255], List[119, 109, 95, 255], List[124, 114, 98, 255], List[125, \
118, 103, 255], List[117, 108, 93, 255], List[121, 113, 98, 255], List[126, \
118, 104, 255], List[121, 111, 94, 255], List[130, 116, 99, 255], List[130, \
120, 90, 255], List[114, 108, 68, 255], List[124, 112, 68, 255], List[126, \
116, 74, 255], List[136, 123, 102, 255], List[128, 117, 101, 255], List[124, \
112, 98, 255], List[127, 116, 101, 255], List[127, 119, 106, 255]], \
List[List[153, 145, 133, 255], List[133, 119, 114, 255], List[143, 124, 121, \
255], List[95, 74, 71, 255], List[87, 59, 50, 255], List[115, 83, 76, 255], \
List[122, 88, 76, 255], List[130, 96, 80, 255], List[128, 87, 70, 255], \
List[128, 89, 78, 255], List[123, 84, 75, 255], List[123, 91, 86, 255], \
List[133, 125, 119, 255], List[141, 136, 128, 255], List[138, 129, 121, 255], \
List[134, 118, 108, 255], List[131, 118, 110, 255], List[127, 111, 108, 255], \
List[137, 125, 119, 255], List[143, 131, 122, 255], List[145, 127, 123, 255], \
List[152, 128, 119, 255], List[145, 138, 129, 255], List[159, 156, 147, 255], \
List[167, 163, 153, 255], List[176, 172, 161, 255], List[182, 177, 167, 255], \
List[185, 180, 170, 255], List[185, 180, 170, 255], List[190, 186, 174, 255], \
List[136, 131, 123, 255], List[115, 98, 89, 255], List[135, 115, 107, 255], \
List[137, 114, 110, 255], List[121, 100, 92, 255], List[108, 95, 93, 255], \
List[117, 103, 99, 255], List[122, 103, 98, 255], List[115, 109, 103, 255], \
List[118, 115, 109, 255], List[113, 109, 103, 255], List[110, 105, 99, 255], \
List[116, 112, 107, 255], List[108, 103, 96, 255], List[114, 108, 100, 255], \
List[113, 106, 97, 255], List[92, 78, 72, 255], List[73, 51, 43, 255], \
List[68, 45, 47, 255], List[52, 37, 69, 255], List[62, 47, 73, 255], \
List[116, 109, 96, 255], List[118, 110, 95, 255], List[117, 108, 93, 255], \
List[119, 111, 97, 255], List[118, 111, 96, 255], List[117, 108, 95, 255], \
List[121, 113, 99, 255], List[118, 108, 92, 255], List[116, 106, 91, 255], \
List[121, 113, 99, 255], List[121, 113, 99, 255], List[124, 116, 103, 255], \
List[125, 118, 104, 255], List[122, 113, 97, 255], List[130, 119, 103, 255], \
List[134, 122, 99, 255], List[119, 114, 79, 255], List[116, 111, 71, 255], \
List[133, 121, 96, 255], List[132, 118, 99, 255], List[123, 111, 92, 255], \
List[125, 113, 98, 255], List[127, 118, 104, 255], List[128, 118, 105, 255]], \
List[List[122, 118, 105, 255], List[143, 127, 125, 255], List[146, 130, 125, \
255], List[129, 115, 105, 255], List[134, 109, 101, 255], List[115, 85, 73, \
255], List[123, 93, 83, 255], List[128, 90, 73, 255], List[127, 87, 72, 255], \
List[121, 85, 80, 255], List[108, 80, 89, 255], List[120, 98, 100, 255], \
List[136, 130, 119, 255], List[140, 135, 127, 255], List[142, 137, 128, 255], \
List[149, 136, 128, 255], List[146, 128, 123, 255], List[152, 128, 120, 255], \
List[166, 140, 132, 255], List[135, 115, 108, 255], List[141, 125, 120, 255], \
List[134, 129, 118, 255], List[133, 131, 123, 255], List[149, 145, 136, 255], \
List[158, 154, 145, 255], List[166, 162, 152, 255], List[172, 168, 158, 255], \
List[176, 172, 162, 255], List[181, 176, 165, 255], List[192, 187, 175, 255], \
List[164, 156, 147, 255], List[105, 87, 85, 255], List[117, 96, 88, 255], \
List[120, 103, 98, 255], List[124, 105, 99, 255], List[117, 102, 95, 255], \
List[115, 102, 99, 255], List[119, 102, 98, 255], List[112, 96, 95, 255], \
List[109, 99, 95, 255], List[117, 115, 107, 255], List[118, 115, 108, 255], \
List[113, 109, 103, 255], List[117, 114, 108, 255], List[116, 112, 105, 255], \
List[113, 108, 102, 255], List[119, 113, 107, 255], List[73, 53, 50, 255], \
List[59, 39, 64, 255], List[57, 32, 71, 255], List[86, 70, 85, 255], \
List[120, 113, 96, 255], List[117, 107, 93, 255], List[118, 109, 92, 255], \
List[117, 109, 94, 255], List[116, 108, 93, 255], List[120, 112, 97, 255], \
List[119, 110, 96, 255], List[119, 112, 98, 255], List[122, 114, 99, 255], \
List[120, 112, 98, 255], List[118, 109, 95, 255], List[117, 108, 93, 255], \
List[121, 113, 99, 255], List[122, 115, 102, 255], List[119, 111, 96, 255], \
List[131, 121, 105, 255], List[130, 119, 98, 255], List[124, 112, 90, 255], \
List[127, 114, 99, 255], List[125, 114, 99, 255], List[123, 111, 95, 255], \
List[124, 113, 98, 255], List[123, 113, 101, 255], List[126, 115, 100, 255]], \
List[List[151, 133, 125, 255], List[156, 137, 133, 255], List[133, 120, 109, \
255], List[178, 170, 156, 255], List[150, 141, 130, 255], List[118, 106, 106, \
255], List[131, 115, 111, 255], List[134, 111, 98, 255], List[123, 97, 90, \
255], List[116, 84, 80, 255], List[112, 82, 83, 255], List[123, 109, 107, \
255], List[133, 129, 120, 255], List[142, 136, 128, 255], List[146, 142, 133, \
255], List[149, 143, 134, 255], List[141, 124, 119, 255], List[152, 135, 126, \
255], List[157, 135, 128, 255], List[159, 131, 123, 255], List[145, 118, 113, \
255], List[104, 99, 94, 255], List[121, 119, 111, 255], List[135, 131, 124, \
255], List[145, 141, 133, 255], List[154, 150, 141, 255], List[160, 156, 146, \
255], List[164, 160, 151, 255], List[175, 170, 160, 255], List[184, 179, 168, \
255], List[194, 189, 178, 255], List[179, 168, 161, 255], List[132, 111, 106, \
255], List[123, 101, 92, 255], List[128, 110, 105, 255], List[124, 109, 105, \
255], List[118, 102, 99, 255], List[126, 106, 101, 255], List[114, 104, 97, \
255], List[110, 102, 97, 255], List[103, 93, 89, 255], List[115, 105, 102, \
255], List[118, 111, 105, 255], List[116, 109, 100, 255], List[117, 111, 103, \
255], List[127, 123, 115, 255], List[94, 81, 74, 255], List[53, 35, 53, 255], \
List[58, 40, 74, 255], List[62, 36, 71, 255], List[104, 92, 89, 255], \
List[119, 112, 96, 255], List[115, 106, 92, 255], List[117, 108, 93, 255], \
List[117, 109, 93, 255], List[116, 108, 93, 255], List[119, 110, 95, 255], \
List[117, 108, 94, 255], List[120, 113, 98, 255], List[117, 110, 96, 255], \
List[118, 111, 97, 255], List[121, 114, 100, 255], List[119, 111, 97, 255], \
List[121, 114, 100, 255], List[118, 112, 98, 255], List[120, 112, 98, 255], \
List[123, 115, 100, 255], List[125, 117, 102, 255], List[126, 117, 103, 255], \
List[126, 116, 102, 255], List[122, 111, 96, 255], List[124, 113, 99, 255], \
List[126, 116, 103, 255], List[124, 115, 102, 255], List[123, 111, 94, 255]], \
List[List[177, 146, 146, 255], List[126, 105, 100, 255], List[144, 123, 115, \
255], List[171, 154, 146, 255], List[121, 112, 109, 255], List[142, 123, 119, \
255], List[148, 139, 130, 255], List[148, 138, 131, 255], List[136, 126, 119, \
255], List[139, 133, 125, 255], List[131, 124, 118, 255], List[139, 133, 127, \
255], List[135, 129, 121, 255], List[152, 145, 135, 255], List[144, 133, 123, \
255], List[145, 129, 122, 255], List[146, 128, 122, 255], List[161, 149, 139, \
255], List[155, 137, 125, 255], List[157, 129, 117, 255], List[134, 113, 101, \
255], List[89, 84, 78, 255], List[103, 102, 96, 255], List[119, 116, 109, \
255], List[130, 126, 119, 255], List[137, 134, 126, 255], List[143, 139, 130, \
255], List[147, 144, 135, 255], List[164, 161, 150, 255], List[179, 174, 164, \
255], List[180, 175, 164, 255], List[181, 177, 166, 255], List[173, 167, 156, \
255], List[144, 129, 119, 255], List[125, 104, 94, 255], List[125, 90, 84, \
255], List[115, 93, 86, 255], List[129, 111, 102, 255], List[121, 110, 101, \
255], List[128, 125, 117, 255], List[115, 106, 99, 255], List[109, 94, 92, \
255], List[120, 102, 98, 255], List[116, 99, 93, 255], List[105, 94, 92, \
255], List[113, 100, 91, 255], List[61, 47, 50, 255], List[51, 41, 65, 255], \
List[53, 37, 68, 255], List[69, 51, 76, 255], List[116, 109, 94, 255], \
List[112, 104, 90, 255], List[117, 110, 96, 255], List[118, 110, 95, 255], \
List[118, 110, 95, 255], List[117, 108, 93, 255], List[116, 107, 92, 255], \
List[118, 110, 95, 255], List[117, 109, 94, 255], List[118, 110, 96, 255], \
List[118, 110, 96, 255], List[120, 112, 99, 255], List[119, 112, 98, 255], \
List[114, 108, 94, 255], List[119, 112, 97, 255], List[119, 110, 96, 255], \
List[118, 110, 96, 255], List[119, 111, 97, 255], List[124, 117, 104, 255], \
List[122, 115, 101, 255], List[123, 115, 102, 255], List[124, 116, 103, 255], \
List[126, 116, 103, 255], List[123, 112, 97, 255], List[124, 112, 97, 255]], \
List[List[188, 157, 153, 255], List[129, 107, 101, 255], List[171, 147, 131, \
255], List[165, 142, 139, 255], List[141, 123, 124, 255], List[147, 131, 127, \
255], List[155, 140, 131, 255], List[150, 145, 136, 255], List[139, 137, 128, \
255], List[142, 138, 130, 255], List[148, 144, 135, 255], List[133, 129, 119, \
255], List[138, 133, 124, 255], List[153, 148, 138, 255], List[143, 127, 117, \
255], List[155, 137, 129, 255], List[150, 133, 126, 255], List[151, 133, 126, \
255], List[158, 135, 125, 255], List[148, 130, 117, 255], List[168, 160, 145, \
255], List[120, 106, 96, 255], List[80, 78, 75, 255], List[102, 100, 93, \
255], List[109, 106, 100, 255], List[115, 112, 106, 255], List[117, 114, 108, \
255], List[120, 117, 110, 255], List[121, 119, 112, 255], List[140, 136, 129, \
255], List[154, 150, 141, 255], List[162, 158, 148, 255], List[183, 178, 168, \
255], List[190, 188, 177, 255], List[188, 180, 169, 255], List[106, 89, 82, \
255], List[109, 99, 93, 255], List[113, 95, 86, 255], List[104, 88, 79, 255], \
List[112, 99, 92, 255], List[123, 110, 101, 255], List[125, 104, 99, 255], \
List[123, 106, 101, 255], List[110, 98, 96, 255], List[115, 105, 102, 255], \
List[96, 77, 70, 255], List[54, 34, 34, 255], List[44, 40, 51, 255], List[47, \
35, 65, 255], List[85, 73, 81, 255], List[116, 109, 91, 255], List[113, 104, \
90, 255], List[115, 107, 93, 255], List[112, 104, 90, 255], List[117, 109, \
95, 255], List[118, 110, 96, 255], List[115, 107, 92, 255], List[116, 108, \
94, 255], List[118, 111, 97, 255], List[117, 108, 93, 255], List[117, 108, \
93, 255], List[117, 108, 93, 255], List[120, 111, 95, 255], List[121, 112, \
98, 255], List[120, 113, 100, 255], List[116, 108, 96, 255], List[119, 110, \
97, 255], List[120, 111, 97, 255], List[119, 110, 96, 255], List[121, 113, \
98, 255], List[118, 110, 98, 255], List[119, 112, 101, 255], List[123, 115, \
102, 255], List[122, 112, 97, 255], List[126, 115, 100, 255]], List[List[180, \
150, 134, 255], List[142, 120, 113, 255], List[181, 153, 139, 255], List[168, \
142, 137, 255], List[177, 146, 135, 255], List[142, 127, 119, 255], List[154, \
136, 129, 255], List[145, 130, 121, 255], List[155, 152, 143, 255], List[141, \
135, 128, 255], List[151, 147, 139, 255], List[132, 128, 119, 255], List[144, \
140, 131, 255], List[149, 144, 136, 255], List[151, 141, 131, 255], List[157, \
138, 130, 255], List[145, 127, 120, 255], List[164, 138, 125, 255], List[165, \
141, 135, 255], List[164, 133, 124, 255], List[153, 134, 120, 255], List[146, \
127, 114, 255], List[81, 75, 70, 255], List[68, 68, 65, 255], List[88, 85, \
81, 255], List[91, 89, 84, 255], List[89, 87, 83, 255], List[84, 83, 78, \
255], List[88, 85, 81, 255], List[67, 65, 63, 255], List[52, 52, 50, 255], \
List[71, 70, 66, 255], List[152, 148, 139, 255], List[188, 183, 172, 255], \
List[190, 187, 176, 255], List[133, 126, 116, 255], List[105, 97, 87, 255], \
List[129, 123, 111, 255], List[130, 122, 113, 255], List[109, 90, 81, 255], \
List[127, 107, 98, 255], List[121, 107, 102, 255], List[111, 98, 97, 255], \
List[113, 99, 93, 255], List[110, 96, 92, 255], List[63, 45, 44, 255], \
List[56, 33, 33, 255], List[45, 31, 31, 255], List[34, 31, 45, 255], \
List[102, 94, 87, 255], List[114, 107, 92, 255], List[114, 106, 93, 255], \
List[113, 105, 91, 255], List[114, 106, 91, 255], List[116, 107, 93, 255], \
List[114, 106, 92, 255], List[114, 107, 93, 255], List[117, 109, 96, 255], \
List[117, 109, 96, 255], List[116, 108, 94, 255], List[118, 110, 95, 255], \
List[119, 110, 94, 255], List[116, 106, 90, 255], List[119, 108, 93, 255], \
List[121, 114, 100, 255], List[119, 112, 99, 255], List[121, 113, 100, 255], \
List[123, 115, 102, 255], List[117, 107, 94, 255], List[122, 115, 102, 255], \
List[124, 117, 106, 255], List[119, 112, 100, 255], List[121, 113, 100, 255], \
List[124, 116, 104, 255], List[126, 117, 103, 255]], List[List[67, 67, 72, \
255], List[65, 62, 68, 255], List[135, 118, 113, 255], List[174, 146, 134, \
255], List[161, 136, 125, 255], List[140, 121, 115, 255], List[156, 140, 132, \
255], List[155, 136, 127, 255], List[151, 143, 133, 255], List[147, 144, 135, \
255], List[151, 145, 136, 255], List[132, 126, 119, 255], List[151, 148, 139, \
255], List[144, 139, 131, 255], List[152, 148, 139, 255], List[149, 134, 125, \
255], List[151, 134, 125, 255], List[163, 138, 131, 255], List[171, 144, 136, \
255], List[163, 137, 125, 255], List[163, 133, 120, 255], List[155, 129, 118, \
255], List[154, 134, 120, 255], List[84, 81, 73, 255], List[57, 56, 54, 255], \
List[67, 66, 62, 255], List[62, 61, 59, 255], List[50, 50, 48, 255], List[57, \
55, 54, 255], List[62, 61, 58, 255], List[50, 49, 48, 255], List[27, 27, 29, \
255], List[52, 51, 50, 255], List[147, 143, 135, 255], List[162, 158, 149, \
255], List[117, 109, 101, 255], List[106, 89, 81, 255], List[111, 99, 91, \
255], List[132, 126, 114, 255], List[116, 109, 100, 255], List[109, 97, 91, \
255], List[118, 88, 81, 255], List[126, 108, 105, 255], List[128, 110, 101, \
255], List[84, 67, 62, 255], List[47, 32, 34, 255], List[73, 59, 57, 255], \
List[64, 47, 47, 255], List[57, 48, 46, 255], List[110, 103, 89, 255], \
List[113, 105, 91, 255], List[114, 106, 93, 255], List[111, 103, 89, 255], \
List[114, 107, 93, 255], List[114, 105, 91, 255], List[112, 104, 89, 255], \
List[116, 108, 94, 255], List[113, 105, 92, 255], List[115, 107, 93, 255], \
List[115, 107, 93, 255], List[117, 110, 95, 255], List[118, 109, 94, 255], \
List[119, 109, 94, 255], List[116, 106, 90, 255], List[119, 109, 95, 255], \
List[121, 114, 99, 255], List[118, 111, 97, 255], List[117, 109, 95, 255], \
List[120, 112, 98, 255], List[117, 109, 97, 255], List[121, 114, 102, 255], \
List[122, 115, 101, 255], List[119, 109, 95, 255], List[122, 114, 101, 255], \
List[126, 118, 105, 255]]], \\\"UnsignedInteger8\\\"], List[List[0, 43.`], \
List[75.`, 0]], List[0, 255], Rule[ColorFunction, RGBColor], \
Rule[ImageResolution, List[72, 72]]], BoxForm`ImageTag[\\\"Byte\\\", \
Rule[ColorSpace, \\\"RGB\\\"], Rule[Interleaving, True], \
Rule[MetaInformation, Association[Rule[\\\"Exif\\\", \
Association[Rule[\\\"ImageWidth\\\", 1200], Rule[\\\"ImageLength\\\", 680], \
Rule[\\\"XResolution\\\", 72], Rule[\\\"YResolution\\\", 72], \
Rule[\\\"ResolutionUnit\\\", \\\"Inch\\\"], Rule[\\\"Software\\\", \
\\\"Created with the Wolfram Language : www.wolfram.com\\\"], \
Rule[\\\"DateTime\\\", DateObject[List[2022, 12, 6, 13, 38, 15.`], \
\\\"Instant\\\", \\\"Gregorian\\\", -5.`]], Rule[\\\"TimeZoneOffset\\\", \
-5]]], Rule[\\\"Comments\\\", Association[Rule[\\\"Software\\\", \\\"Created \
with the Wolfram Language : www.wolfram.com\\\"], Rule[\\\"Creation Time\\\", \
DateObject[List[2022, 12, 6, 13, 38, 15.`], \\\"Instant\\\"]]]]]]], \
Rule[Selectable, False]], Rule[DefaultBaseStyle, \\\"ImageGraphics\\\"], \
Rule[ImageSizeRaw, List[75.`, 43.`]], Rule[PlotRange, List[List[0, 75.`], \
List[0, 43.`]]]]}], \\\",\\\", RowBox[{\\\"\\\\\\\"iRight\\\\\\\"\\\", \\\"\
\[Rule]\\\", GraphicsBox[TagBox[RasterBox[NumericArray[List[List[List[140, \
137, 129, 255], List[142, 138, 130, 255], List[145, 142, 133, 255], List[149, \
145, 136, 255], List[153, 149, 140, 255], List[157, 154, 145, 255], List[161, \
157, 148, 255], List[164, 160, 150, 255], List[167, 162, 153, 255], List[169, \
165, 155, 255], List[173, 169, 160, 255], List[151, 131, 111, 255], List[139, \
115, 90, 255], List[144, 115, 97, 255], List[93, 128, 68, 255], List[36, 149, \
39, 255], List[40, 135, 43, 255], List[44, 119, 54, 255], List[45, 125, 59, \
255], List[52, 128, 71, 255], List[57, 91, 89, 255], List[51, 75, 84, 255], \
List[37, 92, 77, 255], List[44, 80, 69, 255], List[38, 90, 62, 255], List[32, \
83, 78, 255], List[160, 143, 100, 255], List[255, 172, 111, 255], List[230, \
123, 105, 255], List[235, 127, 104, 255], List[243, 143, 108, 255], List[193, \
152, 129, 255], List[167, 151, 138, 255], List[165, 151, 137, 255], List[165, \
152, 136, 255], List[165, 151, 136, 255], List[166, 151, 136, 255], List[170, \
151, 136, 255], List[172, 150, 135, 255], List[174, 149, 135, 255], List[175, \
149, 134, 255], List[175, 147, 134, 255], List[176, 146, 133, 255], List[176, \
145, 132, 255], List[173, 145, 132, 255], List[174, 144, 131, 255], List[175, \
144, 131, 255], List[176, 144, 131, 255], List[175, 142, 130, 255], List[176, \
143, 131, 255], List[177, 143, 130, 255], List[179, 144, 130, 255], List[179, \
143, 130, 255], List[180, 143, 130, 255], List[182, 143, 130, 255], List[181, \
143, 130, 255], List[179, 144, 130, 255], List[178, 144, 130, 255], List[177, \
143, 129, 255], List[177, 143, 129, 255], List[177, 142, 129, 255], List[175, \
141, 129, 255], List[174, 140, 129, 255], List[172, 140, 129, 255], List[171, \
139, 128, 255], List[170, 139, 129, 255], List[168, 138, 128, 255], List[165, \
136, 127, 255], List[162, 136, 127, 255], List[161, 136, 127, 255], List[158, \
136, 127, 255], List[154, 134, 126, 255], List[152, 133, 126, 255], List[150, \
133, 126, 255], List[149, 132, 126, 255]], List[List[143, 140, 131, 255], \
List[145, 142, 133, 255], List[148, 144, 136, 255], List[151, 147, 138, 255], \
List[154, 150, 141, 255], List[157, 153, 144, 255], List[160, 156, 146, 255], \
List[162, 158, 148, 255], List[165, 160, 150, 255], List[169, 165, 157, 255], \
List[163, 155, 141, 255], List[141, 114, 90, 255], List[141, 117, 95, 255], \
List[137, 114, 93, 255], List[117, 112, 99, 255], List[83, 122, 81, 255], \
List[61, 126, 48, 255], List[54, 121, 40, 255], List[42, 125, 46, 255], \
List[50, 131, 58, 255], List[65, 114, 79, 255], List[67, 102, 77, 255], \
List[52, 102, 67, 255], List[60, 95, 69, 255], List[37, 103, 63, 255], \
List[31, 90, 66, 255], List[34, 82, 84, 255], List[168, 127, 99, 255], \
List[255, 174, 109, 255], List[249, 151, 106, 255], List[255, 144, 105, 255], \
List[221, 154, 123, 255], List[166, 151, 138, 255], List[169, 153, 136, 255], \
List[164, 152, 136, 255], List[163, 151, 137, 255], List[163, 151, 137, 255], \
List[164, 150, 137, 255], List[166, 151, 136, 255], List[169, 151, 136, 255], \
List[171, 150, 136, 255], List[172, 149, 136, 255], List[173, 148, 135, 255], \
List[174, 147, 134, 255], List[173, 146, 133, 255], List[173, 146, 133, 255], \
List[173, 146, 132, 255], List[174, 146, 131, 255], List[174, 145, 131, 255], \
List[174, 144, 131, 255], List[176, 144, 131, 255], List[177, 144, 131, 255], \
List[176, 145, 132, 255], List[178, 145, 131, 255], List[181, 145, 131, 255], \
List[182, 144, 131, 255], List[180, 145, 131, 255], List[180, 146, 131, 255], \
List[180, 145, 131, 255], List[180, 145, 131, 255], List[180, 144, 131, 255], \
List[180, 143, 130, 255], List[179, 144, 130, 255], List[177, 142, 130, 255], \
List[176, 141, 130, 255], List[176, 140, 130, 255], List[174, 140, 129, 255], \
List[171, 139, 129, 255], List[170, 139, 129, 255], List[167, 138, 128, 255], \
List[165, 137, 128, 255], List[162, 137, 127, 255], List[160, 136, 127, 255], \
List[159, 135, 127, 255], List[157, 134, 127, 255]], List[List[146, 143, 134, \
255], List[147, 142, 133, 255], List[148, 144, 135, 255], List[151, 147, 139, \
255], List[154, 150, 141, 255], List[157, 153, 143, 255], List[159, 155, 146, \
255], List[162, 158, 148, 255], List[163, 158, 149, 255], List[169, 165, 157, \
255], List[157, 137, 117, 255], List[139, 113, 86, 255], List[142, 116, 91, \
255], List[128, 112, 94, 255], List[116, 111, 101, 255], List[125, 112, 104, \
255], List[119, 117, 102, 255], List[87, 122, 72, 255], List[43, 139, 42, \
255], List[37, 148, 47, 255], List[59, 117, 64, 255], List[58, 112, 66, 255], \
List[54, 130, 65, 255], List[62, 123, 74, 255], List[49, 108, 66, 255], \
List[44, 99, 60, 255], List[67, 71, 75, 255], List[47, 65, 83, 255], \
List[155, 138, 99, 255], List[255, 173, 110, 255], List[245, 126, 104, 255], \
List[245, 142, 112, 255], List[189, 152, 132, 255], List[167, 148, 137, 255], \
List[163, 156, 137, 255], List[163, 152, 135, 255], List[163, 151, 137, 255], \
List[162, 151, 136, 255], List[163, 151, 136, 255], List[163, 151, 135, 255], \
List[165, 151, 136, 255], List[168, 150, 137, 255], List[169, 149, 136, 255], \
List[171, 150, 135, 255], List[172, 148, 135, 255], List[172, 148, 135, 255], \
List[172, 146, 134, 255], List[173, 146, 132, 255], List[171, 146, 132, 255], \
List[172, 146, 132, 255], List[173, 146, 132, 255], List[173, 146, 132, 255], \
List[175, 145, 132, 255], List[177, 146, 132, 255], List[179, 147, 132, 255], \
List[180, 146, 132, 255], List[181, 146, 131, 255], List[181, 145, 132, 255], \
List[181, 146, 131, 255], List[181, 146, 132, 255], List[180, 145, 133, 255], \
List[181, 145, 132, 255], List[181, 145, 132, 255], List[182, 145, 131, 255], \
List[180, 145, 131, 255], List[180, 144, 131, 255], List[178, 142, 130, 255], \
List[178, 141, 131, 255], List[176, 142, 130, 255], List[173, 140, 130, 255], \
List[171, 140, 129, 255], List[170, 140, 129, 255], List[168, 138, 128, 255], \
List[168, 138, 128, 255], List[165, 138, 128, 255]], List[List[142, 138, 131, \
255], List[150, 148, 141, 255], List[152, 149, 140, 255], List[151, 147, 139, \
255], List[153, 149, 140, 255], List[155, 151, 142, 255], List[158, 154, 145, \
255], List[160, 156, 146, 255], List[166, 161, 152, 255], List[154, 151, 140, \
255], List[113, 97, 71, 255], List[144, 117, 90, 255], List[143, 117, 92, \
255], List[122, 110, 93, 255], List[114, 110, 97, 255], List[118, 114, 99, \
255], List[107, 107, 101, 255], List[119, 114, 111, 255], List[102, 121, 97, \
255], List[67, 152, 61, 255], List[41, 143, 46, 255], List[34, 114, 51, 255], \
List[54, 152, 53, 255], List[69, 144, 80, 255], List[59, 127, 80, 255], \
List[47, 98, 63, 255], List[73, 71, 64, 255], List[57, 83, 71, 255], List[20, \
79, 74, 255], List[149, 121, 94, 255], List[255, 163, 107, 255], List[253, \
197, 110, 255], List[240, 214, 120, 255], List[195, 159, 130, 255], List[170, \
145, 134, 255], List[160, 150, 136, 255], List[163, 153, 137, 255], List[162, \
150, 137, 255], List[161, 151, 136, 255], List[162, 150, 136, 255], List[163, \
150, 136, 255], List[164, 149, 136, 255], List[164, 150, 137, 255], List[165, \
150, 136, 255], List[167, 150, 136, 255], List[169, 149, 136, 255], List[170, \
148, 135, 255], List[171, 149, 135, 255], List[170, 148, 134, 255], List[170, \
147, 134, 255], List[171, 147, 134, 255], List[172, 147, 133, 255], List[173, \
147, 132, 255], List[174, 147, 132, 255], List[177, 146, 132, 255], List[177, \
146, 132, 255], List[179, 147, 133, 255], List[181, 147, 133, 255], List[181, \
146, 133, 255], List[181, 145, 132, 255], List[181, 146, 133, 255], List[181, \
147, 133, 255], List[182, 146, 132, 255], List[181, 146, 132, 255], List[182, \
147, 133, 255], List[181, 146, 131, 255], List[180, 146, 131, 255], List[181, \
144, 131, 255], List[180, 143, 130, 255], List[179, 143, 130, 255], List[177, \
142, 130, 255], List[176, 142, 130, 255], List[175, 142, 130, 255], List[174, \
140, 129, 255], List[172, 139, 129, 255]], List[List[114, 95, 77, 255], \
List[125, 112, 99, 255], List[139, 134, 125, 255], List[152, 150, 142, 255], \
List[158, 155, 146, 255], List[158, 154, 145, 255], List[157, 153, 144, 255], \
List[157, 153, 144, 255], List[169, 165, 157, 255], List[119, 118, 100, 255], \
List[46, 53, 29, 255], List[80, 73, 55, 255], List[138, 116, 81, 255], \
List[109, 104, 95, 255], List[107, 105, 100, 255], List[115, 112, 103, 255], \
List[104, 106, 99, 255], List[107, 108, 98, 255], List[115, 110, 106, 255], \
List[121, 116, 111, 255], List[92, 126, 84, 255], List[48, 133, 51, 255], \
List[51, 155, 46, 255], List[73, 143, 77, 255], List[63, 146, 93, 255], \
List[50, 120, 67, 255], List[49, 97, 63, 255], List[39, 102, 59, 255], \
List[35, 97, 65, 255], List[20, 68, 58, 255], List[152, 161, 87, 255], \
List[255, 255, 116, 255], List[254, 220, 110, 255], List[255, 214, 113, 255], \
List[230, 213, 126, 255], List[191, 160, 131, 255], List[168, 148, 136, 255], \
List[163, 152, 137, 255], List[161, 152, 136, 255], List[160, 151, 137, 255], \
List[161, 150, 137, 255], List[162, 150, 137, 255], List[161, 150, 137, 255], \
List[161, 149, 136, 255], List[161, 148, 136, 255], List[162, 149, 136, 255], \
List[165, 150, 136, 255], List[167, 150, 136, 255], List[168, 150, 137, 255], \
List[169, 149, 136, 255], List[169, 149, 135, 255], List[172, 149, 135, 255], \
List[173, 148, 134, 255], List[173, 147, 133, 255], List[175, 147, 133, 255], \
List[177, 147, 133, 255], List[177, 148, 134, 255], List[179, 148, 134, 255], \
List[180, 148, 134, 255], List[179, 147, 133, 255], List[180, 147, 134, 255], \
List[180, 148, 134, 255], List[180, 147, 134, 255], List[180, 147, 133, 255], \
List[182, 147, 133, 255], List[181, 147, 133, 255], List[181, 147, 133, 255], \
List[183, 147, 132, 255], List[183, 146, 132, 255], List[181, 144, 131, 255], \
List[182, 144, 131, 255], List[181, 145, 131, 255], List[181, 144, 130, 255], \
List[180, 143, 131, 255], List[177, 142, 131, 255]], List[List[114, 93, 72, \
255], List[117, 94, 72, 255], List[117, 95, 74, 255], List[121, 104, 89, \
255], List[134, 126, 115, 255], List[151, 147, 139, 255], List[160, 157, 148, \
255], List[164, 160, 151, 255], List[163, 159, 148, 255], List[64, 65, 56, \
255], List[35, 39, 33, 255], List[47, 50, 39, 255], List[76, 76, 46, 255], \
List[92, 90, 54, 255], List[97, 93, 78, 255], List[109, 106, 97, 255], \
List[112, 112, 101, 255], List[110, 112, 105, 255], List[107, 109, 100, 255], \
List[103, 104, 97, 255], List[127, 115, 108, 255], List[115, 113, 99, 255], \
List[89, 140, 75, 255], List[65, 147, 66, 255], List[46, 151, 77, 255], \
List[54, 151, 77, 255], List[58, 135, 86, 255], List[58, 112, 74, 255], \
List[55, 101, 67, 255], List[31, 67, 66, 255], List[167, 162, 96, 255], \
List[254, 245, 116, 255], List[252, 224, 112, 255], List[254, 211, 111, 255], \
List[255, 213, 111, 255], List[255, 212, 117, 255], List[199, 168, 131, 255], \
List[164, 149, 136, 255], List[165, 152, 136, 255], List[162, 152, 136, 255], \
List[161, 151, 136, 255], List[160, 150, 137, 255], List[159, 150, 136, 255], \
List[160, 151, 138, 255], List[162, 153, 140, 255], List[158, 150, 138, 255], \
List[156, 148, 136, 255], List[160, 149, 136, 255], List[162, 150, 137, 255], \
List[164, 151, 137, 255], List[165, 150, 136, 255], List[167, 151, 136, 255], \
List[169, 150, 137, 255], List[171, 150, 136, 255], List[173, 148, 135, 255], \
List[176, 149, 135, 255], List[176, 148, 135, 255], List[176, 149, 135, 255], \
List[177, 149, 135, 255], List[178, 148, 135, 255], List[177, 148, 135, 255], \
List[178, 148, 135, 255], List[178, 147, 135, 255], List[179, 148, 134, 255], \
List[180, 147, 134, 255], List[180, 147, 134, 255], List[181, 147, 133, 255], \
List[180, 148, 133, 255], List[181, 147, 133, 255], List[183, 146, 133, 255], \
List[183, 145, 133, 255], List[182, 146, 132, 255], List[183, 147, 132, 255], \
List[183, 145, 131, 255], List[182, 145, 131, 255]], List[List[113, 93, 75, \
255], List[117, 97, 77, 255], List[121, 99, 77, 255], List[117, 91, 68, 255], \
List[112, 88, 66, 255], List[117, 99, 82, 255], List[128, 122, 115, 255], \
List[148, 144, 136, 255], List[129, 125, 116, 255], List[49, 52, 42, 255], \
List[50, 55, 38, 255], List[45, 48, 41, 255], List[40, 39, 41, 255], List[50, \
51, 41, 255], List[82, 80, 47, 255], List[113, 104, 80, 255], List[124, 117, \
106, 255], List[107, 105, 96, 255], List[111, 110, 101, 255], List[116, 114, \
104, 255], List[120, 116, 99, 255], List[120, 114, 104, 255], List[123, 108, \
102, 255], List[118, 120, 94, 255], List[72, 141, 80, 255], List[57, 145, 82, \
255], List[71, 140, 81, 255], List[66, 143, 75, 255], List[44, 100, 66, 255], \
List[106, 110, 87, 255], List[255, 195, 116, 255], List[254, 176, 109, 255], \
List[249, 163, 108, 255], List[252, 174, 110, 255], List[248, 136, 106, 255], \
List[249, 157, 107, 255], List[248, 201, 120, 255], List[180, 149, 133, 255], \
List[165, 151, 137, 255], List[167, 151, 137, 255], List[164, 152, 136, 255], \
List[161, 151, 136, 255], List[161, 152, 138, 255], List[159, 153, 139, 255], \
List[160, 154, 139, 255], List[160, 154, 140, 255], List[160, 153, 141, 255], \
List[158, 151, 138, 255], List[156, 149, 137, 255], List[158, 150, 137, 255], \
List[159, 150, 137, 255], List[160, 150, 137, 255], List[161, 149, 136, 255], \
List[164, 151, 137, 255], List[165, 151, 137, 255], List[168, 150, 136, 255], \
List[170, 148, 135, 255], List[172, 149, 136, 255], List[173, 150, 136, 255], \
List[173, 149, 136, 255], List[173, 149, 136, 255], List[174, 149, 136, 255], \
List[177, 148, 136, 255], List[176, 148, 136, 255], List[175, 148, 136, 255], \
List[176, 148, 136, 255], List[177, 148, 134, 255], List[178, 148, 134, 255], \
List[179, 148, 134, 255], List[181, 148, 134, 255], List[180, 147, 134, 255], \
List[180, 147, 133, 255], List[181, 146, 133, 255], List[182, 147, 133, 255], \
List[183, 147, 133, 255]], List[List[112, 93, 76, 255], List[116, 94, 75, \
255], List[116, 94, 74, 255], List[115, 93, 73, 255], List[116, 94, 73, 255], \
List[113, 100, 89, 255], List[104, 99, 96, 255], List[108, 100, 95, 255], \
List[94, 88, 80, 255], List[61, 64, 43, 255], List[82, 78, 67, 255], List[74, \
73, 60, 255], List[54, 57, 42, 255], List[43, 43, 41, 255], List[45, 46, 41, \
255], List[51, 53, 41, 255], List[100, 94, 84, 255], List[156, 151, 135, \
255], List[122, 119, 113, 255], List[102, 100, 91, 255], List[112, 108, 97, \
255], List[116, 110, 99, 255], List[119, 114, 100, 255], List[124, 112, 101, \
255], List[125, 109, 101, 255], List[103, 120, 88, 255], List[69, 143, 62, \
255], List[43, 136, 49, 255], List[53, 106, 69, 255], List[119, 105, 105, \
255], List[200, 151, 113, 255], List[218, 144, 109, 255], List[244, 129, 107, \
255], List[250, 152, 109, 255], List[247, 164, 110, 255], List[246, 145, 109, \
255], List[255, 158, 106, 255], List[225, 175, 124, 255], List[165, 150, 135, \
255], List[170, 152, 137, 255], List[164, 153, 137, 255], List[164, 152, 135, \
255], List[163, 154, 138, 255], List[160, 154, 139, 255], List[159, 153, 137, \
255], List[159, 154, 138, 255], List[155, 152, 139, 255], List[154, 151, 140, \
255], List[157, 152, 139, 255], List[154, 149, 137, 255], List[155, 150, 136, \
255], List[154, 150, 137, 255], List[156, 150, 137, 255], List[158, 149, 137, \
255], List[159, 149, 137, 255], List[160, 150, 136, 255], List[161, 150, 136, \
255], List[162, 149, 136, 255], List[164, 150, 136, 255], List[165, 150, 136, \
255], List[165, 149, 136, 255], List[167, 150, 136, 255], List[167, 149, 137, \
255], List[167, 147, 136, 255], List[167, 149, 136, 255], List[168, 149, 136, \
255], List[169, 149, 136, 255], List[173, 149, 136, 255], List[175, 150, 136, \
255], List[176, 149, 136, 255], List[178, 148, 136, 255], List[178, 148, 135, \
255], List[178, 148, 134, 255], List[179, 147, 133, 255], List[181, 147, 133, \
255]], List[List[110, 91, 73, 255], List[116, 93, 74, 255], List[112, 90, 72, \
255], List[113, 91, 73, 255], List[117, 99, 82, 255], List[147, 143, 135, \
255], List[126, 124, 117, 255], List[127, 122, 118, 255], List[119, 118, 110, \
255], List[104, 103, 89, 255], List[110, 100, 96, 255], List[104, 96, 90, \
255], List[104, 98, 86, 255], List[75, 74, 59, 255], List[53, 56, 43, 255], \
List[44, 49, 38, 255], List[34, 40, 31, 255], List[101, 101, 68, 255], \
List[164, 161, 139, 255], List[141, 140, 135, 255], List[111, 110, 105, 255], \
List[116, 109, 97, 255], List[123, 111, 96, 255], List[119, 112, 97, 255], \
List[117, 115, 103, 255], List[124, 113, 103, 255], List[122, 117, 105, 255], \
List[82, 115, 84, 255], List[84, 104, 91, 255], List[94, 93, 109, 255], \
List[95, 96, 106, 255], List[94, 99, 107, 255], List[176, 122, 108, 255], \
List[255, 151, 108, 255], List[251, 158, 108, 255], List[254, 179, 109, 255], \
List[254, 188, 109, 255], List[244, 180, 111, 255], List[181, 151, 130, 255], \
List[164, 152, 136, 255], List[169, 154, 137, 255], List[165, 154, 138, 255], \
List[160, 153, 136, 255], List[160, 153, 136, 255], List[159, 151, 136, 255], \
List[159, 154, 139, 255], List[151, 149, 137, 255], List[152, 150, 138, 255], \
List[160, 156, 140, 255], List[160, 154, 140, 255], List[158, 153, 139, 255], \
List[157, 152, 138, 255], List[155, 150, 137, 255], List[155, 150, 137, 255], \
List[156, 151, 137, 255], List[155, 150, 136, 255], List[154, 149, 135, 255], \
List[154, 150, 136, 255], List[156, 150, 137, 255], List[157, 150, 137, 255], \
List[157, 149, 137, 255], List[158, 149, 137, 255], List[160, 149, 137, 255], \
List[159, 149, 137, 255], List[159, 149, 138, 255], List[160, 149, 138, 255], \
List[160, 149, 137, 255], List[162, 149, 137, 255], List[165, 149, 137, 255], \
List[167, 149, 136, 255], List[170, 149, 136, 255], List[173, 148, 136, 255], \
List[177, 149, 136, 255], List[178, 149, 136, 255], List[179, 148, 136, \
255]], List[List[112, 91, 73, 255], List[110, 89, 72, 255], List[110, 90, 74, \
255], List[109, 86, 67, 255], List[130, 119, 106, 255], List[160, 157, 148, \
255], List[162, 157, 147, 255], List[137, 136, 132, 255], List[121, 121, 119, \
255], List[131, 130, 128, 255], List[132, 130, 125, 255], List[121, 113, 106, \
255], List[113, 103, 98, 255], List[103, 94, 88, 255], List[71, 72, 55, 255], \
List[46, 51, 37, 255], List[49, 53, 43, 255], List[50, 50, 37, 255], List[53, \
55, 37, 255], List[106, 105, 90, 255], List[134, 135, 128, 255], List[120, \
118, 112, 255], List[121, 110, 94, 255], List[120, 113, 101, 255], List[114, \
109, 97, 255], List[123, 118, 102, 255], List[113, 109, 100, 255], List[117, \
113, 108, 255], List[116, 116, 111, 255], List[107, 108, 108, 255], List[99, \
100, 107, 255], List[94, 98, 109, 255], List[123, 108, 108, 255], List[247, \
186, 113, 255], List[255, 202, 111, 255], List[253, 199, 111, 255], List[254, \
183, 111, 255], List[254, 175, 110, 255], List[241, 195, 122, 255], List[182, \
159, 133, 255], List[165, 150, 137, 255], List[164, 153, 136, 255], List[156, \
149, 133, 255], List[158, 151, 135, 255], List[158, 150, 135, 255], List[158, \
151, 137, 255], List[158, 154, 140, 255], List[160, 153, 139, 255], List[159, \
154, 138, 255], List[160, 155, 138, 255], List[160, 156, 139, 255], List[153, \
148, 135, 255], List[155, 151, 137, 255], List[156, 150, 137, 255], List[156, \
151, 137, 255], List[157, 154, 140, 255], List[160, 156, 141, 255], List[156, \
152, 138, 255], List[154, 150, 137, 255], List[155, 151, 138, 255], List[155, \
151, 138, 255], List[154, 150, 137, 255], List[155, 149, 138, 255], List[156, \
149, 138, 255], List[156, 150, 138, 255], List[155, 148, 138, 255], List[155, \
148, 138, 255], List[156, 150, 138, 255], List[156, 149, 138, 255], List[159, \
148, 137, 255], List[160, 149, 137, 255], List[163, 149, 136, 255], List[166, \
149, 136, 255], List[170, 149, 136, 255], List[172, 149, 136, 255]], \
List[List[109, 89, 74, 255], List[107, 87, 73, 255], List[109, 89, 71, 255], \
List[109, 91, 74, 255], List[143, 139, 130, 255], List[155, 151, 141, 255], \
List[159, 154, 144, 255], List[150, 148, 141, 255], List[137, 136, 131, 255], \
List[143, 142, 136, 255], List[151, 149, 144, 255], List[143, 141, 135, 255], \
List[129, 125, 119, 255], List[121, 115, 109, 255], List[78, 79, 54, 255], \
List[59, 60, 46, 255], List[77, 74, 64, 255], List[68, 67, 56, 255], List[50, \
53, 44, 255], List[42, 50, 36, 255], List[86, 66, 54, 255], List[111, 91, 82, \
255], List[105, 105, 101, 255], List[109, 110, 107, 255], List[110, 109, 102, \
255], List[114, 110, 101, 255], List[112, 112, 105, 255], List[107, 109, 100, \
255], List[112, 112, 103, 255], List[114, 115, 106, 255], List[115, 114, 107, \
255], List[106, 104, 107, 255], List[108, 107, 115, 255], List[150, 133, 115, \
255], List[231, 167, 110, 255], List[255, 170, 109, 255], List[250, 140, 107, \
255], List[251, 147, 108, 255], List[254, 173, 108, 255], List[249, 186, 119, \
255], List[194, 172, 139, 255], List[151, 145, 132, 255], List[154, 149, 132, \
255], List[155, 149, 134, 255], List[157, 151, 137, 255], List[154, 151, 139, \
255], List[156, 151, 137, 255], List[159, 151, 136, 255], List[160, 153, 137, \
255], List[161, 154, 138, 255], List[161, 154, 137, 255], List[153, 149, 134, \
255], List[163, 159, 141, 255], List[165, 159, 143, 255], List[160, 156, 142, \
255], List[150, 144, 131, 255], List[131, 126, 116, 255], List[150, 145, 132, \
255], List[157, 153, 140, 255], List[155, 151, 138, 255], List[157, 152, 139, \
255], List[156, 151, 138, 255], List[155, 151, 138, 255], List[156, 150, 138, \
255], List[156, 150, 138, 255], List[155, 150, 138, 255], List[154, 150, 138, \
255], List[154, 149, 138, 255], List[153, 149, 137, 255], List[153, 147, 137, \
255], List[156, 149, 138, 255], List[156, 149, 138, 255], List[156, 150, 137, \
255], List[159, 150, 138, 255], List[161, 149, 138, 255]], List[List[104, 87, \
72, 255], List[107, 89, 74, 255], List[106, 85, 68, 255], List[119, 108, 97, \
255], List[148, 146, 139, 255], List[153, 149, 139, 255], List[158, 153, 143, \
255], List[163, 157, 147, 255], List[156, 152, 145, 255], List[157, 154, 148, \
255], List[158, 155, 149, 255], List[156, 155, 148, 255], List[148, 148, 142, \
255], List[131, 131, 128, 255], List[112, 112, 99, 255], List[108, 103, 92, \
255], List[96, 88, 83, 255], List[83, 76, 70, 255], List[65, 71, 48, 255], \
List[67, 64, 48, 255], List[89, 53, 46, 255], List[58, 43, 33, 255], List[96, \
95, 89, 255], List[114, 111, 104, 255], List[112, 110, 104, 255], List[111, \
109, 100, 255], List[116, 113, 102, 255], List[114, 115, 106, 255], List[111, \
112, 105, 255], List[106, 106, 99, 255], List[125, 118, 104, 255], List[116, \
112, 98, 255], List[118, 112, 105, 255], List[122, 119, 121, 255], List[140, \
122, 117, 255], List[232, 155, 112, 255], List[251, 128, 105, 255], List[255, \
175, 113, 255], List[161, 143, 90, 255], List[119, 105, 80, 255], List[173, \
158, 112, 255], List[157, 150, 138, 255], List[158, 152, 135, 255], List[153, \
149, 133, 255], List[149, 147, 134, 255], List[147, 146, 137, 255], List[156, \
151, 137, 255], List[157, 151, 136, 255], List[160, 153, 136, 255], List[160, \
153, 136, 255], List[159, 152, 134, 255], List[158, 151, 133, 255], List[145, \
139, 125, 255], List[124, 119, 110, 255], List[103, 101, 94, 255], List[91, \
89, 84, 255], List[79, 77, 75, 255], List[112, 109, 102, 255], List[163, 158, \
142, 255], List[158, 152, 138, 255], List[157, 152, 139, 255], List[157, 152, \
139, 255], List[158, 153, 139, 255], List[157, 152, 139, 255], List[155, 152, \
138, 255], List[156, 152, 139, 255], List[155, 151, 139, 255], List[153, 151, \
138, 255], List[154, 150, 138, 255], List[154, 150, 138, 255], List[154, 150, \
138, 255], List[154, 150, 138, 255], List[154, 150, 138, 255], List[155, 149, \
139, 255], List[155, 150, 139, 255]], List[List[103, 86, 72, 255], List[106, \
87, 71, 255], List[102, 84, 69, 255], List[129, 127, 120, 255], List[146, \
144, 136, 255], List[151, 147, 137, 255], List[156, 152, 142, 255], List[158, \
154, 144, 255], List[171, 166, 155, 255], List[176, 172, 162, 255], List[174, \
169, 159, 255], List[161, 159, 151, 255], List[150, 149, 143, 255], List[133, \
133, 128, 255], List[132, 132, 130, 255], List[138, 133, 130, 255], List[121, \
113, 106, 255], List[108, 99, 94, 255], List[101, 96, 85, 255], List[107, 80, \
67, 255], List[82, 48, 39, 255], List[88, 79, 70, 255], List[114, 108, 99, \
255], List[109, 104, 96, 255], List[109, 107, 100, 255], List[110, 108, 101, \
255], List[115, 112, 101, 255], List[111, 108, 98, 255], List[117, 114, 104, \
255], List[117, 114, 104, 255], List[121, 113, 99, 255], List[120, 116, 104, \
255], List[121, 113, 99, 255], List[129, 118, 102, 255], List[125, 123, 113, \
255], List[139, 121, 120, 255], List[219, 149, 117, 255], List[238, 206, 112, \
255], List[75, 86, 76, 255], List[34, 47, 60, 255], List[33, 42, 49, 255], \
List[79, 80, 80, 255], List[140, 134, 122, 255], List[161, 154, 140, 255], \
List[147, 144, 134, 255], List[146, 143, 131, 255], List[156, 152, 135, 255], \
List[155, 150, 134, 255], List[157, 150, 134, 255], List[160, 154, 136, 255], \
List[159, 153, 135, 255], List[111, 106, 97, 255], List[84, 82, 78, 255], \
List[83, 81, 77, 255], List[84, 83, 78, 255], List[87, 86, 81, 255], List[89, \
87, 83, 255], List[83, 82, 78, 255], List[138, 133, 122, 255], List[167, 160, \
144, 255], List[162, 157, 140, 255], List[159, 156, 141, 255], List[158, 153, \
139, 255], List[157, 153, 139, 255], List[157, 153, 139, 255], List[157, 154, \
139, 255], List[157, 153, 139, 255], List[155, 153, 139, 255], List[156, 151, \
139, 255], List[155, 152, 139, 255], List[154, 151, 138, 255], List[155, 150, \
138, 255], List[155, 151, 139, 255], List[156, 151, 139, 255], List[155, 151, \
139, 255]], List[List[105, 86, 71, 255], List[105, 84, 68, 255], List[109, \
98, 87, 255], List[135, 137, 132, 255], List[144, 141, 132, 255], List[150, \
146, 137, 255], List[154, 150, 140, 255], List[160, 155, 145, 255], List[175, \
171, 159, 255], List[177, 172, 161, 255], List[177, 172, 161, 255], List[173, \
168, 158, 255], List[165, 162, 153, 255], List[157, 155, 147, 255], List[147, \
145, 140, 255], List[151, 148, 143, 255], List[132, 127, 121, 255], List[114, \
107, 104, 255], List[131, 122, 115, 255], List[109, 79, 69, 255], List[72, \
47, 45, 255], List[103, 98, 96, 255], List[111, 106, 98, 255], List[117, 108, \
95, 255], List[110, 107, 100, 255], List[108, 108, 103, 255], List[101, 103, \
102, 255], List[112, 111, 103, 255], List[114, 111, 101, 255], List[110, 108, \
101, 255], List[112, 110, 102, 255], List[119, 112, 98, 255], List[121, 113, \
100, 255], List[121, 113, 101, 255], List[118, 111, 99, 255], List[117, 116, \
106, 255], List[156, 146, 124, 255], List[134, 129, 102, 255], List[57, 66, \
76, 255], List[65, 71, 70, 255], List[32, 37, 43, 255], List[23, 30, 40, \
255], List[54, 59, 62, 255], List[105, 107, 102, 255], List[153, 151, 139, \
255], List[182, 178, 168, 255], List[151, 147, 135, 255], List[153, 148, 132, \
255], List[157, 151, 132, 255], List[145, 139, 125, 255], List[162, 157, 142, \
255], List[86, 85, 81, 255], List[81, 79, 75, 255], List[92, 90, 84, 255], \
List[89, 87, 82, 255], List[88, 86, 81, 255], List[88, 86, 82, 255], List[86, \
84, 79, 255], List[94, 92, 87, 255], List[162, 154, 139, 255], List[147, 143, \
131, 255], List[159, 152, 138, 255], List[171, 160, 144, 255], List[169, 160, \
144, 255], List[164, 159, 143, 255], List[161, 156, 141, 255], List[160, 155, \
141, 255], List[159, 154, 141, 255], List[158, 154, 140, 255], List[159, 154, \
142, 255], List[159, 154, 142, 255], List[157, 153, 140, 255], List[154, 154, \
141, 255], List[152, 153, 139, 255], List[153, 153, 139, 255]], \
List[List[107, 87, 70, 255], List[102, 83, 67, 255], List[124, 119, 111, \
255], List[139, 138, 132, 255], List[144, 140, 131, 255], List[149, 145, 136, \
255], List[153, 148, 139, 255], List[166, 162, 152, 255], List[174, 170, 158, \
255], List[173, 168, 157, 255], List[173, 168, 157, 255], List[173, 168, 156, \
255], List[175, 170, 158, 255], List[173, 169, 158, 255], List[171, 166, 156, \
255], List[174, 169, 157, 255], List[168, 163, 152, 255], List[144, 141, 134, \
255], List[128, 119, 112, 255], List[81, 63, 61, 255], List[79, 72, 70, 255], \
List[112, 107, 98, 255], List[106, 101, 92, 255], List[106, 102, 94, 255], \
List[108, 106, 100, 255], List[99, 103, 101, 255], List[97, 103, 103, 255], \
List[107, 108, 102, 255], List[107, 106, 101, 255], List[115, 112, 105, 255], \
List[110, 110, 106, 255], List[118, 111, 101, 255], List[127, 113, 96, 255], \
List[119, 111, 98, 255], List[121, 115, 103, 255], List[122, 114, 99, 255], \
List[122, 121, 114, 255], List[97, 104, 110, 255], List[100, 108, 109, 255], \
List[46, 51, 55, 255], List[27, 33, 40, 255], List[46, 51, 54, 255], List[59, \
67, 69, 255], List[118, 122, 119, 255], List[194, 191, 180, 255], List[155, \
140, 115, 255], List[138, 123, 97, 255], List[166, 157, 140, 255], List[155, \
150, 134, 255], List[145, 146, 134, 255], List[159, 135, 110, 255], List[72, \
47, 34, 255], List[53, 55, 57, 255], List[95, 91, 85, 255], List[87, 85, 80, \
255], List[87, 85, 81, 255], List[88, 86, 81, 255], List[89, 87, 82, 255], \
List[82, 81, 76, 255], List[115, 111, 101, 255], List[154, 150, 136, 255], \
List[133, 129, 122, 255], List[103, 104, 110, 255], List[124, 120, 119, 255], \
List[159, 152, 136, 255], List[168, 161, 142, 255], List[167, 162, 143, 255], \
List[167, 161, 144, 255], List[166, 160, 145, 255], List[165, 159, 143, 255], \
List[162, 157, 140, 255], List[165, 159, 142, 255], List[164, 159, 143, 255], \
List[165, 161, 144, 255], List[164, 160, 142, 255]], List[List[103, 83, 66, \
255], List[106, 92, 79, 255], List[136, 132, 124, 255], List[141, 136, 127, \
255], List[145, 141, 132, 255], List[148, 144, 135, 255], List[155, 152, 142, \
255], List[171, 167, 156, 255], List[171, 166, 155, 255], List[170, 166, 155, \
255], List[171, 166, 155, 255], List[169, 165, 154, 255], List[169, 164, 153, \
255], List[169, 164, 153, 255], List[169, 164, 153, 255], List[167, 163, 152, \
255], List[166, 162, 151, 255], List[171, 166, 155, 255], List[161, 154, 145, \
255], List[129, 128, 125, 255], List[96, 96, 94, 255], List[104, 100, 92, \
255], List[124, 109, 94, 255], List[107, 104, 95, 255], List[99, 100, 99, \
255], List[93, 101, 107, 255], List[100, 103, 102, 255], List[111, 108, 102, \
255], List[115, 109, 98, 255], List[109, 106, 98, 255], List[108, 108, 106, \
255], List[112, 109, 105, 255], List[115, 109, 101, 255], List[114, 113, 106, \
255], List[114, 109, 99, 255], List[115, 111, 100, 255], List[136, 138, 132, \
255], List[126, 132, 131, 255], List[97, 103, 103, 255], List[34, 39, 44, \
255], List[49, 56, 60, 255], List[37, 44, 50, 255], List[133, 134, 130, 255], \
List[193, 184, 169, 255], List[130, 109, 79, 255], List[99, 78, 48, 255], \
List[104, 106, 96, 255], List[124, 125, 119, 255], List[154, 138, 116, 255], \
List[131, 95, 69, 255], List[134, 72, 36, 255], List[126, 107, 89, 255], \
List[93, 94, 88, 255], List[78, 75, 72, 255], List[87, 86, 82, 255], List[88, \
86, 82, 255], List[89, 87, 82, 255], List[88, 86, 82, 255], List[89, 87, 82, \
255], List[84, 82, 78, 255], List[141, 136, 121, 255], List[167, 160, 141, \
255], List[136, 134, 126, 255], List[97, 102, 108, 255], List[93, 99, 106, \
255], List[112, 114, 114, 255], List[111, 115, 114, 255], List[126, 127, 123, \
255], List[135, 134, 130, 255], List[126, 127, 124, 255], List[111, 116, 116, \
255], List[125, 125, 121, 255], List[118, 120, 119, 255], List[135, 135, 127, \
255], List[126, 126, 122, 255]], List[List[102, 82, 64, 255], List[118, 110, \
101, 255], List[137, 135, 127, 255], List[139, 135, 127, 255], List[144, 141, \
132, 255], List[146, 142, 133, 255], List[164, 160, 149, 255], List[170, 165, \
154, 255], List[168, 163, 152, 255], List[167, 163, 152, 255], List[167, 163, \
152, 255], List[166, 162, 151, 255], List[165, 161, 150, 255], List[165, 160, \
150, 255], List[164, 159, 149, 255], List[162, 157, 147, 255], List[160, 156, \
146, 255], List[158, 153, 144, 255], List[168, 160, 145, 255], List[121, 116, \
108, 255], List[90, 91, 90, 255], List[127, 112, 98, 255], List[144, 119, 99, \
255], List[138, 120, 104, 255], List[102, 103, 100, 255], List[88, 96, 99, \
255], List[106, 105, 100, 255], List[107, 103, 96, 255], List[115, 108, 96, \
255], List[113, 107, 96, 255], List[113, 107, 99, 255], List[111, 107, 103, \
255], List[107, 108, 107, 255], List[112, 111, 105, 255], List[109, 108, 101, \
255], List[123, 122, 114, 255], List[155, 159, 154, 255], List[140, 145, 140, \
255], List[72, 78, 79, 255], List[67, 77, 81, 255], List[46, 53, 58, 255], \
List[26, 33, 41, 255], List[136, 137, 132, 255], List[192, 183, 166, 255], \
List[126, 114, 94, 255], List[76, 83, 85, 255], List[85, 80, 77, 255], \
List[107, 65, 41, 255], List[140, 77, 38, 255], List[139, 65, 20, 255], \
List[118, 77, 50, 255], List[138, 137, 126, 255], List[160, 154, 139, 255], \
List[90, 87, 82, 255], List[71, 70, 67, 255], List[81, 80, 76, 255], List[81, \
80, 75, 255], List[83, 81, 78, 255], List[88, 86, 82, 255], List[86, 84, 80, \
255], List[93, 91, 86, 255], List[159, 150, 132, 255], List[170, 161, 143, \
255], List[165, 156, 139, 255], List[146, 144, 133, 255], List[128, 130, 126, \
255], List[104, 110, 114, 255], List[108, 113, 116, 255], List[116, 118, 120, \
255], List[106, 111, 116, 255], List[102, 109, 115, 255], List[115, 121, 122, \
255], List[118, 123, 122, 255], List[115, 121, 122, 255], List[116, 123, 122, \
255]], List[List[87, 77, 68, 255], List[133, 129, 120, 255], List[135, 132, \
124, 255], List[139, 136, 127, 255], List[141, 138, 130, 255], List[152, 147, \
139, 255], List[168, 162, 152, 255], List[166, 161, 151, 255], List[165, 161, \
150, 255], List[164, 160, 150, 255], List[164, 159, 149, 255], List[162, 158, \
148, 255], List[161, 157, 146, 255], List[159, 155, 145, 255], List[157, 153, \
143, 255], List[155, 151, 142, 255], List[152, 150, 141, 255], List[158, 151, \
141, 255], List[120, 140, 148, 255], List[80, 104, 103, 255], List[122, 106, \
93, 255], List[143, 122, 104, 255], List[144, 123, 105, 255], List[143, 121, \
103, 255], List[140, 121, 106, 255], List[114, 108, 99, 255], List[102, 102, \
97, 255], List[114, 106, 94, 255], List[109, 103, 96, 255], List[109, 106, \
100, 255], List[114, 105, 97, 255], List[115, 108, 97, 255], List[111, 107, \
99, 255], List[113, 110, 103, 255], List[107, 106, 98, 255], List[156, 156, \
148, 255], List[154, 159, 153, 255], List[114, 119, 115, 255], List[108, 116, \
118, 255], List[73, 84, 90, 255], List[35, 42, 50, 255], List[47, 53, 58, \
255], List[115, 117, 111, 255], List[206, 200, 188, 255], List[221, 220, 210, \
255], List[166, 149, 132, 255], List[132, 66, 27, 255], List[140, 71, 27, \
255], List[136, 73, 33, 255], List[143, 99, 71, 255], List[82, 77, 71, 255], \
List[105, 104, 99, 255], List[122, 117, 107, 255], List[117, 116, 108, 255], \
List[81, 79, 75, 255], List[86, 84, 80, 255], List[81, 80, 76, 255], List[81, \
80, 76, 255], List[88, 86, 82, 255], List[88, 86, 82, 255], List[81, 80, 77, \
255], List[116, 112, 102, 255], List[166, 159, 141, 255], List[159, 152, 136, \
255], List[164, 155, 140, 255], List[163, 158, 143, 255], List[136, 136, 129, \
255], List[114, 119, 119, 255], List[119, 123, 121, 255], List[122, 127, 122, \
255], List[125, 130, 126, 255], List[123, 129, 126, 255], List[131, 136, 130, \
255], List[132, 136, 131, 255], List[129, 135, 130, 255]], List[List[78, 77, \
77, 255], List[118, 114, 109, 255], List[131, 128, 121, 255], List[133, 131, \
123, 255], List[143, 139, 130, 255], List[162, 157, 147, 255], List[164, 160, \
149, 255], List[161, 157, 147, 255], List[162, 157, 147, 255], List[161, 156, \
146, 255], List[160, 156, 146, 255], List[158, 154, 144, 255], List[157, 152, \
142, 255], List[154, 150, 141, 255], List[148, 146, 139, 255], List[144, 144, \
138, 255], List[142, 144, 138, 255], List[138, 137, 128, 255], List[47, 96, \
142, 255], List[87, 107, 118, 255], List[145, 120, 96, 255], List[138, 120, \
104, 255], List[140, 120, 103, 255], List[137, 119, 104, 255], List[140, 119, \
102, 255], List[140, 116, 98, 255], List[125, 115, 104, 255], List[104, 100, \
92, 255], List[109, 103, 93, 255], List[111, 105, 96, 255], List[111, 104, \
96, 255], List[109, 102, 94, 255], List[107, 97, 84, 255], List[104, 97, 86, \
255], List[124, 122, 116, 255], List[178, 180, 172, 255], List[143, 148, 142, \
255], List[137, 142, 138, 255], List[87, 97, 104, 255], List[48, 58, 65, \
255], List[38, 45, 53, 255], List[56, 63, 65, 255], List[61, 67, 72, 255], \
List[192, 186, 175, 255], List[221, 215, 202, 255], List[225, 221, 208, 255], \
List[163, 123, 97, 255], List[136, 79, 45, 255], List[180, 158, 141, 255], \
List[175, 172, 163, 255], List[93, 93, 85, 255], List[63, 70, 73, 255], \
List[109, 108, 101, 255], List[100, 97, 90, 255], List[44, 45, 45, 255], \
List[88, 85, 81, 255], List[89, 87, 82, 255], List[88, 86, 82, 255], List[87, \
85, 81, 255], List[86, 84, 80, 255], List[87, 85, 81, 255], List[85, 82, 78, \
255], List[135, 130, 118, 255], List[163, 156, 141, 255], List[157, 151, 136, \
255], List[158, 155, 139, 255], List[131, 130, 122, 255], List[118, 123, 121, \
255], List[125, 130, 125, 255], List[114, 118, 119, 255], List[123, 125, 123, \
255], List[127, 130, 127, 255], List[121, 126, 123, 255], List[123, 129, 125, \
255], List[125, 130, 127, 255]], List[List[86, 79, 77, 255], List[91, 87, 85, \
255], List[108, 107, 104, 255], List[111, 110, 107, 255], List[135, 133, 127, \
255], List[153, 150, 142, 255], List[159, 155, 145, 255], List[162, 157, 147, \
255], List[159, 155, 145, 255], List[158, 153, 143, 255], List[156, 152, 142, \
255], List[154, 150, 140, 255], List[152, 148, 138, 255], List[149, 145, 137, \
255], List[141, 142, 135, 255], List[135, 138, 133, 255], List[140, 140, 133, \
255], List[72, 94, 107, 255], List[66, 77, 79, 255], List[143, 113, 91, 255], \
List[135, 115, 96, 255], List[135, 114, 95, 255], List[137, 117, 100, 255], \
List[139, 122, 107, 255], List[138, 117, 100, 255], List[137, 114, 97, 255], \
List[138, 114, 98, 255], List[119, 106, 95, 255], List[101, 101, 98, 255], \
List[108, 101, 93, 255], List[112, 106, 96, 255], List[106, 95, 86, 255], \
List[99, 77, 69, 255], List[96, 74, 74, 255], List[158, 155, 148, 255], \
List[186, 187, 178, 255], List[138, 141, 137, 255], List[132, 137, 137, 255], \
List[63, 73, 80, 255], List[36, 51, 70, 255], List[57, 70, 83, 255], List[56, \
63, 66, 255], List[41, 51, 61, 255], List[172, 169, 160, 255], List[222, 215, \
202, 255], List[226, 222, 209, 255], List[208, 202, 190, 255], List[169, 162, \
152, 255], List[163, 163, 155, 255], List[130, 126, 117, 255], List[98, 94, \
86, 255], List[55, 59, 61, 255], List[118, 114, 108, 255], List[72, 75, 72, \
255], List[20, 21, 24, 255], List[65, 64, 61, 255], List[90, 89, 83, 255], \
List[85, 83, 79, 255], List[87, 85, 81, 255], List[90, 88, 84, 255], List[91, \
89, 85, 255], List[80, 80, 76, 255], List[110, 108, 99, 255], List[159, 154, \
138, 255], List[157, 154, 141, 255], List[144, 140, 127, 255], List[137, 135, \
125, 255], List[137, 140, 133, 255], List[138, 139, 132, 255], List[126, 130, \
127, 255], List[123, 126, 123, 255], List[130, 132, 128, 255], List[126, 130, \
127, 255], List[130, 133, 128, 255], List[134, 137, 131, 255]], List[List[69, \
64, 62, 255], List[89, 84, 80, 255], List[97, 96, 95, 255], List[101, 100, \
98, 255], List[129, 127, 123, 255], List[136, 135, 130, 255], List[146, 143, \
136, 255], List[148, 145, 138, 255], List[150, 146, 139, 255], List[155, 151, \
142, 255], List[153, 149, 139, 255], List[150, 146, 137, 255], List[149, 145, \
135, 255], List[146, 142, 133, 255], List[140, 138, 131, 255], List[136, 136, \
129, 255], List[105, 115, 114, 255], List[66, 75, 80, 255], List[139, 110, \
91, 255], List[139, 115, 96, 255], List[137, 116, 100, 255], List[137, 118, \
101, 255], List[133, 111, 93, 255], List[135, 115, 96, 255], List[136, 115, \
98, 255], List[136, 116, 101, 255], List[132, 111, 97, 255], List[137, 115, \
101, 255], List[120, 104, 93, 255], List[101, 100, 99, 255], List[102, 101, \
98, 255], List[106, 83, 75, 255], List[104, 71, 66, 255], List[119, 96, 96, \
255], List[180, 182, 172, 255], List[174, 174, 165, 255], List[137, 141, 136, \
255], List[116, 122, 122, 255], List[35, 46, 59, 255], List[50, 77, 108, \
255], List[64, 80, 93, 255], List[38, 45, 54, 255], List[46, 52, 60, 255], \
List[159, 147, 134, 255], List[217, 213, 201, 255], List[225, 220, 205, 255], \
List[226, 220, 206, 255], List[166, 162, 153, 255], List[105, 101, 95, 255], \
List[85, 85, 83, 255], List[36, 45, 51, 255], List[81, 67, 63, 255], \
List[138, 103, 88, 255], List[140, 115, 98, 255], List[41, 40, 41, 255], \
List[32, 33, 34, 255], List[83, 80, 76, 255], List[94, 91, 86, 255], List[86, \
84, 79, 255], List[75, 75, 70, 255], List[50, 50, 50, 255], List[120, 116, \
106, 255], List[161, 156, 140, 255], List[153, 150, 136, 255], List[139, 138, \
129, 255], List[137, 131, 117, 255], List[141, 141, 132, 255], List[138, 142, \
135, 255], List[136, 139, 132, 255], List[137, 140, 133, 255], List[139, 142, \
134, 255], List[139, 141, 134, 255], List[138, 141, 134, 255], List[137, 140, \
134, 255], List[136, 139, 133, 255]], List[List[50, 49, 47, 255], List[65, \
61, 58, 255], List[73, 74, 64, 255], List[107, 107, 102, 255], List[120, 120, \
117, 255], List[130, 128, 124, 255], List[132, 131, 126, 255], List[129, 128, \
123, 255], List[127, 126, 122, 255], List[136, 134, 128, 255], List[146, 142, \
134, 255], List[147, 143, 134, 255], List[144, 140, 132, 255], List[142, 139, \
130, 255], List[137, 133, 124, 255], List[125, 126, 121, 255], List[90, 91, \
90, 255], List[126, 101, 83, 255], List[140, 116, 94, 255], List[135, 112, \
93, 255], List[136, 114, 97, 255], List[137, 117, 101, 255], List[134, 111, \
92, 255], List[133, 109, 92, 255], List[133, 114, 98, 255], List[131, 110, \
93, 255], List[131, 112, 99, 255], List[126, 110, 98, 255], List[130, 106, \
91, 255], List[118, 104, 92, 255], List[103, 91, 86, 255], List[113, 75, 65, \
255], List[113, 78, 69, 255], List[127, 126, 126, 255], List[158, 164, 160, \
255], List[162, 165, 158, 255], List[122, 127, 125, 255], List[46, 54, 66, \
255], List[46, 72, 99, 255], List[62, 95, 126, 255], List[46, 57, 67, 255], \
List[33, 46, 56, 255], List[84, 58, 43, 255], List[158, 125, 101, 255], \
List[206, 206, 196, 255], List[227, 220, 207, 255], List[228, 223, 208, 255], \
List[215, 209, 196, 255], List[96, 97, 94, 255], List[36, 41, 46, 255], \
List[44, 47, 47, 255], List[112, 84, 70, 255], List[149, 98, 83, 255], \
List[149, 108, 81, 255], List[88, 83, 75, 255], List[24, 27, 29, 255], \
List[48, 48, 47, 255], List[54, 54, 54, 255], List[47, 46, 45, 255], List[34, \
35, 36, 255], List[60, 57, 53, 255], List[161, 149, 128, 255], List[163, 154, \
136, 255], List[162, 157, 142, 255], List[138, 135, 123, 255], List[135, 134, \
123, 255], List[138, 142, 134, 255], List[137, 140, 132, 255], List[140, 142, \
134, 255], List[139, 141, 133, 255], List[138, 141, 133, 255], List[139, 141, \
134, 255], List[139, 142, 133, 255], List[138, 142, 133, 255], List[137, 140, \
132, 255]], List[List[77, 69, 65, 255], List[37, 38, 36, 255], List[49, 53, \
37, 255], List[91, 87, 78, 255], List[102, 97, 94, 255], List[104, 100, 95, \
255], List[115, 114, 109, 255], List[115, 115, 113, 255], List[108, 108, 106, \
255], List[111, 112, 109, 255], List[127, 126, 122, 255], List[145, 142, 132, \
255], List[143, 140, 131, 255], List[136, 133, 124, 255], List[128, 126, 119, \
255], List[111, 106, 99, 255], List[122, 102, 85, 255], List[138, 112, 91, \
255], List[135, 112, 93, 255], List[135, 113, 94, 255], List[129, 108, 90, \
255], List[133, 112, 96, 255], List[134, 112, 95, 255], List[132, 110, 92, \
255], List[133, 113, 99, 255], List[124, 102, 87, 255], List[125, 106, 92, \
255], List[124, 105, 91, 255], List[122, 104, 91, 255], List[117, 99, 92, \
255], List[113, 98, 95, 255], List[109, 83, 75, 255], List[102, 90, 94, 255], \
List[138, 144, 141, 255], List[145, 144, 137, 255], List[147, 148, 143, 255], \
List[44, 52, 62, 255], List[27, 46, 70, 255], List[59, 87, 116, 255], \
List[52, 73, 94, 255], List[37, 48, 61, 255], List[46, 57, 67, 255], List[54, \
44, 38, 255], List[90, 87, 84, 255], List[202, 197, 185, 255], List[222, 217, \
205, 255], List[214, 209, 196, 255], List[204, 199, 187, 255], List[142, 139, \
131, 255], List[34, 43, 50, 255], List[87, 68, 58, 255], List[112, 82, 66, \
255], List[143, 94, 75, 255], List[132, 110, 92, 255], List[129, 124, 109, \
255], List[50, 49, 48, 255], List[46, 45, 44, 255], List[76, 73, 67, 255], \
List[110, 103, 91, 255], List[62, 59, 56, 255], List[119, 111, 96, 255], \
List[131, 121, 102, 255], List[133, 124, 105, 255], List[145, 134, 115, 255], \
List[152, 142, 123, 255], List[155, 149, 135, 255], List[151, 151, 141, 255], \
List[143, 144, 137, 255], List[137, 140, 133, 255], List[136, 139, 132, 255], \
List[138, 141, 132, 255], List[139, 141, 133, 255], List[140, 142, 133, 255], \
List[140, 143, 133, 255], List[140, 143, 133, 255]], List[List[129, 114, 111, \
255], List[90, 86, 81, 255], List[48, 50, 40, 255], List[64, 62, 54, 255], \
List[81, 74, 70, 255], List[88, 81, 78, 255], List[93, 85, 83, 255], List[90, \
89, 79, 255], List[91, 91, 82, 255], List[107, 105, 104, 255], List[108, 105, \
102, 255], List[110, 107, 102, 255], List[118, 115, 109, 255], List[123, 120, \
114, 255], List[113, 108, 101, 255], List[120, 103, 88, 255], List[130, 106, \
84, 255], List[132, 110, 90, 255], List[130, 109, 92, 255], List[134, 115, \
99, 255], List[134, 114, 98, 255], List[131, 110, 95, 255], List[133, 113, \
98, 255], List[129, 106, 91, 255], List[131, 109, 94, 255], List[129, 110, \
97, 255], List[121, 102, 88, 255], List[116, 96, 86, 255], List[119, 102, 81, \
255], List[127, 84, 74, 255], List[126, 75, 71, 255], List[133, 86, 56, 255], \
List[156, 92, 46, 255], List[175, 128, 87, 255], List[191, 149, 109, 255], \
List[125, 94, 73, 255], List[48, 52, 67, 255], List[35, 46, 68, 255], \
List[26, 55, 89, 255], List[26, 52, 82, 255], List[26, 48, 77, 255], List[46, \
54, 64, 255], List[41, 48, 52, 255], List[68, 73, 77, 255], List[187, 182, \
172, 255], List[202, 197, 185, 255], List[180, 176, 166, 255], List[134, 130, \
122, 255], List[114, 113, 108, 255], List[83, 83, 82, 255], List[137, 93, 66, \
255], List[117, 80, 65, 255], List[111, 82, 70, 255], List[138, 124, 106, \
255], List[100, 95, 84, 255], List[65, 62, 57, 255], List[131, 121, 107, \
255], List[138, 129, 113, 255], List[134, 125, 109, 255], List[121, 112, 97, \
255], List[135, 125, 109, 255], List[129, 120, 103, 255], List[129, 121, 103, \
255], List[128, 119, 102, 255], List[131, 120, 103, 255], List[135, 124, 107, \
255], List[147, 138, 120, 255], List[155, 147, 130, 255], List[156, 152, 137, \
255], List[150, 150, 140, 255], List[142, 145, 136, 255], List[136, 141, 133, \
255], List[136, 141, 132, 255], List[139, 143, 133, 255], List[141, 144, 134, \
255]], List[List[161, 132, 125, 255], List[128, 107, 97, 255], List[125, 117, \
105, 255], List[101, 97, 86, 255], List[85, 82, 71, 255], List[73, 69, 61, \
255], List[60, 58, 52, 255], List[40, 45, 30, 255], List[56, 58, 48, 255], \
List[85, 78, 75, 255], List[89, 82, 80, 255], List[87, 81, 80, 255], List[80, \
77, 77, 255], List[86, 78, 74, 255], List[112, 93, 79, 255], List[131, 114, \
95, 255], List[133, 112, 93, 255], List[132, 113, 95, 255], List[128, 108, \
90, 255], List[129, 110, 94, 255], List[129, 108, 92, 255], List[129, 106, \
89, 255], List[128, 106, 90, 255], List[126, 104, 88, 255], List[119, 96, 82, \
255], List[121, 101, 88, 255], List[123, 102, 90, 255], List[123, 108, 93, \
255], List[114, 73, 65, 255], List[117, 65, 94, 255], List[62, 68, 65, 255], \
List[45, 18, 51, 255], List[111, 55, 25, 255], List[140, 114, 87, 255], \
List[79, 89, 99, 255], List[93, 68, 53, 255], List[31, 40, 59, 255], List[80, \
76, 81, 255], List[103, 91, 84, 255], List[81, 65, 61, 255], List[55, 60, 75, \
255], List[38, 47, 57, 255], List[54, 59, 62, 255], List[53, 57, 60, 255], \
List[174, 169, 159, 255], List[163, 159, 149, 255], List[115, 112, 106, 255], \
List[146, 142, 133, 255], List[191, 189, 181, 255], List[113, 92, 85, 255], \
List[132, 90, 67, 255], List[125, 83, 74, 255], List[96, 72, 69, 255], \
List[116, 111, 98, 255], List[92, 87, 79, 255], List[107, 99, 88, 255], \
List[133, 123, 107, 255], List[121, 112, 96, 255], List[126, 116, 99, 255], \
List[134, 124, 108, 255], List[127, 118, 102, 255], List[130, 121, 105, 255], \
List[132, 123, 107, 255], List[131, 122, 104, 255], List[130, 121, 103, 255], \
List[131, 123, 108, 255], List[128, 120, 104, 255], List[129, 121, 104, 255], \
List[138, 128, 109, 255], List[150, 139, 120, 255], List[155, 146, 128, 255], \
List[156, 153, 139, 255], List[147, 150, 139, 255], List[140, 144, 136, 255], \
List[138, 142, 132, 255]], List[List[146, 135, 121, 255], List[120, 110, 95, \
255], List[145, 137, 120, 255], List[141, 134, 120, 255], List[132, 124, 112, \
255], List[114, 109, 95, 255], List[94, 80, 71, 255], List[78, 70, 66, 255], \
List[60, 57, 52, 255], List[57, 54, 51, 255], List[55, 54, 51, 255], List[64, \
61, 57, 255], List[88, 79, 74, 255], List[116, 98, 83, 255], List[120, 101, \
83, 255], List[126, 105, 86, 255], List[130, 108, 90, 255], List[129, 111, \
96, 255], List[126, 107, 90, 255], List[125, 107, 90, 255], List[123, 104, \
87, 255], List[125, 104, 87, 255], List[124, 106, 91, 255], List[128, 109, \
97, 255], List[122, 105, 94, 255], List[114, 98, 90, 255], List[110, 92, 83, \
255], List[106, 94, 80, 255], List[97, 62, 61, 255], List[95, 51, 90, 255], \
List[62, 49, 52, 255], List[67, 40, 31, 255], List[120, 68, 25, 255], \
List[156, 84, 24, 255], List[88, 51, 29, 255], List[159, 86, 27, 255], \
List[165, 96, 41, 255], List[174, 94, 28, 255], List[195, 99, 18, 255], \
List[204, 101, 14, 255], List[170, 89, 23, 255], List[67, 60, 52, 255], \
List[44, 53, 58, 255], List[36, 44, 52, 255], List[94, 99, 103, 255], \
List[114, 110, 102, 255], List[156, 152, 143, 255], List[232, 226, 212, 255], \
List[234, 229, 216, 255], List[153, 121, 108, 255], List[117, 75, 64, 255], \
List[111, 67, 68, 255], List[112, 87, 78, 255], List[121, 116, 103, 255], \
List[131, 122, 107, 255], List[124, 115, 100, 255], List[130, 122, 106, 255], \
List[127, 117, 100, 255], List[125, 115, 99, 255], List[125, 115, 99, 255], \
List[126, 117, 100, 255], List[130, 121, 105, 255], List[130, 121, 105, 255], \
List[132, 124, 107, 255], List[130, 121, 105, 255], List[129, 121, 104, 255], \
List[131, 122, 105, 255], List[129, 119, 101, 255], List[133, 125, 108, 255], \
List[128, 118, 101, 255], List[132, 118, 100, 255], List[139, 126, 106, 255], \
List[152, 142, 122, 255], List[160, 153, 136, 255], List[153, 151, 137, \
255]], List[List[151, 124, 118, 255], List[150, 132, 122, 255], List[145, \
135, 122, 255], List[138, 132, 115, 255], List[126, 113, 100, 255], List[139, \
115, 106, 255], List[140, 126, 118, 255], List[130, 113, 109, 255], List[118, \
101, 94, 255], List[106, 92, 86, 255], List[74, 68, 62, 255], List[53, 53, \
47, 255], List[83, 67, 60, 255], List[130, 110, 92, 255], List[124, 107, 90, \
255], List[128, 106, 88, 255], List[127, 105, 87, 255], List[129, 112, 97, \
255], List[126, 109, 94, 255], List[124, 108, 94, 255], List[125, 108, 94, \
255], List[123, 105, 90, 255], List[121, 103, 90, 255], List[117, 97, 82, \
255], List[127, 98, 77, 255], List[132, 97, 74, 255], List[131, 92, 65, 255], \
List[122, 81, 51, 255], List[123, 68, 33, 255], List[153, 82, 22, 255], \
List[183, 96, 22, 255], List[206, 104, 17, 255], List[215, 105, 12, 255], \
List[198, 101, 19, 255], List[187, 105, 37, 255], List[190, 95, 15, 255], \
List[178, 95, 26, 255], List[178, 91, 20, 255], List[183, 89, 10, 255], \
List[150, 92, 42, 255], List[116, 107, 98, 255], List[98, 76, 56, 255], \
List[53, 63, 66, 255], List[44, 55, 72, 255], List[24, 46, 75, 255], List[86, \
90, 92, 255], List[135, 131, 121, 255], List[202, 195, 184, 255], List[234, \
232, 218, 255], List[177, 152, 142, 255], List[94, 52, 47, 255], List[112, \
85, 78, 255], List[141, 132, 118, 255], List[126, 117, 100, 255], List[128, \
117, 101, 255], List[124, 114, 97, 255], List[128, 118, 103, 255], List[130, \
120, 102, 255], List[130, 121, 106, 255], List[128, 119, 104, 255], List[126, \
116, 99, 255], List[126, 117, 101, 255], List[127, 118, 101, 255], List[131, \
123, 107, 255], List[129, 121, 106, 255], List[128, 119, 104, 255], List[131, \
122, 106, 255], List[129, 119, 102, 255], List[130, 119, 102, 255], List[133, \
122, 105, 255], List[133, 121, 104, 255], List[129, 120, 104, 255], List[131, \
122, 106, 255], List[138, 126, 110, 255], List[152, 138, 119, 255]], \
List[List[122, 84, 73, 255], List[154, 112, 105, 255], List[167, 123, 115, \
255], List[162, 125, 109, 255], List[147, 124, 109, 255], List[150, 126, 116, \
255], List[147, 123, 117, 255], List[133, 113, 107, 255], List[135, 123, 114, \
255], List[124, 110, 107, 255], List[121, 107, 102, 255], List[103, 91, 88, \
255], List[89, 83, 80, 255], List[104, 95, 86, 255], List[127, 107, 90, 255], \
List[133, 113, 94, 255], List[125, 105, 90, 255], List[123, 104, 88, 255], \
List[122, 104, 89, 255], List[122, 105, 93, 255], List[123, 105, 91, 255], \
List[121, 102, 87, 255], List[121, 104, 91, 255], List[114, 90, 78, 255], \
List[125, 61, 18, 255], List[132, 67, 17, 255], List[130, 65, 18, 255], \
List[131, 68, 12, 255], List[132, 43, 23, 255], List[167, 51, 25, 255], \
List[192, 99, 11, 255], List[164, 87, 24, 255], List[121, 75, 37, 255], \
List[161, 84, 19, 255], List[177, 87, 12, 255], List[174, 88, 16, 255], \
List[173, 82, 7, 255], List[174, 85, 15, 255], List[174, 87, 20, 255], \
List[131, 92, 61, 255], List[147, 147, 142, 255], List[86, 84, 81, 255], \
List[106, 119, 126, 255], List[63, 78, 94, 255], List[27, 46, 71, 255], \
List[36, 58, 85, 255], List[83, 86, 88, 255], List[130, 127, 118, 255], \
List[213, 209, 197, 255], List[198, 186, 173, 255], List[131, 110, 101, 255], \
List[181, 178, 169, 255], List[159, 152, 139, 255], List[129, 118, 100, 255], \
List[126, 117, 91, 255], List[130, 120, 100, 255], List[127, 117, 101, 255], \
List[120, 109, 93, 255], List[130, 120, 102, 255], List[132, 124, 108, 255], \
List[132, 122, 106, 255], List[128, 117, 101, 255], List[124, 113, 96, 255], \
List[129, 120, 104, 255], List[130, 122, 107, 255], List[129, 120, 106, 255], \
List[131, 122, 107, 255], List[130, 121, 104, 255], List[132, 122, 104, 255], \
List[126, 114, 97, 255], List[128, 117, 100, 255], List[131, 121, 105, 255], \
List[132, 123, 107, 255], List[133, 124, 109, 255], List[136, 127, 111, \
255]], List[List[84, 61, 53, 255], List[93, 68, 60, 255], List[129, 95, 83, \
255], List[163, 120, 108, 255], List[177, 126, 107, 255], List[165, 126, 108, \
255], List[153, 130, 115, 255], List[146, 123, 114, 255], List[146, 125, 119, \
255], List[130, 112, 105, 255], List[127, 118, 111, 255], List[114, 110, 105, \
255], List[93, 90, 86, 255], List[79, 78, 76, 255], List[92, 82, 76, 255], \
List[122, 102, 86, 255], List[126, 105, 88, 255], List[120, 102, 88, 255], \
List[121, 105, 92, 255], List[120, 101, 87, 255], List[118, 97, 82, 255], \
List[120, 100, 86, 255], List[117, 100, 88, 255], List[114, 94, 82, 255], \
List[111, 62, 33, 255], List[106, 59, 29, 255], List[106, 60, 31, 255], \
List[112, 63, 31, 255], List[140, 74, 26, 255], List[175, 89, 26, 255], \
List[179, 88, 12, 255], List[120, 101, 83, 255], List[88, 101, 109, 255], \
List[127, 75, 34, 255], List[170, 86, 22, 255], List[145, 79, 31, 255], \
List[156, 114, 81, 255], List[159, 139, 121, 255], List[157, 152, 144, 255], \
List[75, 75, 75, 255], List[116, 116, 113, 255], List[95, 113, 129, 255], \
List[91, 112, 130, 255], List[52, 68, 85, 255], List[29, 44, 65, 255], \
List[40, 65, 93, 255], List[31, 42, 64, 255], List[102, 94, 88, 255], \
List[135, 134, 126, 255], List[180, 177, 168, 255], List[168, 164, 153, 255], \
List[138, 121, 96, 255], List[111, 92, 60, 255], List[122, 113, 81, 255], \
List[114, 107, 75, 255], List[128, 116, 94, 255], List[133, 123, 107, 255], \
List[127, 117, 102, 255], List[123, 113, 95, 255], List[124, 114, 97, 255], \
List[125, 114, 98, 255], List[131, 121, 104, 255], List[132, 124, 108, 255], \
List[129, 120, 104, 255], List[125, 115, 100, 255], List[128, 119, 104, 255], \
List[130, 122, 107, 255], List[125, 117, 102, 255], List[128, 120, 105, 255], \
List[134, 125, 109, 255], List[131, 121, 105, 255], List[129, 120, 104, 255], \
List[128, 119, 104, 255], List[132, 123, 107, 255], List[127, 117, 101, \
255]], List[List[87, 63, 58, 255], List[86, 65, 61, 255], List[83, 65, 59, \
255], List[97, 76, 72, 255], List[144, 110, 97, 255], List[160, 119, 104, \
255], List[170, 123, 104, 255], List[166, 127, 108, 255], List[161, 142, 130, \
255], List[142, 130, 127, 255], List[136, 117, 109, 255], List[135, 121, 109, \
255], List[116, 113, 106, 255], List[93, 93, 90, 255], List[66, 66, 67, 255], \
List[63, 56, 57, 255], List[110, 94, 83, 255], List[128, 110, 96, 255], \
List[118, 103, 90, 255], List[117, 98, 84, 255], List[119, 102, 88, 255], \
List[118, 99, 86, 255], List[112, 95, 83, 255], List[114, 92, 76, 255], \
List[107, 55, 22, 255], List[99, 55, 27, 255], List[102, 57, 27, 255], \
List[102, 56, 26, 255], List[123, 62, 20, 255], List[155, 74, 20, 255], \
List[125, 62, 15, 255], List[123, 117, 106, 255], List[145, 141, 132, 255], \
List[132, 135, 131, 255], List[139, 146, 145, 255], List[120, 134, 137, 255], \
List[139, 163, 168, 255], List[142, 163, 167, 255], List[147, 162, 162, 255], \
List[131, 142, 145, 255], List[103, 116, 127, 255], List[120, 132, 141, 255], \
List[131, 142, 147, 255], List[98, 110, 120, 255], List[33, 50, 74, 255], \
List[37, 63, 93, 255], List[57, 54, 61, 255], List[111, 75, 61, 255], \
List[106, 97, 91, 255], List[118, 114, 101, 255], List[117, 102, 72, 255], \
List[112, 90, 59, 255], List[126, 113, 89, 255], List[111, 105, 72, 255], \
List[126, 114, 89, 255], List[125, 113, 94, 255], List[128, 117, 99, 255], \
List[127, 117, 97, 255], List[130, 120, 102, 255], List[125, 116, 100, 255], \
List[127, 117, 101, 255], List[129, 120, 104, 255], List[124, 114, 98, 255], \
List[127, 118, 103, 255], List[128, 119, 104, 255], List[124, 115, 99, 255], \
List[128, 121, 106, 255], List[126, 118, 103, 255], List[127, 120, 105, 255], \
List[127, 120, 106, 255], List[129, 123, 109, 255], List[130, 122, 108, 255], \
List[129, 121, 105, 255], List[130, 120, 105, 255], List[128, 119, 104, \
255]], List[List[89, 66, 58, 255], List[80, 63, 64, 255], List[86, 67, 66, \
255], List[98, 73, 64, 255], List[120, 93, 82, 255], List[124, 91, 75, 255], \
List[128, 96, 87, 255], List[134, 97, 89, 255], List[161, 116, 94, 255], \
List[167, 144, 134, 255], List[133, 154, 165, 255], List[126, 146, 153, 255], \
List[134, 126, 117, 255], List[137, 123, 110, 255], List[121, 109, 100, 255], \
List[84, 78, 77, 255], List[41, 40, 45, 255], List[88, 78, 71, 255], \
List[123, 103, 87, 255], List[118, 100, 88, 255], List[114, 94, 81, 255], \
List[113, 94, 80, 255], List[110, 94, 83, 255], List[102, 86, 75, 255], \
List[98, 78, 65, 255], List[65, 49, 45, 255], List[38, 37, 32, 255], List[61, \
62, 57, 255], List[79, 45, 74, 255], List[69, 44, 69, 255], List[57, 69, 84, \
255], List[74, 74, 70, 255], List[140, 135, 127, 255], List[128, 140, 142, \
255], List[132, 158, 167, 255], List[138, 163, 168, 255], List[137, 155, 157, \
255], List[137, 153, 155, 255], List[138, 151, 154, 255], List[139, 152, 152, \
255], List[145, 156, 155, 255], List[149, 157, 155, 255], List[158, 164, 159, \
255], List[137, 142, 139, 255], List[49, 67, 88, 255], List[31, 51, 76, 255], \
List[92, 78, 60, 255], List[103, 72, 53, 255], List[99, 65, 54, 255], \
List[102, 80, 56, 255], List[112, 95, 74, 255], List[126, 118, 105, 255], \
List[129, 119, 101, 255], List[121, 113, 88, 255], List[128, 117, 97, 255], \
List[128, 117, 100, 255], List[120, 111, 86, 255], List[115, 109, 78, 255], \
List[128, 116, 97, 255], List[134, 123, 107, 255], List[129, 120, 100, 255], \
List[132, 123, 102, 255], List[125, 114, 97, 255], List[131, 122, 108, 255], \
List[131, 123, 109, 255], List[128, 120, 106, 255], List[128, 121, 107, 255], \
List[125, 118, 103, 255], List[126, 118, 102, 255], List[125, 116, 103, 255], \
List[126, 117, 103, 255], List[133, 125, 111, 255], List[125, 117, 101, 255], \
List[122, 114, 97, 255], List[132, 124, 109, 255]], List[List[89, 64, 53, \
255], List[83, 64, 62, 255], List[83, 63, 59, 255], List[108, 81, 69, 255], \
List[126, 94, 83, 255], List[129, 90, 72, 255], List[121, 93, 86, 255], \
List[123, 89, 79, 255], List[134, 94, 74, 255], List[136, 88, 68, 255], \
List[119, 103, 98, 255], List[80, 149, 180, 255], List[118, 168, 196, 255], \
List[116, 156, 175, 255], List[135, 136, 137, 255], List[138, 119, 111, 255], \
List[122, 106, 102, 255], List[72, 69, 69, 255], List[80, 68, 64, 255], \
List[116, 97, 84, 255], List[116, 96, 82, 255], List[110, 92, 80, 255], \
List[107, 93, 82, 255], List[104, 85, 74, 255], List[103, 92, 78, 255], \
List[99, 63, 86, 255], List[88, 42, 90, 255], List[100, 70, 109, 255], \
List[74, 41, 73, 255], List[40, 45, 72, 255], List[111, 125, 144, 255], \
List[103, 104, 97, 255], List[107, 101, 97, 255], List[116, 109, 100, 255], \
List[124, 120, 114, 255], List[130, 141, 144, 255], List[128, 152, 159, 255], \
List[131, 152, 157, 255], List[131, 148, 152, 255], List[132, 148, 151, 255], \
List[136, 151, 154, 255], List[139, 153, 154, 255], List[140, 152, 152, 255], \
List[157, 164, 160, 255], List[82, 96, 109, 255], List[43, 51, 57, 255], \
List[98, 80, 54, 255], List[96, 68, 50, 255], List[95, 61, 47, 255], List[90, \
54, 44, 255], List[115, 101, 89, 255], List[121, 113, 99, 255], List[119, \
108, 92, 255], List[128, 119, 103, 255], List[125, 116, 99, 255], List[130, \
120, 104, 255], List[123, 114, 92, 255], List[123, 113, 90, 255], List[124, \
113, 95, 255], List[128, 115, 96, 255], List[120, 110, 80, 255], List[118, \
109, 82, 255], List[136, 124, 107, 255], List[125, 116, 99, 255], List[128, \
119, 103, 255], List[126, 116, 100, 255], List[125, 116, 101, 255], List[125, \
117, 103, 255], List[126, 117, 103, 255], List[124, 115, 100, 255], List[128, \
119, 104, 255], List[128, 118, 104, 255], List[129, 120, 105, 255], List[128, \
119, 104, 255], List[130, 121, 105, 255]], List[List[86, 63, 55, 255], \
List[88, 68, 60, 255], List[92, 70, 61, 255], List[106, 81, 80, 255], \
List[120, 88, 80, 255], List[116, 90, 86, 255], List[115, 88, 86, 255], \
List[135, 95, 76, 255], List[137, 96, 74, 255], List[138, 93, 73, 255], \
List[91, 75, 60, 255], List[33, 44, 34, 255], List[52, 69, 75, 255], List[56, \
102, 122, 255], List[96, 139, 156, 255], List[150, 151, 150, 255], List[142, \
125, 117, 255], List[139, 114, 107, 255], List[115, 99, 98, 255], List[105, \
91, 82, 255], List[109, 91, 78, 255], List[102, 88, 79, 255], List[101, 86, \
75, 255], List[100, 80, 70, 255], List[96, 88, 69, 255], List[78, 108, 73, \
255], List[70, 55, 80, 255], List[90, 58, 95, 255], List[110, 83, 114, 255], \
List[106, 124, 129, 255], List[110, 112, 112, 255], List[119, 111, 102, 255], \
List[127, 122, 114, 255], List[111, 109, 101, 255], List[114, 108, 101, 255], \
List[117, 109, 101, 255], List[122, 124, 122, 255], List[124, 140, 145, 255], \
List[124, 145, 153, 255], List[128, 148, 154, 255], List[132, 149, 153, 255], \
List[135, 152, 154, 255], List[135, 152, 153, 255], List[144, 159, 158, 255], \
List[97, 112, 120, 255], List[69, 63, 50, 255], List[93, 66, 51, 255], \
List[90, 57, 51, 255], List[89, 56, 44, 255], List[89, 62, 52, 255], \
List[118, 109, 96, 255], List[122, 113, 98, 255], List[126, 117, 102, 255], \
List[122, 111, 96, 255], List[117, 107, 92, 255], List[120, 110, 93, 255], \
List[124, 115, 99, 255], List[131, 121, 105, 255], List[130, 119, 101, 255], \
List[123, 111, 86, 255], List[118, 112, 77, 255], List[125, 117, 84, 255], \
List[132, 121, 93, 255], List[128, 115, 96, 255], List[126, 113, 96, 255], \
List[137, 125, 108, 255], List[137, 125, 107, 255], List[134, 123, 107, 255], \
List[130, 121, 106, 255], List[127, 118, 103, 255], List[127, 118, 104, 255], \
List[125, 114, 99, 255], List[127, 118, 103, 255], List[126, 118, 105, 255], \
List[125, 115, 101, 255]], List[List[81, 62, 59, 255], List[83, 63, 59, 255], \
List[98, 70, 60, 255], List[116, 87, 82, 255], List[123, 92, 82, 255], \
List[122, 93, 85, 255], List[124, 86, 72, 255], List[131, 94, 76, 255], \
List[136, 94, 70, 255], List[135, 95, 77, 255], List[59, 60, 49, 255], \
List[30, 41, 37, 255], List[41, 47, 38, 255], List[42, 43, 29, 255], List[43, \
43, 29, 255], List[48, 53, 41, 255], List[120, 106, 97, 255], List[141, 121, \
110, 255], List[144, 123, 113, 255], List[131, 104, 96, 255], List[120, 110, \
98, 255], List[123, 113, 103, 255], List[113, 99, 88, 255], List[96, 79, 72, \
255], List[83, 78, 61, 255], List[70, 107, 47, 255], List[83, 97, 76, 255], \
List[107, 118, 115, 255], List[107, 118, 121, 255], List[93, 102, 103, 255], \
List[120, 107, 102, 255], List[119, 105, 96, 255], List[115, 104, 98, 255], \
List[118, 111, 104, 255], List[123, 119, 110, 255], List[111, 107, 101, 255], \
List[111, 106, 98, 255], List[115, 111, 103, 255], List[121, 127, 127, 255], \
List[123, 143, 148, 255], List[126, 150, 156, 255], List[130, 151, 154, 255], \
List[131, 149, 151, 255], List[139, 156, 160, 255], List[96, 104, 98, 255], \
List[73, 58, 43, 255], List[81, 56, 51, 255], List[84, 56, 48, 255], List[77, \
50, 43, 255], List[87, 76, 75, 255], List[124, 117, 102, 255], List[118, 110, \
95, 255], List[120, 110, 95, 255], List[123, 113, 98, 255], List[126, 117, \
101, 255], List[125, 115, 98, 255], List[119, 109, 92, 255], List[120, 110, \
95, 255], List[131, 121, 103, 255], List[119, 111, 84, 255], List[119, 111, \
83, 255], List[133, 123, 93, 255], List[122, 112, 77, 255], List[126, 114, \
82, 255], List[137, 125, 96, 255], List[128, 119, 86, 255], List[125, 119, \
87, 255], List[131, 121, 96, 255], List[128, 117, 100, 255], List[131, 124, \
110, 255], List[128, 119, 106, 255], List[126, 117, 103, 255], List[128, 121, \
107, 255], List[131, 125, 113, 255], List[128, 121, 108, 255]], List[List[75, \
61, 62, 255], List[77, 59, 60, 255], List[110, 79, 68, 255], List[131, 92, \
71, 255], List[131, 98, 82, 255], List[128, 91, 74, 255], List[124, 88, 76, \
255], List[136, 94, 75, 255], List[135, 94, 74, 255], List[106, 82, 69, 255], \
List[36, 43, 33, 255], List[32, 43, 35, 255], List[40, 50, 38, 255], List[43, \
53, 39, 255], List[44, 46, 32, 255], List[67, 63, 52, 255], List[154, 129, \
123, 255], List[145, 124, 112, 255], List[136, 122, 110, 255], List[161, 152, \
142, 255], List[185, 180, 169, 255], List[195, 190, 179, 255], List[191, 186, \
175, 255], List[167, 161, 150, 255], List[98, 87, 82, 255], List[78, 65, 63, \
255], List[117, 118, 118, 255], List[112, 120, 122, 255], List[93, 99, 99, \
255], List[103, 97, 94, 255], List[115, 100, 95, 255], List[119, 106, 101, \
255], List[123, 108, 102, 255], List[117, 102, 94, 255], List[114, 107, 101, \
255], List[119, 115, 108, 255], List[114, 110, 104, 255], List[111, 107, 100, \
255], List[112, 106, 99, 255], List[116, 113, 107, 255], List[122, 131, 132, \
255], List[124, 145, 152, 255], List[128, 152, 159, 255], List[122, 141, 142, \
255], List[71, 66, 52, 255], List[70, 55, 45, 255], List[77, 55, 47, 255], \
List[81, 52, 42, 255], List[58, 45, 55, 255], List[101, 96, 92, 255], \
List[124, 116, 101, 255], List[118, 111, 96, 255], List[115, 107, 92, 255], \
List[118, 109, 94, 255], List[121, 112, 98, 255], List[125, 117, 103, 255], \
List[124, 114, 98, 255], List[122, 111, 96, 255], List[124, 115, 100, 255], \
List[127, 116, 99, 255], List[130, 119, 101, 255], List[126, 115, 96, 255], \
List[125, 113, 92, 255], List[132, 121, 86, 255], List[130, 117, 77, 255], \
List[118, 109, 71, 255], List[116, 111, 67, 255], List[120, 113, 78, 255], \
List[130, 116, 99, 255], List[128, 117, 102, 255], List[127, 118, 104, 255], \
List[126, 118, 105, 255], List[122, 115, 103, 255], List[124, 116, 103, 255], \
List[129, 120, 106, 255]], List[List[77, 61, 61, 255], List[87, 64, 60, 255], \
List[118, 88, 79, 255], List[124, 88, 73, 255], List[120, 93, 85, 255], \
List[116, 82, 73, 255], List[127, 90, 80, 255], List[135, 90, 70, 255], \
List[126, 88, 76, 255], List[104, 93, 91, 255], List[76, 77, 66, 255], \
List[62, 68, 53, 255], List[53, 59, 44, 255], List[61, 60, 45, 255], List[49, \
47, 39, 255], List[87, 81, 79, 255], List[144, 126, 119, 255], List[140, 117, \
110, 255], List[163, 155, 146, 255], List[178, 176, 166, 255], List[184, 178, \
167, 255], List[188, 183, 172, 255], List[191, 186, 175, 255], List[194, 190, \
179, 255], List[185, 180, 169, 255], List[115, 112, 110, 255], List[90, 96, \
98, 255], List[113, 116, 112, 255], List[118, 117, 113, 255], List[130, 108, \
102, 255], List[127, 107, 100, 255], List[112, 96, 91, 255], List[120, 107, \
103, 255], List[113, 102, 98, 255], List[105, 92, 89, 255], List[118, 111, \
102, 255], List[115, 111, 106, 255], List[113, 109, 103, 255], List[111, 108, \
101, 255], List[110, 105, 99, 255], List[112, 106, 99, 255], List[116, 114, \
110, 255], List[126, 139, 144, 255], List[87, 95, 88, 255], List[59, 48, 33, \
255], List[71, 55, 49, 255], List[72, 51, 44, 255], List[61, 41, 52, 255], \
List[63, 54, 72, 255], List[118, 110, 95, 255], List[118, 111, 98, 255], \
List[119, 112, 97, 255], List[120, 112, 98, 255], List[118, 110, 95, 255], \
List[116, 107, 92, 255], List[118, 109, 95, 255], List[121, 110, 95, 255], \
List[127, 118, 102, 255], List[122, 113, 98, 255], List[118, 108, 93, 255], \
List[126, 117, 103, 255], List[124, 114, 100, 255], List[124, 112, 94, 255], \
List[134, 122, 100, 255], List[118, 112, 73, 255], List[119, 110, 69, 255], \
List[124, 114, 67, 255], List[134, 121, 93, 255], List[131, 118, 103, 255], \
List[125, 114, 99, 255], List[124, 112, 97, 255], List[128, 119, 105, 255], \
List[128, 120, 107, 255], List[126, 118, 105, 255], List[126, 117, 104, \
255]], List[List[87, 65, 59, 255], List[95, 67, 59, 255], List[118, 85, 77, \
255], List[124, 90, 77, 255], List[129, 95, 78, 255], List[128, 88, 70, 255], \
List[127, 90, 79, 255], List[123, 84, 74, 255], List[123, 94, 88, 255], \
List[139, 133, 127, 255], List[138, 132, 123, 255], List[144, 137, 129, 255], \
List[132, 118, 109, 255], List[136, 120, 111, 255], List[129, 114, 108, 255], \
List[128, 112, 110, 255], List[145, 133, 125, 255], List[141, 135, 125, 255], \
List[155, 153, 144, 255], List[166, 161, 151, 255], List[174, 170, 160, 255], \
List[182, 177, 166, 255], List[185, 181, 170, 255], List[185, 180, 170, 255], \
List[189, 185, 172, 255], List[163, 161, 152, 255], List[111, 114, 113, 255], \
List[118, 122, 118, 255], List[112, 103, 97, 255], List[126, 106, 97, 255], \
List[135, 114, 110, 255], List[133, 110, 103, 255], List[112, 96, 89, 255], \
List[108, 98, 96, 255], List[123, 105, 99, 255], List[118, 103, 98, 255], \
List[117, 113, 107, 255], List[117, 114, 107, 255], List[110, 105, 99, 255], \
List[113, 109, 104, 255], List[112, 109, 103, 255], List[108, 104, 96, 255], \
List[116, 109, 103, 255], List[111, 100, 92, 255], List[85, 69, 64, 255], \
List[69, 49, 41, 255], List[69, 47, 50, 255], List[49, 33, 68, 255], List[89, \
77, 84, 255], List[123, 116, 98, 255], List[116, 107, 93, 255], List[118, \
109, 95, 255], List[120, 113, 98, 255], List[116, 109, 95, 255], List[120, \
111, 96, 255], List[120, 111, 96, 255], List[115, 106, 90, 255], List[119, \
110, 95, 255], List[122, 113, 98, 255], List[121, 115, 101, 255], List[126, \
119, 106, 255], List[123, 115, 100, 255], List[124, 114, 98, 255], List[136, \
124, 106, 255], List[125, 117, 87, 255], List[115, 111, 71, 255], List[125, \
115, 83, 255], List[137, 123, 102, 255], List[125, 112, 92, 255], List[124, \
112, 95, 255], List[127, 116, 103, 255], List[128, 119, 105, 255], List[127, \
116, 102, 255], List[126, 114, 99, 255], List[131, 122, 108, 255]], \
List[List[138, 120, 113, 255], List[125, 99, 89, 255], List[117, 86, 74, \
255], List[122, 94, 84, 255], List[130, 89, 69, 255], List[126, 87, 74, 255], \
List[121, 86, 80, 255], List[106, 80, 90, 255], List[122, 103, 101, 255], \
List[136, 131, 121, 255], List[138, 133, 125, 255], List[140, 136, 128, 255], \
List[148, 139, 130, 255], List[148, 131, 125, 255], List[146, 126, 120, 255], \
List[162, 135, 126, 255], List[159, 137, 129, 255], List[133, 130, 121, 255], \
List[146, 142, 134, 255], List[156, 152, 143, 255], List[165, 161, 151, 255], \
List[172, 167, 157, 255], List[176, 171, 161, 255], List[180, 176, 165, 255], \
List[187, 183, 171, 255], List[186, 181, 169, 255], List[115, 119, 116, 255], \
List[105, 103, 102, 255], List[118, 98, 98, 255], List[115, 96, 91, 255], \
List[120, 101, 92, 255], List[119, 101, 99, 255], List[124, 106, 96, 255], \
List[112, 100, 95, 255], List[120, 105, 100, 255], List[116, 100, 96, 255], \
List[110, 95, 94, 255], List[112, 106, 100, 255], List[121, 117, 110, 255], \
List[113, 111, 104, 255], List[115, 111, 104, 255], List[117, 114, 108, 255], \
List[111, 107, 100, 255], List[120, 116, 110, 255], List[103, 90, 84, 255], \
List[63, 41, 42, 255], List[60, 39, 68, 255], List[62, 39, 73, 255], \
List[110, 101, 93, 255], List[118, 110, 94, 255], List[117, 108, 92, 255], \
List[117, 109, 94, 255], List[116, 107, 93, 255], List[119, 111, 96, 255], \
List[119, 111, 97, 255], List[119, 111, 97, 255], List[120, 113, 98, 255], \
List[121, 114, 100, 255], List[119, 110, 96, 255], List[117, 108, 93, 255], \
List[119, 110, 97, 255], List[123, 116, 103, 255], List[120, 112, 98, 255], \
List[125, 116, 100, 255], List[134, 122, 105, 255], List[124, 113, 90, 255], \
List[127, 113, 96, 255], List[126, 114, 99, 255], List[123, 112, 96, 255], \
List[124, 112, 97, 255], List[123, 113, 101, 255], List[126, 115, 102, 255], \
List[125, 113, 98, 255], List[125, 114, 100, 255], List[129, 117, 101, 255]], \
List[List[181, 172, 158, 255], List[128, 118, 111, 255], List[124, 111, 112, \
255], List[131, 113, 107, 255], List[134, 110, 98, 255], List[119, 93, 87, \
255], List[116, 85, 80, 255], List[111, 82, 83, 255], List[126, 113, 110, \
255], List[131, 128, 118, 255], List[143, 137, 129, 255], List[143, 139, 130, \
255], List[152, 147, 138, 255], List[141, 126, 120, 255], List[148, 131, 124, \
255], List[161, 140, 131, 255], List[145, 126, 119, 255], List[115, 112, 106, \
255], List[134, 130, 123, 255], List[143, 139, 131, 255], List[153, 149, 140, \
255], List[159, 155, 146, 255], List[164, 160, 150, 255], List[172, 168, 158, \
255], List[182, 177, 167, 255], List[193, 187, 176, 255], List[180, 177, 166, \
255], List[143, 128, 125, 255], List[124, 97, 97, 255], List[112, 90, 89, \
255], List[126, 106, 98, 255], List[129, 109, 101, 255], List[128, 111, 106, \
255], List[119, 103, 100, 255], List[125, 106, 101, 255], List[120, 104, 98, \
255], List[114, 105, 99, 255], List[105, 96, 91, 255], List[109, 97, 93, \
255], List[118, 111, 106, 255], List[117, 110, 103, 255], List[115, 108, 101, \
255], List[122, 117, 109, 255], List[119, 114, 106, 255], List[71, 52, 47, \
255], List[57, 39, 60, 255], List[55, 34, 72, 255], List[77, 56, 78, 255], \
List[117, 110, 95, 255], List[116, 108, 94, 255], List[116, 108, 93, 255], \
List[118, 110, 94, 255], List[116, 109, 93, 255], List[117, 108, 92, 255], \
List[118, 110, 95, 255], List[119, 111, 96, 255], List[119, 111, 98, 255], \
List[118, 110, 97, 255], List[119, 112, 98, 255], List[121, 113, 99, 255], \
List[119, 112, 98, 255], List[121, 114, 101, 255], List[119, 111, 97, 255], \
List[122, 114, 100, 255], List[124, 115, 101, 255], List[127, 118, 104, 255], \
List[125, 116, 103, 255], List[125, 114, 99, 255], List[121, 110, 95, 255], \
List[126, 116, 103, 255], List[124, 115, 103, 255], List[124, 113, 97, 255], \
List[124, 111, 91, 255], List[128, 115, 98, 255], List[136, 122, 104, 255]], \
List[List[136, 127, 121, 255], List[130, 114, 113, 255], List[145, 129, 121, \
255], List[150, 144, 135, 255], List[143, 131, 124, 255], List[138, 131, 122, \
255], List[136, 130, 123, 255], List[132, 125, 119, 255], List[138, 133, 126, \
255], List[135, 129, 120, 255], List[154, 145, 135, 255], List[144, 134, 124, \
255], List[145, 129, 122, 255], List[146, 127, 122, 255], List[156, 144, 135, \
255], List[162, 146, 134, 255], List[140, 119, 109, 255], List[99, 97, 91, \
255], List[117, 115, 108, 255], List[128, 124, 117, 255], List[136, 133, 125, \
255], List[143, 139, 130, 255], List[146, 142, 134, 255], List[164, 160, 151, \
255], List[175, 170, 160, 255], List[177, 173, 163, 255], List[179, 174, 163, \
255], List[185, 179, 168, 255], List[168, 153, 145, 255], List[133, 112, 103, \
255], List[109, 91, 83, 255], List[118, 97, 86, 255], List[130, 104, 97, \
255], List[118, 86, 79, 255], List[121, 105, 97, 255], List[126, 109, 98, \
255], List[124, 118, 111, 255], List[125, 120, 113, 255], List[109, 96, 92, \
255], List[114, 98, 96, 255], List[123, 103, 97, 255], List[107, 93, 90, \
255], List[113, 102, 97, 255], List[93, 78, 69, 255], List[53, 38, 45, 255], \
List[54, 44, 68, 255], List[52, 35, 67, 255], List[93, 82, 86, 255], \
List[117, 110, 93, 255], List[113, 105, 92, 255], List[118, 110, 97, 255], \
List[117, 109, 94, 255], List[118, 110, 95, 255], List[116, 108, 92, 255], \
List[118, 109, 93, 255], List[117, 110, 95, 255], List[116, 109, 95, 255], \
List[119, 111, 97, 255], List[119, 111, 97, 255], List[120, 114, 100, 255], \
List[116, 109, 96, 255], List[117, 109, 96, 255], List[120, 112, 98, 255], \
List[118, 109, 96, 255], List[119, 110, 96, 255], List[123, 115, 102, 255], \
List[123, 116, 103, 255], List[123, 115, 102, 255], List[125, 116, 102, 255], \
List[125, 116, 103, 255], List[125, 114, 100, 255], List[123, 112, 96, 255], \
List[125, 113, 96, 255], List[140, 124, 103, 255], List[128, 118, 84, 255]], \
List[List[147, 127, 126, 255], List[143, 128, 127, 255], List[150, 134, 126, \
255], List[157, 146, 137, 255], List[142, 138, 130, 255], List[142, 138, 131, \
255], List[140, 137, 128, 255], List[150, 146, 138, 255], List[127, 122, 112, \
255], List[144, 139, 131, 255], List[151, 146, 135, 255], List[145, 128, 118, \
255], List[156, 138, 128, 255], List[150, 133, 127, 255], List[150, 131, 124, \
255], List[161, 139, 130, 255], List[146, 123, 111, 255], List[83, 82, 77, \
255], List[97, 94, 89, 255], List[108, 105, 100, 255], List[114, 111, 105, \
255], List[118, 114, 108, 255], List[119, 116, 109, 255], List[126, 124, 116, \
255], List[150, 146, 137, 255], List[157, 153, 143, 255], List[166, 161, 151, \
255], List[173, 169, 159, 255], List[191, 188, 177, 255], List[204, 196, 183, \
255], List[139, 124, 119, 255], List[114, 97, 90, 255], List[122, 99, 90, \
255], List[98, 86, 80, 255], List[116, 105, 97, 255], List[108, 88, 79, 255], \
List[103, 90, 83, 255], List[119, 108, 99, 255], List[124, 107, 99, 255], \
List[125, 105, 100, 255], List[120, 105, 100, 255], List[107, 98, 97, 255], \
List[117, 104, 98, 255], List[67, 48, 45, 255], List[58, 38, 38, 255], \
List[45, 38, 52, 255], List[54, 42, 68, 255], List[107, 98, 89, 255], \
List[114, 105, 89, 255], List[116, 107, 91, 255], List[114, 106, 91, 255], \
List[113, 105, 91, 255], List[119, 111, 98, 255], List[117, 108, 94, 255], \
List[116, 107, 93, 255], List[117, 110, 96, 255], List[117, 110, 96, 255], \
List[117, 108, 93, 255], List[118, 108, 93, 255], List[119, 110, 95, 255], \
List[120, 111, 96, 255], List[121, 114, 101, 255], List[117, 110, 97, 255], \
List[118, 110, 97, 255], List[119, 110, 98, 255], List[120, 111, 98, 255], \
List[120, 111, 97, 255], List[120, 112, 99, 255], List[118, 110, 99, 255], \
List[122, 115, 102, 255], List[123, 113, 99, 255], List[124, 112, 98, 255], \
List[128, 115, 101, 255], List[128, 115, 93, 255], List[121, 113, 69, 255]], \
List[List[184, 152, 141, 255], List[148, 127, 119, 255], List[149, 135, 128, \
255], List[151, 130, 122, 255], List[150, 142, 132, 255], List[151, 146, 139, \
255], List[141, 136, 128, 255], List[149, 146, 138, 255], List[129, 124, 115, \
255], List[149, 144, 135, 255], List[147, 144, 135, 255], List[152, 140, 130, \
255], List[157, 138, 130, 255], List[144, 127, 119, 255], List[164, 137, 126, \
255], List[163, 140, 134, 255], List[171, 140, 131, 255], List[120, 101, 92, \
255], List[66, 66, 63, 255], List[85, 83, 78, 255], List[92, 89, 85, 255], \
List[90, 88, 83, 255], List[84, 82, 78, 255], List[85, 83, 79, 255], List[67, \
66, 63, 255], List[66, 64, 62, 255], List[129, 126, 118, 255], List[165, 161, \
151, 255], List[183, 178, 167, 255], List[187, 184, 173, 255], List[158, 147, \
140, 255], List[120, 102, 94, 255], List[117, 93, 84, 255], List[107, 97, 88, \
255], List[116, 109, 98, 255], List[135, 129, 119, 255], List[116, 104, 96, \
255], List[116, 94, 85, 255], List[128, 111, 103, 255], List[115, 101, 99, \
255], List[108, 95, 92, 255], List[115, 100, 94, 255], List[86, 74, 71, 255], \
List[53, 36, 36, 255], List[63, 40, 39, 255], List[48, 31, 33, 255], List[61, \
55, 60, 255], List[116, 108, 94, 255], List[112, 104, 91, 255], List[113, \
106, 91, 255], List[114, 106, 91, 255], List[115, 106, 91, 255], List[114, \
106, 93, 255], List[113, 105, 92, 255], List[116, 109, 96, 255], List[117, \
109, 96, 255], List[116, 109, 95, 255], List[117, 109, 93, 255], List[120, \
111, 95, 255], List[117, 107, 91, 255], List[117, 107, 91, 255], List[121, \
112, 98, 255], List[120, 113, 101, 255], List[118, 111, 98, 255], List[124, \
117, 103, 255], List[119, 110, 96, 255], List[120, 111, 97, 255], List[123, \
118, 106, 255], List[120, 114, 102, 255], List[120, 112, 99, 255], List[123, \
115, 103, 255], List[125, 118, 105, 255], List[126, 115, 100, 255], List[124, \
113, 88, 255], List[121, 116, 79, 255]], List[List[167, 141, 128, 255], \
List[143, 122, 116, 255], List[150, 133, 126, 255], List[160, 140, 131, 255], \
List[151, 137, 128, 255], List[149, 145, 135, 255], List[151, 146, 138, 255], \
List[141, 135, 126, 255], List[137, 132, 124, 255], List[152, 149, 140, 255], \
List[144, 139, 131, 255], List[152, 147, 139, 255], List[150, 132, 124, 255], \
List[150, 134, 126, 255], List[165, 138, 131, 255], List[172, 145, 136, 255], \
List[161, 136, 125, 255], List[169, 139, 126, 255], List[108, 94, 88, 255], \
List[58, 58, 57, 255], List[65, 64, 61, 255], List[66, 64, 61, 255], List[53, \
52, 50, 255], List[55, 53, 52, 255], List[62, 61, 59, 255], List[47, 46, 45, \
255], List[34, 34, 34, 255], List[117, 113, 107, 255], List[161, 156, 146, \
255], List[162, 158, 149, 255], List[123, 117, 106, 255], List[119, 104, 90, \
255], List[116, 100, 89, 255], List[104, 91, 83, 255], List[107, 92, 83, \
255], List[121, 113, 103, 255], List[130, 122, 111, 255], List[109, 102, 94, \
255], List[112, 91, 82, 255], List[123, 95, 91, 255], List[132, 117, 111, \
255], List[129, 112, 102, 255], List[60, 45, 44, 255], List[54, 39, 39, 255], \
List[55, 39, 40, 255], List[52, 34, 35, 255], List[90, 80, 70, 255], \
List[114, 107, 92, 255], List[114, 106, 92, 255], List[111, 104, 90, 255], \
List[112, 104, 91, 255], List[115, 108, 93, 255], List[111, 103, 88, 255], \
List[115, 107, 93, 255], List[114, 107, 93, 255], List[115, 106, 93, 255], \
List[115, 107, 93, 255], List[117, 109, 95, 255], List[117, 108, 94, 255], \
List[120, 111, 95, 255], List[117, 107, 92, 255], List[116, 106, 91, 255], \
List[120, 113, 98, 255], List[120, 112, 99, 255], List[117, 109, 94, 255], \
List[120, 112, 98, 255], List[118, 109, 96, 255], List[119, 112, 100, 255], \
List[122, 115, 103, 255], List[121, 110, 96, 255], List[120, 111, 98, 255], \
List[124, 118, 104, 255], List[127, 119, 104, 255], List[128, 117, 99, 255], \
List[137, 125, 103, 255]]], \\\"UnsignedInteger8\\\"], List[List[0, 43.`], \
List[75.`, 0]], List[0, 255], Rule[ColorFunction, RGBColor], \
Rule[ImageResolution, List[72, 72]]], BoxForm`ImageTag[\\\"Byte\\\", \
Rule[ColorSpace, \\\"RGB\\\"], Rule[Interleaving, True], \
Rule[MetaInformation, Association[Rule[\\\"Exif\\\", \
Association[Rule[\\\"ImageWidth\\\", 1200], Rule[\\\"ImageLength\\\", 680], \
Rule[\\\"XResolution\\\", 72], Rule[\\\"YResolution\\\", 72], \
Rule[\\\"ResolutionUnit\\\", \\\"Inch\\\"], Rule[\\\"Software\\\", \
\\\"Created with the Wolfram Language : www.wolfram.com\\\"], \
Rule[\\\"DateTime\\\", DateObject[List[2022, 12, 6, 13, 37, 42.`], \
\\\"Instant\\\", \\\"Gregorian\\\", -5.`]], Rule[\\\"TimeZoneOffset\\\", \
-5]]], Rule[\\\"Comments\\\", Association[Rule[\\\"Software\\\", \\\"Created \
with the Wolfram Language : www.wolfram.com\\\"], Rule[\\\"Creation Time\\\", \
DateObject[List[2022, 12, 6, 13, 37, 42.`], \\\"Instant\\\"]]]]]]], \
Rule[Selectable, False]], Rule[DefaultBaseStyle, \\\"ImageGraphics\\\"], \
Rule[ImageSizeRaw, List[75.`, 43.`]], Rule[PlotRange, List[List[0, 75.`], \
List[0, 43.`]]]]}], \\\",\\\", RowBox[{\\\"\\\\\\\"dispLeft\\\\\\\"\\\", \\\"\
\[Rule]\\\", GraphicsBox[TagBox[RasterBox[NumericArray[List[List[1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9993124604225159`, 0.9931620955467224`, \
1.0305184125900269`, 0.6492962837219238`, 0.10748046636581421`, \
0.16499823331832886`, 0.16372832655906677`, 0.1580062061548233`, \
0.15909193456172943`, 0.15984368324279785`, 0.15986688435077667`, \
0.16017864644527435`, 0.16074153780937195`, 0.1607998162508011`, \
0.16131281852722168`, 0.16185234487056732`, 0.16239555180072784`, \
0.16286441683769226`, 0.16342248022556305`, 0.16405312716960907`, \
0.16477127373218536`, 0.16531628370285034`, 0.16578777134418488`, \
0.1663532704114914`, 0.16697071492671967`, 0.1677829474210739`, \
0.16853420436382294`, 0.16937384009361267`, 0.169846311211586`, \
0.17058596014976501`, 0.17136922478675842`, 0.17218799889087677`, \
0.17290514707565308`, 0.17400744557380676`, 0.174752339720726`, \
0.17611168324947357`, 0.17685949802398682`, 0.1778123676776886`, \
0.17890344560146332`, 0.17969180643558502`, 0.1806165874004364`, \
0.18168264627456665`, 0.1826898455619812`, 0.1838015615940094`, \
0.1851237714290619`, 0.18589116632938385`, 0.18731673061847687`, \
0.1881788969039917`, 0.18936364352703094`, 0.19019480049610138`, \
0.19183103740215302`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.0000900030136108`, 0.9994888305664062`, 0.9946016669273376`, \
1.0449748039245605`, 0.6177691221237183`, 0.09590916335582733`, \
0.16058996319770813`, 0.16364942491054535`, 0.1574755311012268`, \
0.15837010741233826`, 0.1588609218597412`, 0.15940013527870178`, \
0.1592002511024475`, 0.15974324941635132`, 0.1603035032749176`, \
0.1603810340166092`, 0.16120725870132446`, 0.16147218644618988`, \
0.16224180161952972`, 0.16286952793598175`, 0.16338862478733063`, \
0.1641543060541153`, 0.16442708671092987`, 0.16518282890319824`, \
0.16575030982494354`, 0.16656610369682312`, 0.16737596690654755`, \
0.16803699731826782`, 0.16863177716732025`, 0.16947317123413086`, \
0.17026618123054504`, 0.1709367036819458`, 0.17173856496810913`, \
0.17261099815368652`, 0.17363648116588593`, 0.17451639473438263`, \
0.1753910928964615`, 0.17666113376617432`, 0.1773364394903183`, \
0.17817237973213196`, 0.17951545119285583`, 0.18018609285354614`, \
0.18170711398124695`, 0.182583749294281`, 0.1837313324213028`, \
0.18471795320510864`, 0.18603456020355225`, 0.1868625283241272`, \
0.18809343874454498`, 0.189367413520813`, 0.1902063637971878`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999793767929077`, \
1.000110387802124`, 0.9981071352958679`, 0.9955921769142151`, \
1.038651466369629`, 0.6579587459564209`, 0.11143570393323898`, \
0.15635743737220764`, 0.16123725473880768`, 0.15676507353782654`, \
0.15777328610420227`, 0.15786272287368774`, 0.15833421051502228`, \
0.15870672464370728`, 0.15879307687282562`, 0.15950323641300201`, \
0.15986458957195282`, 0.16053107380867004`, 0.16092067956924438`, \
0.1615883708000183`, 0.16229867935180664`, 0.16265350580215454`, \
0.16331298649311066`, 0.16384728252887726`, 0.16463780403137207`, \
0.1654059737920761`, 0.1662294864654541`, 0.1667383462190628`, \
0.16751989722251892`, 0.16828128695487976`, 0.16912223398685455`, \
0.16963142156600952`, 0.17047534883022308`, 0.1714329570531845`, \
0.17232118546962738`, 0.17330007255077362`, 0.17427346110343933`, \
0.17510981857776642`, 0.1761346012353897`, 0.17710919678211212`, \
0.17790094017982483`, 0.17937986552715302`, 0.18021225929260254`, \
0.18144947290420532`, 0.18230268359184265`, 0.18382923305034637`, \
0.18441736698150635`, 0.1859367936849594`, 0.1867445707321167`, \
0.18813426792621613`, 0.18940424919128418`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 0.9999548196792603`, 1.0004734992980957`, \
0.9982154369354248`, 0.9861969351768494`, 1.0823965072631836`, \
0.6899562478065491`, 0.10367237031459808`, 0.15507476031780243`, \
0.15892907977104187`, 0.15629059076309204`, 0.15712641179561615`, \
0.15726736187934875`, 0.15736928582191467`, 0.15794238448143005`, \
0.15835832059383392`, 0.1589961051940918`, 0.15939119458198547`, \
0.16031087934970856`, 0.15922768414020538`, 0.16888368129730225`, \
0.17585070431232452`, 0.16494929790496826`, 0.16192634403705597`, \
0.16364572942256927`, 0.16428880393505096`, 0.16494572162628174`, \
0.16554516553878784`, 0.16636165976524353`, 0.16714255511760712`, \
0.16791369020938873`, 0.16873392462730408`, 0.1695076823234558`, \
0.17024311423301697`, 0.17128069698810577`, 0.17202773690223694`, \
0.17298772931098938`, 0.1739666759967804`, 0.17472758889198303`, \
0.17576485872268677`, 0.17685015499591827`, 0.1780608743429184`, \
0.17894183099269867`, 0.18014630675315857`, 0.1813710480928421`, \
0.18222051858901978`, 0.18348701298236847`, 0.18451637029647827`, \
0.1856839507818222`, 0.1866178810596466`, 0.18818217515945435`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999490976333618`, \
1.0001111030578613`, 0.9997068047523499`, 0.9789789915084839`, \
1.0784661769866943`, 0.6743394136428833`, 0.11993259936571121`, \
0.16211138665676117`, 0.15566323697566986`, 0.1556011587381363`, \
0.15613806247711182`, 0.15667426586151123`, 0.15675418078899384`, \
0.15744958817958832`, 0.15783676505088806`, 0.15860188007354736`, \
0.15721142292022705`, 0.16498054563999176`, 0.12641219794750214`, \
0.09447477012872696`, 0.16044507920742035`, 0.17500656843185425`, \
0.1628696471452713`, 0.16314496099948883`, 0.16370704770088196`, \
0.16440995037555695`, 0.16519983112812042`, 0.16597957909107208`, \
0.16676408052444458`, 0.1675359159708023`, 0.1683117151260376`, \
0.1691771000623703`, 0.17016465961933136`, 0.17093388736248016`, \
0.17199058830738068`, 0.1726982295513153`, 0.17346757650375366`, \
0.1743675321340561`, 0.1758456528186798`, 0.17647860944271088`, \
0.17800946533679962`, 0.1788574755191803`, 0.18006765842437744`, \
0.18093854188919067`, 0.18240001797676086`, 0.18313361704349518`, \
0.18440426886081696`, 0.186035618185997`, 0.186786487698555`], List[1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.0000255107879639`, \
0.9991152286529541`, 0.9931040406227112`, 1.0415576696395874`, \
0.4349835515022278`, 0.11293617635965347`, 0.16315290331840515`, \
0.1542692929506302`, 0.15465757250785828`, 0.15510845184326172`, \
0.15516820549964905`, 0.15590216219425201`, 0.1562868356704712`, \
0.1569664180278778`, 0.15663565695285797`, 0.1643349975347519`, \
0.14103224873542786`, 0.30629169940948486`, 0.45427772402763367`, \
0.16259698569774628`, 0.09862841665744781`, 0.16104203462600708`, \
0.1752607375383377`, 0.1621159315109253`, 0.163211852312088`, \
0.1640726625919342`, 0.1648222953081131`, 0.16560494899749756`, \
0.16640277206897736`, 0.16712258756160736`, 0.16819939017295837`, \
0.16893702745437622`, 0.16994412243366241`, 0.17078797519207`, \
0.17156684398651123`, 0.17234276235103607`, 0.1735096126794815`, \
0.1743808537721634`, 0.17555847764015198`, 0.17652201652526855`, \
0.17770491540431976`, 0.17863203585147858`, 0.18012435734272003`, \
0.18074578046798706`, 0.1822192370891571`, 0.18298819661140442`, \
0.18445001542568207`, 0.18605265021324158`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9997739791870117`, 0.9903901219367981`, \
1.0387462377548218`, 0.7273762822151184`, 0.1208169236779213`, \
0.15347321331501007`, 0.15522953867912292`, 0.15351243317127228`, \
0.1535225361585617`, 0.15362709760665894`, 0.1543591320514679`, \
0.15474377572536469`, 0.15537326037883759`, 0.15591104328632355`, \
0.1570216864347458`, 0.17034170031547546`, 0.06038529798388481`, \
0.7544644474983215`, 1.138114094734192`, 0.8432578444480896`, \
0.4669930040836334`, 0.14699973165988922`, 0.1118839681148529`, \
0.17170187830924988`, 0.1678757667541504`, 0.16267141699790955`, \
0.1636965572834015`, 0.1644624024629593`, 0.16519835591316223`, \
0.16609399020671844`, 0.16706879436969757`, 0.16783356666564941`, \
0.16886797547340393`, 0.16963689029216766`, 0.17035335302352905`, \
0.17140159010887146`, 0.17235931754112244`, 0.173521026968956`, \
0.17445158958435059`, 0.1755758821964264`, 0.1765693724155426`, \
0.1772345006465912`, 0.17860844731330872`, 0.1797092705965042`, \
0.1807541400194168`, 0.18227258324623108`, 0.1829984188079834`, \
0.18446974456310272`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 0.9981237649917603`, 1.0086225271224976`, 0.9769712090492249`, \
0.20065200328826904`, 0.13334019482135773`, 0.15644799172878265`, \
0.15165169537067413`, 0.15201127529144287`, 0.15231680870056152`, \
0.15276387333869934`, 0.1532132476568222`, 0.15382225811481476`, \
0.15432104468345642`, 0.15371303260326385`, 0.1678805649280548`, \
0.10929940640926361`, 0.5630592703819275`, 1.0315097570419312`, \
0.9696754217147827`, 1.0406595468521118`, 1.0506411790847778`, \
0.8731710910797119`, 0.38629674911499023`, 0.1270192712545395`, \
0.13463687896728516`, 0.18045037984848022`, 0.16484880447387695`, \
0.16276638209819794`, 0.16413064301013947`, 0.16509942710399628`, \
0.16584008932113647`, 0.16682793200016022`, 0.16771705448627472`, \
0.16843281686306`, 0.16930292546749115`, 0.1702995002269745`, \
0.17143981158733368`, 0.172367125749588`, 0.17350979149341583`, \
0.1744970828294754`, 0.1753743439912796`, 0.17628201842308044`, \
0.1771962195634842`, 0.17867062985897064`, 0.1796979457139969`, \
0.18076443672180176`, 0.18228700757026672`, 0.18303878605365753`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9886308312416077`, \
1.0505086183547974`, 0.6428080797195435`, 0.04826194420456886`, \
0.14337775111198425`, 0.16630195081233978`, 0.15167118608951569`, \
0.15077175199985504`, 0.1515757441520691`, 0.1516764909029007`, \
0.1522292196750641`, 0.1526969075202942`, 0.1530790627002716`, \
0.15867123007774353`, 0.14058777689933777`, 0.1793496310710907`, \
0.9663703441619873`, 1.0213557481765747`, 0.9962095618247986`, \
0.9893621206283569`, 0.9895216822624207`, 1.022857666015625`, \
1.0608609914779663`, 0.6314457654953003`, 0.21499423682689667`, \
0.09206070750951767`, 0.15353545546531677`, 0.1733550876379013`, \
0.16976241767406464`, 0.16307039558887482`, 0.16432076692581177`, \
0.16835691034793854`, 0.17753197252750397`, 0.17831438779830933`, \
0.1707727015018463`, 0.16876530647277832`, 0.17042836546897888`, \
0.1714543253183365`, 0.17237472534179688`, 0.17355301976203918`, \
0.17435100674629211`, 0.17517191171646118`, 0.17634117603302002`, \
0.1772802770137787`, 0.17873786389827728`, 0.17969737946987152`, \
0.18076170980930328`, 0.18227286636829376`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9986398220062256`, 1.006550669670105`, \
0.9648966193199158`, 0.6354813575744629`, 0.23515376448631287`, \
0.07376523315906525`, 0.16473133862018585`, 0.15951597690582275`, \
0.1490599811077118`, 0.15122286975383759`, 0.15132740139961243`, \
0.1519409567117691`, 0.152668297290802`, 0.16367636620998383`, \
0.1175314411520958`, 0.7409677505493164`, 1.0423539876937866`, \
0.9874523282051086`, 1.0001543760299683`, 0.9998894929885864`, \
1.0007258653640747`, 0.9925413131713867`, 0.9936060309410095`, \
1.0521104335784912`, 0.9656619429588318`, 0.5932242274284363`, \
0.20966795086860657`, 0.10438857972621918`, 0.13837623596191406`, \
0.18424509465694427`, 0.18255549669265747`, 0.1652573049068451`, \
0.11405737698078156`, 0.11607910692691803`, 0.1567509025335312`, \
0.17102926969528198`, 0.16876083612442017`, 0.17030814290046692`, \
0.17145590484142303`, 0.17242659628391266`, 0.17333698272705078`, \
0.17421197891235352`, 0.17514413595199585`, 0.1765652745962143`, \
0.17768853902816772`, 0.178666889667511`, 0.1798398196697235`, \
0.18105530738830566`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.0002635717391968`, 0.9987380504608154`, 0.9994352459907532`, \
1.1007678508758545`, 0.8635381460189819`, 0.3412654995918274`, \
0.11411228775978088`, 0.10994923114776611`, 0.17047348618507385`, \
0.15295015275478363`, 0.14968429505825043`, 0.14982621371746063`, \
0.1642870306968689`, 0.07842115312814713`, 0.37533432245254517`, \
1.0370389223098755`, 0.9915172457695007`, 1.0004165172576904`, \
0.9999635219573975`, 1.`, 0.9999295473098755`, 1.0003929138183594`, \
0.9981838464736938`, 0.9894930124282837`, 1.004926323890686`, \
1.067801833152771`, 0.9560065865516663`, 0.573466956615448`, \
0.2251538187265396`, 0.07986465841531754`, 0.08092349022626877`, \
0.15920811891555786`, 0.3829171657562256`, 0.37729647755622864`, \
0.21329593658447266`, 0.1626994013786316`, 0.16961152851581573`, \
0.16966308653354645`, 0.17031307518482208`, 0.17150242626667023`, \
0.17225705087184906`, 0.17316940426826477`, 0.1744423508644104`, \
0.17557255923748016`, 0.17659711837768555`, 0.17763864994049072`, \
0.17892515659332275`, 0.18014387786388397`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999545216560364`, 1.00022554397583`, \
1.0000340938568115`, 0.9799342155456543`, 1.0189440250396729`, \
1.0587472915649414`, 0.7643817663192749`, 0.3349255621433258`, \
0.05254526063799858`, 0.15233033895492554`, 0.1640653908252716`, \
0.15893535315990448`, 0.1264268010854721`, 0.3430062234401703`, \
0.9979991912841797`, 1.0090065002441406`, 0.9957314729690552`, \
0.9999674558639526`, 0.9999994039535522`, 1.`, 1.`, 0.9999985694885254`, \
0.9998893141746521`, 1.000558614730835`, 0.9978494644165039`, \
0.9825092554092407`, 1.0133486986160278`, 1.0742443799972534`, \
0.9202680587768555`, 0.6583523750305176`, 0.6715450882911682`, \
0.7755947709083557`, 1.0648220777511597`, 1.1084513664245605`, \
0.386200487613678`, 0.08672746270895004`, 0.18478232622146606`, \
0.16681407392024994`, 0.1694369614124298`, 0.1703260838985443`, \
0.1715201735496521`, 0.17244002223014832`, 0.1735786348581314`, \
0.1745484471321106`, 0.1757323145866394`, 0.17695936560630798`, \
0.17797230184078217`, 0.17932429909706116`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9998723268508911`, \
1.0006155967712402`, 0.9950361847877502`, 0.9825512766838074`, \
1.0693409442901611`, 0.9675158262252808`, 0.4801587462425232`, \
0.16668659448623657`, 0.08614762872457504`, 0.14196805655956268`, \
0.1483050435781479`, 0.9549750089645386`, 1.0299174785614014`, \
0.9905031323432922`, 1.0010913610458374`, 0.9999619126319885`, 1.`, 1.`, 1.`, \
1.`, 1.`, 0.9999984502792358`, 0.9999792575836182`, 0.9999983310699463`, \
0.9970349669456482`, 0.9842665195465088`, 1.0157043933868408`, \
1.0703133344650269`, 1.0675498247146606`, 1.0459036827087402`, \
0.9790322780609131`, 1.0024871826171875`, 0.9226663112640381`, \
0.2848893702030182`, 0.14850424230098724`, 0.17398084700107574`, \
0.16821575164794922`, 0.16941680014133453`, 0.1703384667634964`, \
0.17150376737117767`, 0.17238818109035492`, 0.1737777143716812`, \
0.17494550347328186`, 0.17592200636863708`, 0.1770351529121399`, \
0.17831823229789734`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 0.9999957084655762`, 0.9999633431434631`, \
1.0009053945541382`, 0.9842932224273682`, 1.0009945631027222`, \
1.0785307884216309`, 0.8863827586174011`, 0.508618175983429`, \
0.08710834383964539`, 0.5282343626022339`, 1.0455318689346313`, \
0.9850639700889587`, 1.0007648468017578`, 0.9998102188110352`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9997395873069763`, 1.0011330842971802`, \
0.9945148229598999`, 0.9840195178985596`, 0.9845371246337891`, \
0.9887439608573914`, 1.0015347003936768`, 0.9807897806167603`, \
1.0881109237670898`, 0.6612970232963562`, 0.06445805728435516`, \
0.18980661034584045`, 0.16770713031291962`, 0.16817037761211395`, \
0.16945628821849823`, 0.1703486442565918`, 0.1715325117111206`, \
0.17280825972557068`, 0.1738685965538025`, 0.17488285899162292`, \
0.1761324256658554`, 0.17742379009723663`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999982714653015`, \
0.9999266266822815`, 1.000342845916748`, 0.9987290501594543`, \
0.9789684414863586`, 1.0346095561981201`, 1.0684187412261963`, \
0.8199844360351562`, 0.831206738948822`, 1.046786904335022`, \
0.9904285073280334`, 1.0000964403152466`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.999871015548706`, \
1.0008940696716309`, 0.9876304268836975`, 1.0281894207000732`, \
0.5044987797737122`, 0.08525379747152328`, 0.19073204696178436`, \
0.1728106588125229`, 0.16758792102336884`, 0.16953891515731812`, \
0.17061448097229004`, 0.1718304306268692`, 0.17283175885677338`, \
0.17388170957565308`, 0.17532053589820862`, 0.17621630430221558`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 0.999830961227417`, 1.0010024309158325`, 0.9909045696258545`, \
0.9879311919212341`, 1.0303161144256592`, 1.0249038934707642`, \
0.9918816089630127`, 1.0016634464263916`, 0.9999691843986511`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.000028371810913`, 0.9907980561256409`, 1.0409235954284668`, \
0.8835068941116333`, 0.2680838406085968`, 0.10828740149736404`, \
0.1437751203775406`, 0.17117945849895477`, 0.16757909953594208`, \
0.1697128415107727`, 0.1707836538553238`, 0.17172405123710632`, \
0.17311987280845642`, 0.17418372631072998`, 0.17528919875621796`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 0.9999882578849792`, 0.9998523592948914`, \
1.0009468793869019`, 0.9931095838546753`, 0.992673397064209`, \
1.0015316009521484`, 0.9997004270553589`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999842047691345`, \
1.0007036924362183`, 0.9957644939422607`, 1.0044505596160889`, \
1.0183607339859009`, 0.6823705434799194`, 0.27599117159843445`, \
0.1416822224855423`, 0.1733965426683426`, 0.16874590516090393`, \
0.1697016805410385`, 0.1708984225988388`, 0.17212456464767456`, \
0.17316874861717224`, 0.17448177933692932`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9998931884765625`, \
1.0006896257400513`, 0.9969133734703064`, 0.9923186898231506`, \
1.0606471300125122`, 1.0237663984298706`, 0.535084068775177`, \
0.10339836776256561`, 0.18296679854393005`, 0.16893433034420013`, \
0.17008431255817413`, 0.17110781371593475`, 0.17216943204402924`, \
0.17350046336650848`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999580383300781`, 1.000209093093872`, \
0.999735414981842`, 0.965936005115509`, 1.083275556564331`, \
0.5894536972045898`, 0.09264130890369415`, 0.18395817279815674`, \
0.16817396879196167`, 0.1692602038383484`, 0.17022627592086792`, \
0.17149469256401062`, 0.1725810468196869`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.0001806020736694`, 0.9814897775650024`, 1.0696991682052612`, \
0.6060320138931274`, 0.08904170989990234`, 0.18391656875610352`, \
0.16741570830345154`, 0.16849328577518463`, 0.1694801151752472`, \
0.170695960521698`, 0.17185351252555847`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9960806369781494`, 1.016000509262085`, 0.9787977933883667`, \
0.25885680317878723`, 0.15709330141544342`, 0.16902615129947662`, \
0.16670158505439758`, 0.1678469479084015`, 0.1689881980419159`, \
0.16987749934196472`, 0.17102865874767303`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9902446269989014`, 1.046231985092163`, 0.5979862809181213`, \
0.05454396829009056`, 0.14446662366390228`, 0.18583182990550995`, \
0.1761578619480133`, 0.16738471388816833`, 0.16923096776008606`, \
0.16897569596767426`, 0.1706107258796692`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9941375851631165`, 1.0275087356567383`, 0.7940924167633057`, \
0.35401609539985657`, 0.2953829765319824`, 0.07061070948839188`, \
0.12151770293712616`, 0.16292983293533325`, 0.16923679411411285`, \
0.18511347472667694`, 0.17440755665302277`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.0007015466690063`, 0.9968356490135193`, 1.0312750339508057`, \
1.0755311250686646`, 0.9497441053390503`, 0.6859990358352661`, \
0.49849918484687805`, 0.15322934091091156`, 0.15857666730880737`, \
0.09522785991430283`, 0.1576339304447174`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9998760223388672`, 1.000572919845581`, 0.9956569075584412`, \
0.983834981918335`, 1.005606770515442`, 1.0799111127853394`, \
1.0111442804336548`, 0.9811024069786072`, 0.690110981464386`, \
0.426478773355484`, 0.24045351147651672`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9998083114624023`, 1.0008721351623535`, 0.9968044757843018`, \
0.9815208911895752`, 0.997044026851654`, 1.0126640796661377`, \
1.034508466720581`, 1.0973379611968994`, 0.8731217384338379`], List[1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999501705169678`, 1.0002167224884033`, \
0.9987030029296875`, 0.99798983335495`, 0.9922796487808228`, \
0.9777648448944092`, 1.028633713722229`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9997677206993103`, 1.0010135173797607`, \
0.9923748970031738`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], \
List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`]], \\\"Real32\\\"], List[List[0, 43.`], List[75.`, \
0]], List[0.`, 1.`], Rule[ColorFunction, GrayLevel]], \
BoxForm`ImageTag[\\\"Real32\\\", Rule[ColorSpace, \\\"Grayscale\\\"], \
Rule[Interleaving, None]], Rule[Selectable, False]], Rule[DefaultBaseStyle, \
\\\"ImageGraphics\\\"], Rule[ImageSizeRaw, List[75.`, 43.`]], Rule[PlotRange, \
List[List[0, 75.`], List[0, 43.`]]]]}]}], \\\"\[RightAssociation]\\\"}], \
\\\",\\\", RowBox[{\\\"TargetDevice\\\", \\\"\[Rule]\\\", \\\"\\\\\\\"GPU\\\\\
\\\"\\\"}]}], \\\"]\\\"}]\\).\"", 2, 68, 11, 29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879696752070698*^9, 3.880400275467451*^9, 
  3.880409159286984*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[68]:=",ExpressionUUID->"d3c01d3b-c277-4551-a302-864bf05b298d"],

Cell[BoxData[
 TemplateBox[{
  "MeanAbsoluteLossLayer", "invindata2", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array\\\\\\\"\\\"}]\\) (or a list of \
these).\"", 2, 68, 12, 29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879696752070698*^9, 3.880400275467451*^9, 
  3.8804091593252087`*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[68]:=",ExpressionUUID->"e91ac8f5-a89c-4154-bada-21da1c4bdce1"],

Cell[BoxData[
 TemplateBox[{
  "ImageData", "imginv", 
   "\"Expecting an image or graphics instead of \
\\!\\(\\*RowBox[{\\\"$Failed\\\", \\\"[\\\", RowBox[{RowBox[{\\\"\
\[LeftAssociation]\\\", RowBox[{RowBox[{\\\"\\\\\\\"dims\\\\\\\"\\\", \\\"\
\[Rule]\\\", RowBox[{\\\"{\\\", RowBox[{\\\"120\\\", \\\",\\\", \\\"68\\\"}], \
\\\"}\\\"}]}], \\\",\\\", RowBox[{\\\"\\\\\\\"leftName\\\\\\\"\\\", \\\"\
\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/left/\
025.png\\\\\\\"\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"rightName\\\\\\\"\\\", \
\\\"\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/\
right/025.png\\\\\\\"\\\"}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"dispName\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"/Users/santi/Desktop/School/IFT6145/TP3_Stereo/SceneFlowMini/disp/\
025.png\\\\\\\"\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"iLeft\\\\\\\"\\\", \\\"\
\[Rule]\\\", GraphicsBox[TagBox[RasterBox[NumericArray[List[List[List[166, \
146, 131, 255], List[169, 138, 120, 255], List[162, 140, 124, 255], List[159, \
145, 129, 255], List[183, 150, 129, 255], List[174, 159, 142, 255], List[169, \
165, 149, 255], List[175, 173, 157, 255], List[169, 166, 150, 255], List[154, \
148, 128, 255], List[154, 148, 127, 255], List[124, 120, 102, 255], List[62, \
59, 51, 255], List[90, 87, 78, 255], List[160, 161, 149, 255], List[165, 170, \
158, 255], List[140, 139, 125, 255], List[126, 121, 105, 255], List[139, 141, \
129, 255], List[140, 143, 131, 255], List[119, 119, 106, 255], List[151, 155, \
144, 255], List[157, 164, 153, 255], List[156, 161, 151, 255], List[157, 162, \
151, 255], List[157, 163, 151, 255], List[157, 162, 151, 255], List[157, 161, \
150, 255], List[157, 161, 150, 255], List[158, 161, 150, 255], List[158, 162, \
150, 255], List[157, 161, 150, 255], List[159, 161, 151, 255], List[159, 160, \
151, 255], List[159, 160, 150, 255], List[158, 159, 150, 255], List[157, 159, \
150, 255], List[157, 159, 150, 255], List[156, 160, 152, 255], List[163, 163, \
151, 255], List[177, 163, 132, 255], List[151, 148, 133, 255], List[156, 143, \
122, 255], List[179, 149, 114, 255], List[179, 150, 117, 255], List[118, 121, \
107, 255], List[113, 118, 107, 255], List[173, 153, 120, 255], List[176, 146, \
113, 255], List[116, 122, 109, 255], List[150, 151, 143, 255], List[146, 153, \
149, 255], List[143, 149, 146, 255], List[139, 147, 144, 255], List[141, 149, \
145, 255], List[136, 139, 138, 255], List[128, 126, 129, 255], List[109, 112, \
118, 255], List[93, 97, 105, 255], List[85, 91, 101, 255], List[85, 91, 100, \
255], List[84, 91, 100, 255], List[84, 90, 100, 255], List[83, 90, 99, 255], \
List[85, 91, 100, 255], List[84, 90, 99, 255], List[85, 90, 99, 255], \
List[83, 89, 99, 255], List[80, 89, 99, 255], List[79, 87, 98, 255], List[79, \
87, 98, 255], List[79, 87, 98, 255], List[78, 87, 97, 255], List[78, 87, 98, \
255], List[78, 87, 97, 255]], List[List[148, 115, 97, 255], List[153, 105, \
85, 255], List[141, 112, 96, 255], List[138, 114, 99, 255], List[154, 100, \
79, 255], List[148, 115, 97, 255], List[140, 118, 104, 255], List[154, 132, \
116, 255], List[156, 148, 129, 255], List[134, 129, 110, 255], List[125, 117, \
99, 255], List[71, 65, 58, 255], List[64, 60, 54, 255], List[68, 66, 59, \
255], List[132, 122, 108, 255], List[139, 130, 113, 255], List[119, 114, 96, \
255], List[127, 120, 106, 255], List[147, 142, 128, 255], List[157, 152, 137, \
255], List[144, 145, 135, 255], List[123, 126, 116, 255], List[164, 170, 160, \
255], List[155, 163, 153, 255], List[156, 164, 153, 255], List[156, 163, 154, \
255], List[156, 163, 153, 255], List[153, 161, 152, 255], List[154, 161, 152, \
255], List[153, 160, 150, 255], List[153, 159, 149, 255], List[154, 159, 149, \
255], List[156, 158, 149, 255], List[154, 158, 149, 255], List[153, 157, 149, \
255], List[154, 157, 148, 255], List[155, 159, 150, 255], List[145, 150, 144, \
255], List[127, 129, 119, 255], List[132, 132, 117, 255], List[140, 131, 111, \
255], List[128, 126, 113, 255], List[134, 128, 111, 255], List[145, 135, 113, \
255], List[149, 139, 116, 255], List[110, 108, 96, 255], List[118, 116, 103, \
255], List[151, 139, 111, 255], List[113, 109, 95, 255], List[114, 114, 99, \
255], List[129, 126, 115, 255], List[117, 119, 113, 255], List[125, 126, 120, \
255], List[111, 113, 109, 255], List[107, 107, 104, 255], List[100, 104, 101, \
255], List[84, 91, 89, 255], List[76, 85, 87, 255], List[79, 88, 100, 255], \
List[82, 90, 100, 255], List[82, 90, 100, 255], List[82, 89, 100, 255], \
List[83, 90, 100, 255], List[83, 90, 100, 255], List[83, 90, 99, 255], \
List[82, 89, 99, 255], List[82, 89, 99, 255], List[80, 89, 98, 255], List[80, \
88, 99, 255], List[79, 88, 98, 255], List[78, 87, 98, 255], List[78, 87, 98, \
255], List[77, 86, 97, 255], List[78, 86, 97, 255], List[81, 88, 98, 255]], \
List[List[143, 119, 103, 255], List[142, 118, 103, 255], List[136, 117, 104, \
255], List[138, 116, 102, 255], List[139, 117, 103, 255], List[136, 113, 99, \
255], List[134, 111, 97, 255], List[137, 117, 100, 255], List[122, 113, 98, \
255], List[122, 111, 96, 255], List[142, 126, 109, 255], List[139, 124, 105, \
255], List[79, 73, 64, 255], List[79, 76, 65, 255], List[102, 98, 83, 255], \
List[120, 114, 96, 255], List[113, 109, 95, 255], List[138, 127, 106, 255], \
List[137, 125, 105, 255], List[133, 120, 106, 255], List[110, 100, 85, 255], \
List[136, 123, 108, 255], List[149, 139, 125, 255], List[152, 144, 128, 255], \
List[151, 146, 134, 255], List[152, 148, 137, 255], List[151, 152, 142, 255], \
List[154, 158, 147, 255], List[155, 156, 147, 255], List[151, 160, 152, 255], \
List[151, 161, 153, 255], List[148, 160, 151, 255], List[148, 160, 151, 255], \
List[151, 159, 150, 255], List[153, 160, 151, 255], List[151, 158, 149, 255], \
List[154, 159, 152, 255], List[135, 134, 122, 255], List[78, 83, 81, 255], \
List[80, 86, 84, 255], List[91, 95, 92, 255], List[98, 99, 93, 255], List[95, \
99, 94, 255], List[91, 96, 92, 255], List[96, 99, 94, 255], List[110, 110, \
100, 255], List[113, 113, 102, 255], List[103, 109, 101, 255], List[111, 115, \
105, 255], List[122, 120, 107, 255], List[117, 115, 101, 255], List[116, 115, \
102, 255], List[116, 117, 103, 255], List[120, 119, 106, 255], List[121, 118, \
102, 255], List[129, 126, 107, 255], List[128, 130, 108, 255], List[115, 118, \
103, 255], List[82, 90, 101, 255], List[81, 90, 100, 255], List[83, 90, 100, \
255], List[88, 93, 100, 255], List[87, 91, 99, 255], List[82, 89, 99, 255], \
List[81, 90, 99, 255], List[80, 89, 99, 255], List[80, 89, 99, 255], List[80, \
88, 99, 255], List[78, 87, 99, 255], List[78, 87, 98, 255], List[78, 87, 98, \
255], List[79, 87, 98, 255], List[79, 87, 98, 255], List[80, 88, 98, 255], \
List[80, 87, 98, 255]], List[List[138, 115, 100, 255], List[130, 108, 94, \
255], List[139, 117, 104, 255], List[134, 112, 99, 255], List[120, 100, 89, \
255], List[141, 116, 101, 255], List[131, 112, 98, 255], List[136, 116, 101, \
255], List[144, 127, 110, 255], List[138, 125, 107, 255], List[133, 125, 105, \
255], List[139, 127, 106, 255], List[124, 112, 95, 255], List[112, 105, 90, \
255], List[121, 117, 99, 255], List[101, 97, 83, 255], List[113, 111, 97, \
255], List[120, 114, 96, 255], List[103, 98, 83, 255], List[112, 105, 88, \
255], List[134, 122, 101, 255], List[147, 131, 110, 255], List[143, 128, 111, \
255], List[151, 131, 109, 255], List[147, 127, 109, 255], List[147, 130, 113, \
255], List[145, 129, 111, 255], List[146, 131, 112, 255], List[146, 130, 111, \
255], List[145, 135, 119, 255], List[147, 141, 131, 255], List[151, 146, 134, \
255], List[151, 149, 135, 255], List[143, 142, 132, 255], List[121, 126, 125, \
255], List[115, 126, 128, 255], List[150, 143, 127, 255], List[140, 125, 102, \
255], List[70, 79, 81, 255], List[75, 82, 82, 255], List[83, 87, 86, 255], \
List[86, 90, 88, 255], List[90, 94, 90, 255], List[89, 94, 90, 255], List[90, \
94, 91, 255], List[85, 89, 88, 255], List[83, 88, 86, 255], List[75, 83, 82, \
255], List[77, 83, 83, 255], List[86, 91, 87, 255], List[92, 95, 91, 255], \
List[92, 95, 91, 255], List[90, 94, 90, 255], List[93, 96, 92, 255], List[98, \
100, 95, 255], List[99, 100, 96, 255], List[96, 100, 95, 255], List[96, 100, \
97, 255], List[82, 91, 101, 255], List[80, 90, 100, 255], List[80, 89, 100, \
255], List[84, 91, 99, 255], List[83, 90, 99, 255], List[79, 89, 99, 255], \
List[80, 89, 99, 255], List[81, 89, 99, 255], List[80, 88, 99, 255], List[79, \
88, 99, 255], List[80, 89, 99, 255], List[81, 88, 99, 255], List[80, 88, 98, \
255], List[80, 88, 98, 255], List[80, 88, 98, 255], List[79, 88, 98, 255], \
List[79, 87, 98, 255]], List[List[144, 119, 102, 255], List[143, 118, 101, \
255], List[133, 112, 100, 255], List[140, 116, 100, 255], List[147, 119, 101, \
255], List[134, 110, 96, 255], List[129, 108, 96, 255], List[129, 111, 96, \
255], List[122, 115, 98, 255], List[120, 113, 96, 255], List[139, 127, 108, \
255], List[141, 125, 108, 255], List[145, 128, 111, 255], List[135, 123, 105, \
255], List[92, 89, 77, 255], List[107, 100, 87, 255], List[122, 112, 95, \
255], List[114, 103, 88, 255], List[129, 118, 104, 255], List[144, 130, 112, \
255], List[144, 129, 107, 255], List[139, 126, 105, 255], List[137, 126, 105, \
255], List[138, 126, 105, 255], List[138, 127, 107, 255], List[137, 126, 108, \
255], List[143, 129, 109, 255], List[145, 130, 111, 255], List[145, 129, 110, \
255], List[147, 130, 112, 255], List[147, 128, 107, 255], List[149, 129, 108, \
255], List[147, 127, 107, 255], List[150, 129, 107, 255], List[132, 118, 104, \
255], List[91, 98, 102, 255], List[124, 115, 99, 255], List[118, 112, 99, \
255], List[110, 114, 105, 255], List[109, 110, 102, 255], List[110, 109, 101, \
255], List[105, 105, 98, 255], List[96, 99, 93, 255], List[92, 96, 90, 255], \
List[96, 98, 93, 255], List[96, 98, 92, 255], List[90, 94, 90, 255], List[80, \
86, 85, 255], List[81, 87, 86, 255], List[87, 92, 88, 255], List[88, 91, 88, \
255], List[89, 93, 90, 255], List[88, 94, 90, 255], List[89, 93, 90, 255], \
List[85, 90, 88, 255], List[81, 87, 86, 255], List[71, 79, 79, 255], List[76, \
83, 85, 255], List[82, 91, 101, 255], List[80, 90, 100, 255], List[81, 89, \
100, 255], List[82, 90, 100, 255], List[80, 89, 100, 255], List[79, 88, 99, \
255], List[80, 89, 99, 255], List[80, 89, 99, 255], List[81, 89, 99, 255], \
List[80, 89, 99, 255], List[81, 89, 99, 255], List[80, 88, 98, 255], List[81, \
89, 99, 255], List[81, 89, 99, 255], List[80, 89, 98, 255], List[79, 88, 98, \
255], List[80, 88, 98, 255]], List[List[135, 111, 97, 255], List[136, 113, \
98, 255], List[135, 114, 101, 255], List[130, 108, 94, 255], List[131, 108, \
93, 255], List[134, 111, 97, 255], List[126, 107, 94, 255], List[121, 112, \
96, 255], List[121, 119, 102, 255], List[115, 107, 93, 255], List[136, 121, \
104, 255], List[143, 126, 107, 255], List[147, 128, 108, 255], List[141, 124, \
105, 255], List[92, 85, 72, 255], List[112, 105, 90, 255], List[139, 126, \
107, 255], List[148, 131, 112, 255], List[148, 132, 112, 255], List[144, 127, \
110, 255], List[149, 130, 111, 255], List[145, 130, 114, 255], List[145, 130, \
112, 255], List[148, 130, 109, 255], List[138, 125, 109, 255], List[136, 126, \
106, 255], List[137, 128, 108, 255], List[131, 126, 108, 255], List[139, 128, \
107, 255], List[135, 124, 106, 255], List[144, 128, 109, 255], List[145, 131, \
113, 255], List[143, 130, 114, 255], List[151, 133, 112, 255], List[139, 126, \
113, 255], List[93, 95, 99, 255], List[131, 129, 115, 255], List[133, 135, \
114, 255], List[100, 104, 85, 255], List[116, 117, 96, 255], List[122, 118, \
100, 255], List[117, 114, 101, 255], List[124, 122, 108, 255], List[124, 122, \
109, 255], List[121, 118, 107, 255], List[124, 121, 107, 255], List[127, 126, \
109, 255], List[119, 121, 107, 255], List[121, 122, 109, 255], List[119, 117, \
106, 255], List[114, 113, 102, 255], List[103, 106, 98, 255], List[100, 103, \
95, 255], List[104, 106, 98, 255], List[104, 105, 97, 255], List[100, 103, \
97, 255], List[91, 95, 91, 255], List[88, 93, 93, 255], List[81, 90, 101, \
255], List[82, 90, 101, 255], List[82, 90, 100, 255], List[81, 89, 100, 255], \
List[80, 89, 100, 255], List[81, 89, 100, 255], List[81, 89, 100, 255], \
List[81, 89, 99, 255], List[81, 90, 100, 255], List[80, 89, 99, 255], \
List[80, 88, 99, 255], List[80, 88, 99, 255], List[81, 89, 99, 255], List[80, \
88, 98, 255], List[78, 87, 98, 255], List[79, 88, 98, 255], List[79, 88, 98, \
255]], List[List[133, 111, 98, 255], List[130, 110, 97, 255], List[135, 115, \
102, 255], List[128, 108, 95, 255], List[125, 105, 92, 255], List[134, 111, \
97, 255], List[121, 109, 95, 255], List[127, 122, 104, 255], List[129, 122, \
104, 255], List[95, 89, 77, 255], List[143, 125, 104, 255], List[150, 125, \
98, 255], List[128, 110, 88, 255], List[106, 93, 75, 255], List[118, 106, 86, \
255], List[133, 116, 91, 255], List[116, 109, 91, 255], List[149, 131, 107, \
255], List[146, 128, 107, 255], List[142, 125, 106, 255], List[148, 128, 107, \
255], List[143, 125, 107, 255], List[146, 128, 110, 255], List[146, 129, 110, \
255], List[145, 128, 112, 255], List[144, 129, 112, 255], List[144, 128, 109, \
255], List[144, 130, 111, 255], List[139, 127, 108, 255], List[137, 124, 107, \
255], List[139, 125, 104, 255], List[137, 125, 103, 255], List[137, 125, 104, \
255], List[142, 127, 105, 255], List[125, 117, 107, 255], List[93, 97, 99, \
255], List[130, 118, 99, 255], List[85, 96, 98, 255], List[40, 71, 87, 255], \
List[57, 80, 90, 255], List[71, 86, 76, 255], List[74, 79, 64, 255], List[94, \
99, 86, 255], List[100, 103, 88, 255], List[85, 87, 71, 255], List[93, 97, \
76, 255], List[91, 100, 85, 255], List[86, 97, 80, 255], List[104, 108, 88, \
255], List[111, 109, 87, 255], List[109, 107, 94, 255], List[125, 124, 108, \
255], List[125, 125, 110, 255], List[117, 114, 102, 255], List[124, 120, 102, \
255], List[127, 125, 106, 255], List[123, 124, 104, 255], List[112, 115, 105, \
255], List[78, 87, 101, 255], List[81, 90, 101, 255], List[81, 89, 100, 255], \
List[82, 90, 100, 255], List[81, 91, 100, 255], List[80, 89, 100, 255], \
List[81, 89, 100, 255], List[81, 90, 100, 255], List[79, 89, 99, 255], \
List[79, 88, 99, 255], List[79, 88, 99, 255], List[80, 88, 99, 255], List[80, \
88, 99, 255], List[79, 87, 99, 255], List[78, 87, 99, 255], List[78, 87, 98, \
255], List[79, 88, 98, 255]], List[List[140, 108, 92, 255], List[135, 113, \
99, 255], List[131, 112, 99, 255], List[136, 104, 90, 255], List[135, 109, \
94, 255], List[127, 108, 94, 255], List[120, 110, 95, 255], List[121, 115, \
98, 255], List[123, 110, 92, 255], List[123, 113, 95, 255], List[127, 108, \
85, 255], List[120, 102, 78, 255], List[135, 111, 82, 255], List[135, 118, \
92, 255], List[151, 126, 94, 255], List[164, 131, 95, 255], List[144, 119, \
89, 255], List[153, 128, 98, 255], List[155, 126, 95, 255], List[154, 130, \
100, 255], List[154, 128, 97, 255], List[157, 127, 95, 255], List[152, 127, \
100, 255], List[144, 126, 105, 255], List[146, 128, 109, 255], List[144, 127, \
108, 255], List[142, 127, 109, 255], List[140, 126, 108, 255], List[143, 127, \
110, 255], List[144, 128, 111, 255], List[147, 129, 110, 255], List[143, 128, \
112, 255], List[142, 127, 109, 255], List[144, 128, 107, 255], List[117, 113, \
105, 255], List[110, 111, 106, 255], List[123, 115, 95, 255], List[99, 120, \
131, 255], List[78, 123, 156, 255], List[97, 131, 156, 255], List[76, 121, \
156, 255], List[62, 97, 111, 255], List[51, 61, 56, 255], List[53, 67, 65, \
255], List[58, 89, 102, 255], List[63, 97, 119, 255], List[53, 86, 111, 255], \
List[42, 76, 100, 255], List[55, 86, 105, 255], List[62, 85, 84, 255], \
List[66, 75, 62, 255], List[80, 88, 76, 255], List[83, 88, 75, 255], List[74, \
79, 64, 255], List[78, 89, 74, 255], List[77, 90, 84, 255], List[75, 88, 77, \
255], List[84, 94, 90, 255], List[83, 91, 103, 255], List[82, 91, 102, 255], \
List[80, 91, 102, 255], List[80, 90, 100, 255], List[81, 90, 100, 255], \
List[80, 89, 100, 255], List[83, 90, 100, 255], List[82, 90, 100, 255], \
List[80, 89, 99, 255], List[79, 88, 99, 255], List[81, 88, 99, 255], List[80, \
89, 99, 255], List[79, 88, 99, 255], List[78, 87, 99, 255], List[78, 87, 99, \
255], List[79, 88, 99, 255], List[79, 88, 98, 255]], List[List[156, 106, 84, \
255], List[135, 110, 95, 255], List[133, 111, 97, 255], List[158, 99, 77, \
255], List[140, 103, 87, 255], List[131, 109, 95, 255], List[120, 101, 88, \
255], List[119, 102, 84, 255], List[150, 121, 90, 255], List[129, 112, 88, \
255], List[149, 120, 87, 255], List[136, 111, 85, 255], List[138, 119, 94, \
255], List[140, 119, 91, 255], List[155, 126, 89, 255], List[147, 123, 89, \
255], List[156, 128, 91, 255], List[158, 128, 94, 255], List[164, 132, 96, \
255], List[163, 132, 95, 255], List[170, 136, 98, 255], List[172, 136, 96, \
255], List[166, 133, 97, 255], List[159, 132, 99, 255], List[152, 126, 97, \
255], List[152, 130, 103, 255], List[149, 128, 103, 255], List[147, 128, 105, \
255], List[146, 128, 107, 255], List[141, 124, 106, 255], List[145, 126, 106, \
255], List[141, 125, 107, 255], List[143, 127, 109, 255], List[147, 129, 110, \
255], List[124, 117, 111, 255], List[84, 87, 88, 255], List[141, 133, 119, \
255], List[177, 178, 172, 255], List[163, 178, 182, 255], List[178, 188, 188, \
255], List[181, 203, 205, 255], List[155, 187, 198, 255], List[123, 146, 147, \
255], List[127, 156, 164, 255], List[134, 175, 197, 255], List[147, 176, 192, \
255], List[126, 159, 177, 255], List[105, 143, 167, 255], List[125, 157, 175, \
255], List[95, 142, 177, 255], List[73, 113, 131, 255], List[55, 66, 63, \
255], List[58, 80, 83, 255], List[66, 107, 131, 255], List[71, 113, 144, \
255], List[83, 95, 111, 255], List[83, 82, 89, 255], List[94, 91, 94, 255], \
List[101, 89, 87, 255], List[103, 91, 90, 255], List[107, 91, 86, 255], \
List[87, 92, 99, 255], List[78, 89, 101, 255], List[81, 89, 100, 255], \
List[81, 90, 100, 255], List[81, 89, 100, 255], List[81, 89, 100, 255], \
List[81, 89, 100, 255], List[83, 90, 100, 255], List[82, 90, 100, 255], \
List[81, 89, 100, 255], List[79, 87, 99, 255], List[78, 87, 99, 255], \
List[80, 89, 99, 255], List[81, 90, 99, 255]], List[List[153, 116, 98, 255], \
List[132, 107, 90, 255], List[136, 109, 92, 255], List[152, 116, 98, 255], \
List[137, 108, 93, 255], List[126, 100, 85, 255], List[128, 103, 90, 255], \
List[134, 108, 89, 255], List[139, 112, 86, 255], List[128, 108, 83, 255], \
List[131, 113, 88, 255], List[129, 113, 92, 255], List[140, 119, 91, 255], \
List[158, 127, 93, 255], List[155, 127, 91, 255], List[152, 125, 90, 255], \
List[152, 125, 89, 255], List[154, 125, 93, 255], List[145, 115, 84, 255], \
List[145, 118, 88, 255], List[136, 112, 88, 255], List[133, 110, 87, 255], \
List[155, 126, 93, 255], List[160, 128, 92, 255], List[164, 132, 96, 255], \
List[156, 128, 95, 255], List[159, 130, 95, 255], List[155, 129, 97, 255], \
List[154, 127, 96, 255], List[154, 128, 99, 255], List[154, 128, 97, 255], \
List[155, 126, 95, 255], List[146, 124, 99, 255], List[147, 127, 105, 255], \
List[119, 113, 106, 255], List[84, 85, 85, 255], List[105, 96, 91, 255], \
List[171, 166, 156, 255], List[170, 131, 123, 255], List[124, 101, 96, 255], \
List[172, 182, 175, 255], List[210, 220, 208, 255], List[200, 217, 210, 255], \
List[208, 219, 209, 255], List[207, 214, 203, 255], List[196, 206, 200, 255], \
List[163, 192, 199, 255], List[160, 192, 200, 255], List[192, 205, 202, 255], \
List[196, 211, 205, 255], List[182, 205, 207, 255], List[151, 175, 174, 255], \
List[159, 186, 191, 255], List[162, 194, 206, 255], List[170, 193, 198, 255], \
List[141, 173, 186, 255], List[127, 165, 184, 255], List[118, 137, 148, 255], \
List[76, 82, 92, 255], List[76, 89, 100, 255], List[106, 91, 86, 255], \
List[96, 94, 96, 255], List[76, 88, 102, 255], List[82, 89, 101, 255], \
List[80, 90, 101, 255], List[79, 89, 100, 255], List[80, 89, 100, 255], \
List[82, 90, 101, 255], List[84, 90, 100, 255], List[83, 90, 100, 255], \
List[81, 90, 99, 255], List[80, 90, 101, 255], List[80, 89, 101, 255], \
List[80, 89, 101, 255], List[78, 88, 99, 255]], List[List[150, 104, 84, 255], \
List[128, 112, 99, 255], List[137, 106, 91, 255], List[153, 95, 73, 255], \
List[133, 106, 91, 255], List[126, 105, 91, 255], List[125, 101, 90, 255], \
List[136, 106, 84, 255], List[157, 126, 93, 255], List[152, 122, 90, 255], \
List[134, 110, 83, 255], List[145, 117, 85, 255], List[151, 123, 92, 255], \
List[149, 126, 97, 255], List[152, 127, 97, 255], List[157, 128, 94, 255], \
List[154, 126, 95, 255], List[159, 129, 94, 255], List[164, 132, 95, 255], \
List[160, 129, 93, 255], List[154, 125, 94, 255], List[142, 117, 90, 255], \
List[148, 120, 91, 255], List[146, 116, 86, 255], List[151, 121, 90, 255], \
List[152, 126, 90, 255], List[148, 124, 89, 255], List[154, 126, 91, 255], \
List[159, 127, 94, 255], List[160, 129, 94, 255], List[164, 132, 96, 255], \
List[168, 133, 95, 255], List[161, 131, 97, 255], List[162, 131, 97, 255], \
List[114, 105, 97, 255], List[92, 91, 90, 255], List[93, 89, 84, 255], \
List[96, 96, 92, 255], List[164, 163, 153, 255], List[150, 147, 138, 255], \
List[143, 136, 128, 255], List[155, 182, 183, 255], List[152, 198, 204, 255], \
List[168, 199, 202, 255], List[190, 206, 203, 255], List[197, 205, 199, 255], \
List[173, 193, 196, 255], List[176, 196, 197, 255], List[199, 208, 202, 255], \
List[199, 211, 205, 255], List[201, 215, 206, 255], List[202, 220, 212, 255], \
List[208, 220, 210, 255], List[208, 215, 204, 255], List[198, 208, 201, 255], \
List[164, 194, 200, 255], List[174, 207, 213, 255], List[145, 157, 159, 255], \
List[73, 83, 96, 255], List[78, 92, 107, 255], List[99, 83, 78, 255], \
List[94, 93, 97, 255], List[77, 90, 102, 255], List[82, 90, 101, 255], \
List[82, 91, 101, 255], List[81, 90, 101, 255], List[80, 90, 100, 255], \
List[83, 89, 100, 255], List[84, 90, 100, 255], List[81, 89, 99, 255], \
List[78, 87, 99, 255], List[70, 80, 92, 255], List[68, 78, 90, 255], List[71, \
79, 92, 255], List[74, 84, 97, 255]], List[List[131, 109, 96, 255], List[124, \
107, 96, 255], List[130, 107, 94, 255], List[130, 102, 90, 255], List[126, \
104, 92, 255], List[123, 105, 92, 255], List[124, 103, 92, 255], List[130, \
104, 85, 255], List[147, 121, 92, 255], List[143, 125, 104, 255], List[169, \
153, 130, 255], List[175, 158, 136, 255], List[138, 121, 102, 255], List[139, \
122, 102, 255], List[143, 125, 103, 255], List[144, 125, 102, 255], List[146, \
127, 102, 255], List[145, 123, 98, 255], List[148, 123, 96, 255], List[154, \
127, 97, 255], List[164, 129, 92, 255], List[167, 132, 94, 255], List[163, \
131, 97, 255], List[163, 132, 96, 255], List[159, 130, 95, 255], List[154, \
126, 91, 255], List[152, 125, 89, 255], List[154, 127, 92, 255], List[150, \
120, 89, 255], List[146, 117, 87, 255], List[132, 110, 87, 255], List[129, \
108, 86, 255], List[149, 121, 90, 255], List[159, 126, 90, 255], List[119, \
110, 100, 255], List[102, 99, 96, 255], List[96, 92, 88, 255], List[117, 114, \
108, 255], List[150, 145, 136, 255], List[113, 111, 105, 255], List[148, 140, \
129, 255], List[143, 168, 168, 255], List[138, 194, 205, 255], List[155, 193, \
201, 255], List[185, 203, 203, 255], List[194, 205, 200, 255], List[190, 198, \
194, 255], List[194, 203, 198, 255], List[194, 208, 204, 255], List[176, 204, \
207, 255], List[149, 199, 207, 255], List[146, 197, 206, 255], List[164, 202, \
207, 255], List[190, 208, 207, 255], List[199, 209, 202, 255], List[157, 155, \
150, 255], List[158, 153, 147, 255], List[133, 125, 120, 255], List[93, 85, \
86, 255], List[89, 83, 86, 255], List[102, 79, 65, 255], List[96, 96, 100, \
255], List[78, 89, 101, 255], List[83, 90, 101, 255], List[81, 90, 101, 255], \
List[80, 89, 100, 255], List[80, 89, 100, 255], List[80, 89, 100, 255], \
List[80, 89, 100, 255], List[80, 89, 99, 255], List[83, 91, 102, 255], \
List[123, 131, 137, 255], List[145, 154, 157, 255], List[159, 172, 174, 255], \
List[171, 189, 192, 255]], List[List[127, 106, 93, 255], List[128, 109, 97, \
255], List[121, 102, 90, 255], List[116, 99, 87, 255], List[127, 105, 93, \
255], List[121, 102, 91, 255], List[120, 99, 88, 255], List[119, 104, 91, \
255], List[133, 116, 98, 255], List[137, 125, 113, 255], List[189, 186, 173, \
255], List[213, 208, 194, 255], List[151, 138, 124, 255], List[133, 117, 100, \
255], List[135, 122, 104, 255], List[135, 122, 104, 255], List[136, 120, 103, \
255], List[140, 124, 106, 255], List[137, 121, 104, 255], List[143, 123, 100, \
255], List[146, 123, 97, 255], List[146, 122, 95, 255], List[145, 123, 99, \
255], List[145, 122, 98, 255], List[147, 125, 98, 255], List[151, 127, 98, \
255], List[153, 126, 96, 255], List[152, 126, 95, 255], List[159, 129, 94, \
255], List[161, 130, 95, 255], List[158, 128, 94, 255], List[152, 124, 92, \
255], List[150, 122, 89, 255], List[154, 123, 90, 255], List[108, 103, 95, \
255], List[100, 101, 92, 255], List[121, 118, 110, 255], List[150, 147, 138, \
255], List[129, 125, 118, 255], List[78, 76, 73, 255], List[127, 122, 114, \
255], List[179, 188, 181, 255], List[188, 206, 200, 255], List[188, 201, 195, \
255], List[192, 202, 196, 255], List[186, 197, 193, 255], List[164, 187, 191, \
255], List[185, 197, 194, 255], List[195, 205, 200, 255], List[179, 203, 204, \
255], List[156, 199, 203, 255], List[149, 197, 204, 255], List[164, 200, 206, \
255], List[188, 206, 206, 255], List[196, 207, 202, 255], List[185, 193, 188, \
255], List[195, 203, 196, 255], List[135, 142, 142, 255], List[76, 82, 92, \
255], List[83, 88, 96, 255], List[122, 94, 73, 255], List[93, 94, 100, 255], \
List[79, 90, 102, 255], List[82, 91, 101, 255], List[81, 90, 101, 255], \
List[80, 90, 101, 255], List[80, 90, 100, 255], List[81, 89, 100, 255], \
List[81, 90, 101, 255], List[81, 89, 99, 255], List[81, 91, 103, 255], \
List[86, 125, 165, 255], List[85, 128, 171, 255], List[85, 131, 171, 255], \
List[101, 140, 170, 255]], List[List[127, 106, 94, 255], List[124, 106, 94, \
255], List[124, 103, 90, 255], List[122, 101, 88, 255], List[125, 103, 91, \
255], List[119, 102, 91, 255], List[120, 100, 87, 255], List[123, 107, 94, \
255], List[133, 118, 104, 255], List[126, 114, 97, 255], List[156, 151, 138, \
255], List[202, 197, 181, 255], List[173, 164, 149, 255], List[127, 113, 93, \
255], List[139, 126, 107, 255], List[137, 122, 104, 255], List[136, 121, 105, \
255], List[138, 123, 108, 255], List[137, 121, 105, 255], List[140, 124, 107, \
255], List[134, 120, 105, 255], List[140, 123, 105, 255], List[137, 121, 104, \
255], List[139, 123, 105, 255], List[138, 122, 103, 255], List[139, 122, 103, \
255], List[140, 123, 102, 255], List[142, 124, 102, 255], List[141, 121, 99, \
255], List[146, 123, 96, 255], List[156, 124, 92, 255], List[156, 126, 93, \
255], List[153, 127, 96, 255], List[158, 128, 96, 255], List[101, 99, 91, \
255], List[109, 109, 100, 255], List[151, 147, 137, 255], List[152, 149, 140, \
255], List[109, 105, 99, 255], List[71, 67, 64, 255], List[130, 124, 117, \
255], List[145, 156, 152, 255], List[154, 178, 181, 255], List[183, 197, 194, \
255], List[186, 196, 191, 255], List[168, 188, 190, 255], List[146, 181, 189, \
255], List[173, 191, 190, 255], List[196, 204, 195, 255], List[204, 210, 199, \
255], List[200, 215, 207, 255], List[198, 212, 204, 255], List[199, 209, 200, \
255], List[196, 205, 199, 255], List[187, 199, 195, 255], List[159, 186, 193, \
255], List[192, 208, 205, 255], List[138, 145, 146, 255], List[72, 83, 96, \
255], List[87, 93, 103, 255], List[128, 100, 79, 255], List[89, 93, 100, \
255], List[79, 89, 101, 255], List[81, 90, 101, 255], List[82, 91, 101, 255], \
List[80, 90, 101, 255], List[80, 90, 101, 255], List[81, 90, 100, 255], \
List[80, 89, 100, 255], List[81, 89, 100, 255], List[78, 87, 98, 255], \
List[33, 71, 122, 255], List[24, 65, 122, 255], List[27, 64, 113, 255], \
List[51, 70, 91, 255]], List[List[123, 104, 92, 255], List[122, 103, 93, \
255], List[129, 107, 93, 255], List[132, 106, 92, 255], List[120, 99, 88, \
255], List[118, 99, 89, 255], List[121, 97, 85, 255], List[127, 110, 94, \
255], List[123, 114, 96, 255], List[118, 111, 93, 255], List[129, 126, 114, \
255], List[185, 180, 165, 255], List[195, 189, 173, 255], List[131, 122, 104, \
255], List[119, 114, 99, 255], List[128, 120, 102, 255], List[129, 118, 99, \
255], List[126, 116, 101, 255], List[133, 120, 101, 255], List[136, 121, 102, \
255], List[133, 121, 106, 255], List[140, 123, 105, 255], List[137, 121, 104, \
255], List[136, 122, 107, 255], List[136, 120, 104, 255], List[135, 121, 104, \
255], List[133, 120, 104, 255], List[137, 121, 105, 255], List[135, 121, 105, \
255], List[137, 120, 102, 255], List[138, 120, 100, 255], List[139, 120, 99, \
255], List[136, 118, 100, 255], List[139, 121, 103, 255], List[103, 101, 96, \
255], List[123, 115, 106, 255], List[144, 140, 132, 255], List[148, 146, 136, \
255], List[89, 84, 79, 255], List[56, 51, 48, 255], List[137, 133, 125, 255], \
List[79, 85, 83, 255], List[53, 74, 81, 255], List[77, 122, 154, 255], \
List[109, 141, 165, 255], List[109, 141, 159, 255], List[101, 138, 160, 255], \
List[142, 167, 178, 255], List[141, 171, 186, 255], List[138, 171, 186, 255], \
List[127, 150, 151, 255], List[143, 169, 174, 255], List[173, 195, 199, 255], \
List[184, 196, 192, 255], List[167, 189, 191, 255], List[146, 179, 189, 255], \
List[175, 197, 198, 255], List[131, 139, 141, 255], List[77, 86, 98, 255], \
List[87, 93, 101, 255], List[117, 94, 75, 255], List[87, 93, 101, 255], \
List[80, 90, 102, 255], List[83, 91, 102, 255], List[81, 90, 101, 255], \
List[80, 90, 101, 255], List[79, 89, 101, 255], List[80, 90, 100, 255], \
List[80, 89, 100, 255], List[79, 89, 100, 255], List[81, 89, 99, 255], \
List[45, 74, 111, 255], List[33, 62, 101, 255], List[51, 67, 86, 255], \
List[73, 78, 71, 255]], List[List[126, 106, 93, 255], List[127, 106, 94, \
255], List[108, 91, 82, 255], List[116, 97, 85, 255], List[123, 103, 92, \
255], List[118, 100, 89, 255], List[119, 97, 85, 255], List[119, 103, 90, \
255], List[128, 116, 100, 255], List[127, 113, 97, 255], List[114, 107, 96, \
255], List[161, 156, 147, 255], List[201, 196, 178, 255], List[156, 144, 124, \
255], List[128, 115, 98, 255], List[132, 121, 102, 255], List[127, 116, 99, \
255], List[126, 116, 100, 255], List[128, 117, 98, 255], List[128, 117, 98, \
255], List[126, 116, 98, 255], List[125, 114, 95, 255], List[125, 115, 97, \
255], List[122, 113, 98, 255], List[128, 117, 100, 255], List[128, 119, 103, \
255], List[131, 119, 101, 255], List[130, 118, 104, 255], List[134, 119, 103, \
255], List[137, 121, 105, 255], List[132, 119, 105, 255], List[135, 120, 103, \
255], List[135, 120, 103, 255], List[133, 120, 107, 255], List[91, 89, 86, \
255], List[124, 114, 104, 255], List[146, 144, 135, 255], List[143, 139, 131, \
255], List[97, 95, 90, 255], List[92, 90, 86, 255], List[136, 132, 125, 255], \
List[85, 90, 84, 255], List[60, 67, 59, 255], List[61, 75, 73, 255], List[63, \
88, 103, 255], List[66, 88, 107, 255], List[62, 85, 105, 255], List[58, 90, \
115, 255], List[57, 94, 118, 255], List[55, 80, 90, 255], List[46, 57, 55, \
255], List[56, 75, 78, 255], List[68, 113, 144, 255], List[97, 134, 162, \
255], List[105, 135, 156, 255], List[88, 128, 152, 255], List[138, 160, 174, \
255], List[130, 123, 123, 255], List[88, 90, 90, 255], List[84, 90, 98, 255], \
List[120, 95, 76, 255], List[87, 93, 101, 255], List[80, 90, 102, 255], \
List[82, 91, 102, 255], List[82, 91, 102, 255], List[82, 91, 101, 255], \
List[81, 90, 101, 255], List[82, 90, 101, 255], List[81, 89, 100, 255], \
List[80, 89, 100, 255], List[84, 92, 101, 255], List[45, 66, 89, 255], \
List[37, 67, 79, 255], List[60, 74, 69, 255], List[69, 72, 63, 255]], \
List[List[104, 96, 95, 255], List[117, 100, 89, 255], List[123, 103, 92, \
255], List[118, 99, 88, 255], List[118, 99, 89, 255], List[117, 97, 87, 255], \
List[114, 95, 85, 255], List[114, 100, 89, 255], List[128, 114, 98, 255], \
List[128, 115, 100, 255], List[117, 104, 88, 255], List[129, 124, 111, 255], \
List[194, 190, 175, 255], List[168, 160, 141, 255], List[125, 112, 95, 255], \
List[132, 119, 103, 255], List[133, 119, 104, 255], List[133, 118, 104, 255], \
List[136, 119, 102, 255], List[132, 118, 104, 255], List[134, 120, 105, 255], \
List[151, 130, 110, 255], List[147, 128, 109, 255], List[136, 121, 103, 255], \
List[132, 120, 102, 255], List[122, 116, 100, 255], List[125, 117, 99, 255], \
List[121, 112, 97, 255], List[124, 114, 97, 255], List[126, 114, 96, 255], \
List[125, 115, 98, 255], List[130, 117, 99, 255], List[123, 112, 98, 255], \
List[124, 115, 104, 255], List[92, 90, 88, 255], List[122, 117, 111, 255], \
List[147, 143, 135, 255], List[139, 135, 127, 255], List[87, 84, 80, 255], \
List[98, 95, 90, 255], List[134, 130, 122, 255], List[132, 127, 117, 255], \
List[131, 128, 119, 255], List[130, 127, 117, 255], List[110, 139, 128, 255], \
List[113, 138, 128, 255], List[112, 120, 111, 255], List[77, 84, 73, 255], \
List[75, 78, 64, 255], List[76, 78, 67, 255], List[83, 89, 80, 255], List[69, \
75, 65, 255], List[61, 72, 63, 255], List[57, 79, 87, 255], List[43, 73, 93, \
255], List[49, 69, 94, 255], List[125, 93, 133, 255], List[121, 114, 109, \
255], List[76, 77, 77, 255], List[83, 90, 98, 255], List[116, 92, 73, 255], \
List[82, 91, 102, 255], List[76, 87, 102, 255], List[78, 88, 102, 255], \
List[79, 89, 101, 255], List[78, 88, 100, 255], List[78, 89, 100, 255], \
List[80, 90, 101, 255], List[80, 90, 102, 255], List[81, 90, 101, 255], \
List[85, 94, 104, 255], List[47, 60, 77, 255], List[34, 59, 59, 255], \
List[51, 69, 52, 255], List[91, 91, 69, 255]], List[List[60, 65, 71, 255], \
List[98, 81, 74, 255], List[136, 88, 72, 255], List[123, 98, 86, 255], \
List[117, 100, 89, 255], List[119, 102, 89, 255], List[112, 88, 80, 255], \
List[119, 93, 77, 255], List[135, 115, 91, 255], List[132, 115, 96, 255], \
List[124, 107, 84, 255], List[118, 106, 83, 255], List[141, 139, 135, 255], \
List[142, 138, 125, 255], List[136, 120, 100, 255], List[131, 116, 98, 255], \
List[133, 118, 100, 255], List[129, 114, 99, 255], List[132, 116, 99, 255], \
List[127, 112, 97, 255], List[140, 122, 105, 255], List[163, 139, 119, 255], \
List[164, 141, 120, 255], List[164, 140, 120, 255], List[146, 125, 107, 255], \
List[127, 114, 98, 255], List[129, 115, 100, 255], List[128, 115, 102, 255], \
List[129, 114, 98, 255], List[128, 115, 100, 255], List[124, 113, 97, 255], \
List[134, 127, 114, 255], List[132, 128, 117, 255], List[132, 128, 117, 255], \
List[137, 132, 122, 255], List[136, 133, 125, 255], List[144, 140, 132, 255], \
List[132, 129, 121, 255], List[87, 85, 81, 255], List[83, 80, 77, 255], \
List[103, 100, 96, 255], List[138, 134, 126, 255], List[137, 130, 123, 255], \
List[128, 136, 130, 255], List[94, 144, 143, 255], List[84, 128, 129, 255], \
List[82, 126, 117, 255], List[89, 125, 105, 255], List[99, 102, 94, 255], \
List[107, 105, 95, 255], List[112, 113, 100, 255], List[104, 103, 93, 255], \
List[97, 96, 84, 255], List[100, 100, 83, 255], List[84, 92, 76, 255], \
List[84, 81, 78, 255], List[129, 108, 107, 255], List[97, 84, 79, 255], \
List[44, 49, 50, 255], List[89, 89, 90, 255], List[106, 86, 70, 255], \
List[89, 94, 101, 255], List[92, 98, 104, 255], List[92, 97, 101, 255], \
List[94, 98, 102, 255], List[94, 99, 104, 255], List[90, 97, 103, 255], \
List[83, 91, 99, 255], List[78, 87, 98, 255], List[75, 86, 96, 255], List[80, \
91, 104, 255], List[57, 69, 77, 255], List[33, 52, 41, 255], List[73, 83, 60, \
255], List[132, 123, 82, 255]], List[List[69, 66, 62, 255], List[93, 76, 70, \
255], List[136, 95, 80, 255], List[121, 95, 84, 255], List[115, 94, 81, 255], \
List[117, 99, 87, 255], List[120, 85, 73, 255], List[138, 97, 73, 255], \
List[144, 119, 88, 255], List[139, 113, 85, 255], List[146, 119, 89, 255], \
List[141, 115, 85, 255], List[126, 112, 92, 255], List[128, 115, 99, 255], \
List[143, 118, 90, 255], List[139, 118, 93, 255], List[135, 113, 89, 255], \
List[135, 115, 92, 255], List[135, 114, 89, 255], List[136, 112, 87, 255], \
List[151, 128, 108, 255], List[158, 136, 115, 255], List[159, 136, 117, 255], \
List[158, 136, 115, 255], List[138, 119, 102, 255], List[120, 107, 93, 255], \
List[126, 112, 97, 255], List[122, 112, 97, 255], List[124, 113, 97, 255], \
List[122, 111, 98, 255], List[125, 110, 97, 255], List[136, 126, 113, 255], \
List[137, 132, 118, 255], List[137, 131, 117, 255], List[137, 130, 120, 255], \
List[140, 135, 127, 255], List[148, 145, 136, 255], List[115, 112, 106, 255], \
List[83, 81, 76, 255], List[57, 57, 56, 255], List[107, 103, 97, 255], \
List[137, 133, 123, 255], List[134, 126, 117, 255], List[113, 134, 129, 255], \
List[88, 136, 135, 255], List[81, 122, 126, 255], List[75, 123, 118, 255], \
List[68, 130, 109, 255], List[84, 115, 112, 255], List[88, 89, 88, 255], \
List[84, 88, 83, 255], List[94, 94, 89, 255], List[101, 100, 92, 255], \
List[105, 105, 96, 255], List[111, 109, 99, 255], List[42, 53, 54, 255], \
List[116, 35, 37, 255], List[159, 11, 18, 255], List[47, 29, 32, 255], \
List[53, 56, 52, 255], List[113, 86, 65, 255], List[110, 106, 99, 255], \
List[114, 112, 107, 255], List[112, 110, 104, 255], List[117, 114, 109, 255], \
List[119, 115, 108, 255], List[126, 120, 112, 255], List[129, 120, 108, 255], \
List[135, 123, 108, 255], List[126, 116, 105, 255], List[96, 94, 92, 255], \
List[44, 50, 60, 255], List[42, 50, 53, 255], List[123, 102, 80, 255], \
List[157, 126, 90, 255]], List[List[72, 72, 73, 255], List[100, 77, 70, 255], \
List[126, 88, 75, 255], List[114, 93, 82, 255], List[112, 90, 78, 255], \
List[114, 92, 81, 255], List[122, 95, 84, 255], List[121, 96, 80, 255], \
List[121, 100, 78, 255], List[134, 111, 81, 255], List[132, 107, 81, 255], \
List[134, 110, 82, 255], List[142, 115, 83, 255], List[140, 115, 84, 255], \
List[143, 116, 86, 255], List[142, 115, 85, 255], List[149, 120, 88, 255], \
List[146, 118, 87, 255], List[147, 118, 86, 255], List[146, 118, 89, 255], \
List[154, 130, 110, 255], List[160, 136, 114, 255], List[161, 136, 115, 255], \
List[154, 132, 111, 255], List[135, 114, 95, 255], List[128, 108, 86, 255], \
List[123, 110, 90, 255], List[155, 111, 90, 255], List[188, 112, 89, 255], \
List[141, 110, 88, 255], List[118, 104, 85, 255], List[133, 123, 108, 255], \
List[136, 129, 116, 255], List[137, 130, 118, 255], List[128, 122, 112, 255], \
List[86, 84, 81, 255], List[125, 122, 116, 255], List[129, 125, 118, 255], \
List[51, 50, 50, 255], List[77, 74, 72, 255], List[138, 132, 122, 255], \
List[130, 124, 114, 255], List[130, 124, 113, 255], List[105, 128, 127, 255], \
List[91, 123, 121, 255], List[81, 118, 121, 255], List[73, 116, 120, 255], \
List[68, 125, 115, 255], List[83, 112, 111, 255], List[76, 80, 81, 255], \
List[75, 81, 79, 255], List[76, 80, 81, 255], List[71, 77, 77, 255], List[67, \
73, 73, 255], List[66, 72, 76, 255], List[29, 41, 46, 255], List[27, 2, 12, \
255], List[139, 9, 18, 255], List[129, 12, 20, 255], List[42, 30, 32, 255], \
List[86, 67, 50, 255], List[97, 92, 86, 255], List[137, 126, 111, 255], \
List[147, 131, 109, 255], List[156, 136, 110, 255], List[159, 138, 113, 255], \
List[168, 145, 119, 255], List[171, 148, 121, 255], List[171, 147, 121, 255], \
List[169, 145, 119, 255], List[165, 143, 118, 255], List[127, 111, 95, 255], \
List[123, 114, 108, 255], List[114, 91, 80, 255], List[130, 99, 76, 255]], \
List[List[63, 70, 80, 255], List[96, 74, 67, 255], List[113, 76, 66, 255], \
List[112, 94, 83, 255], List[111, 92, 82, 255], List[114, 97, 87, 255], \
List[120, 79, 67, 255], List[134, 101, 79, 255], List[134, 110, 83, 255], \
List[134, 109, 81, 255], List[134, 109, 82, 255], List[125, 102, 80, 255], \
List[135, 110, 80, 255], List[132, 107, 74, 255], List[131, 110, 79, 255], \
List[134, 113, 86, 255], List[130, 104, 80, 255], List[129, 104, 79, 255], \
List[120, 99, 78, 255], List[134, 111, 90, 255], List[157, 131, 110, 255], \
List[158, 133, 112, 255], List[159, 133, 112, 255], List[150, 126, 108, 255], \
List[130, 107, 88, 255], List[121, 104, 78, 255], List[159, 108, 83, 255], \
List[215, 115, 89, 255], List[204, 108, 86, 255], List[201, 111, 86, 255], \
List[158, 111, 84, 255], List[124, 118, 102, 255], List[133, 129, 118, 255], \
List[134, 128, 116, 255], List[113, 109, 102, 255], List[100, 97, 93, 255], \
List[90, 89, 86, 255], List[134, 131, 123, 255], List[72, 69, 67, 255], \
List[117, 112, 105, 255], List[131, 125, 116, 255], List[128, 121, 110, 255], \
List[120, 121, 115, 255], List[98, 123, 130, 255], List[90, 112, 119, 255], \
List[81, 111, 116, 255], List[72, 111, 117, 255], List[70, 120, 121, 255], \
List[65, 90, 92, 255], List[44, 48, 47, 255], List[57, 64, 60, 255], List[67, \
71, 69, 255], List[80, 81, 79, 255], List[89, 90, 84, 255], List[94, 89, 82, \
255], List[111, 93, 81, 255], List[61, 53, 48, 255], List[66, 31, 31, 255], \
List[140, 30, 31, 255], List[108, 30, 30, 255], List[98, 77, 60, 255], \
List[114, 106, 86, 255], List[130, 113, 103, 255], List[141, 120, 115, 255], \
List[147, 127, 115, 255], List[152, 131, 119, 255], List[154, 133, 117, 255], \
List[155, 133, 116, 255], List[158, 137, 117, 255], List[160, 138, 116, 255], \
List[163, 141, 118, 255], List[169, 146, 118, 255], List[162, 142, 114, 255], \
List[148, 132, 108, 255], List[133, 116, 94, 255]], List[List[57, 64, 81, \
255], List[94, 78, 70, 255], List[99, 85, 79, 255], List[104, 88, 80, 255], \
List[106, 90, 81, 255], List[108, 91, 82, 255], List[105, 85, 77, 255], \
List[125, 105, 87, 255], List[127, 105, 82, 255], List[129, 108, 85, 255], \
List[138, 113, 86, 255], List[146, 114, 81, 255], List[138, 123, 103, 255], \
List[137, 133, 125, 255], List[145, 112, 85, 255], List[149, 110, 74, 255], \
List[143, 111, 77, 255], List[131, 109, 82, 255], List[124, 105, 84, 255], \
List[140, 117, 100, 255], List[159, 132, 110, 255], List[161, 132, 110, 255], \
List[158, 131, 109, 255], List[148, 121, 103, 255], List[113, 97, 78, 255], \
List[146, 103, 75, 255], List[205, 110, 85, 255], List[190, 104, 82, 255], \
List[210, 115, 90, 255], List[215, 115, 90, 255], List[181, 102, 81, 255], \
List[154, 124, 108, 255], List[125, 128, 120, 255], List[131, 126, 116, 255], \
List[122, 117, 108, 255], List[94, 93, 89, 255], List[99, 98, 93, 255], \
List[122, 119, 113, 255], List[120, 116, 109, 255], List[127, 122, 113, 255], \
List[125, 120, 112, 255], List[126, 118, 107, 255], List[110, 123, 118, 255], \
List[91, 126, 129, 255], List[86, 114, 116, 255], List[79, 109, 114, 255], \
List[72, 111, 110, 255], List[70, 112, 117, 255], List[85, 90, 89, 255], \
List[96, 86, 73, 255], List[109, 99, 85, 255], List[121, 107, 91, 255], \
List[135, 118, 98, 255], List[146, 127, 101, 255], List[148, 129, 105, 255], \
List[145, 122, 100, 255], List[146, 122, 101, 255], List[90, 80, 68, 255], \
List[107, 75, 64, 255], List[109, 59, 49, 255], List[102, 80, 61, 255], \
List[115, 98, 98, 255], List[110, 78, 127, 255], List[120, 93, 141, 255], \
List[109, 87, 135, 255], List[107, 84, 134, 255], List[109, 82, 137, 255], \
List[113, 82, 135, 255], List[116, 81, 131, 255], List[118, 80, 133, 255], \
List[123, 84, 128, 255], List[129, 86, 125, 255], List[139, 91, 132, 255], \
List[140, 93, 134, 255], List[140, 95, 134, 255]], List[List[64, 65, 75, \
255], List[88, 74, 65, 255], List[93, 79, 72, 255], List[109, 91, 81, 255], \
List[104, 90, 81, 255], List[112, 92, 82, 255], List[97, 83, 76, 255], \
List[103, 91, 81, 255], List[116, 102, 88, 255], List[118, 104, 90, 255], \
List[124, 106, 89, 255], List[128, 108, 87, 255], List[132, 92, 67, 255], \
List[127, 109, 102, 255], List[128, 137, 144, 255], List[145, 134, 127, 255], \
List[162, 123, 95, 255], List[163, 111, 71, 255], List[154, 108, 72, 255], \
List[145, 119, 97, 255], List[141, 125, 110, 255], List[143, 128, 114, 255], \
List[145, 126, 112, 255], List[136, 116, 101, 255], List[117, 102, 84, 255], \
List[134, 99, 81, 255], List[199, 108, 86, 255], List[207, 113, 88, 255], \
List[210, 114, 88, 255], List[130, 79, 64, 255], List[50, 39, 38, 255], \
List[95, 71, 63, 255], List[156, 123, 106, 255], List[130, 127, 116, 255], \
List[125, 120, 108, 255], List[87, 84, 80, 255], List[82, 81, 78, 255], \
List[91, 89, 85, 255], List[118, 114, 106, 255], List[124, 118, 108, 255], \
List[122, 118, 107, 255], List[122, 116, 105, 255], List[98, 125, 123, 255], \
List[83, 121, 121, 255], List[79, 113, 111, 255], List[72, 111, 113, 255], \
List[72, 108, 104, 255], List[69, 102, 110, 255], List[117, 106, 94, 255], \
List[129, 114, 96, 255], List[125, 112, 96, 255], List[129, 115, 99, 255], \
List[132, 117, 98, 255], List[134, 118, 96, 255], List[138, 121, 101, 255], \
List[140, 123, 103, 255], List[144, 127, 107, 255], List[146, 128, 104, 255], \
List[137, 121, 101, 255], List[96, 85, 74, 255], List[81, 72, 61, 255], \
List[107, 79, 115, 255], List[114, 76, 131, 255], List[122, 96, 141, 255], \
List[111, 88, 139, 255], List[112, 82, 136, 255], List[112, 74, 134, 255], \
List[111, 72, 138, 255], List[110, 69, 141, 255], List[109, 68, 141, 255], \
List[118, 68, 138, 255], List[125, 67, 138, 255], List[129, 70, 143, 255], \
List[124, 68, 144, 255], List[122, 67, 142, 255]], List[List[75, 69, 75, \
255], List[92, 77, 76, 255], List[95, 81, 78, 255], List[96, 82, 79, 255], \
List[98, 86, 82, 255], List[103, 87, 80, 255], List[97, 82, 76, 255], \
List[97, 88, 79, 255], List[114, 102, 91, 255], List[114, 102, 90, 255], \
List[118, 105, 92, 255], List[122, 105, 89, 255], List[122, 73, 50, 255], \
List[119, 62, 35, 255], List[134, 80, 50, 255], List[127, 101, 84, 255], \
List[125, 117, 112, 255], List[142, 119, 109, 255], List[160, 119, 95, 255], \
List[170, 116, 79, 255], List[169, 118, 75, 255], List[151, 120, 86, 255], \
List[127, 118, 100, 255], List[102, 106, 101, 255], List[99, 102, 103, 255], \
List[99, 107, 106, 255], List[115, 90, 82, 255], List[195, 100, 75, 255], \
List[139, 83, 66, 255], List[52, 46, 40, 255], List[46, 43, 39, 255], \
List[52, 54, 47, 255], List[81, 58, 51, 255], List[162, 122, 107, 255], \
List[127, 126, 116, 255], List[77, 76, 71, 255], List[57, 55, 54, 255], \
List[96, 92, 86, 255], List[123, 119, 109, 255], List[120, 115, 106, 255], \
List[120, 113, 102, 255], List[115, 114, 105, 255], List[90, 121, 127, 255], \
List[81, 111, 117, 255], List[73, 110, 111, 255], List[62, 106, 109, 255], \
List[67, 96, 104, 255], List[76, 97, 102, 255], List[111, 101, 90, 255], \
List[111, 102, 90, 255], List[114, 104, 92, 255], List[118, 108, 95, 255], \
List[125, 112, 98, 255], List[129, 118, 102, 255], List[130, 112, 95, 255], \
List[128, 104, 86, 255], List[127, 105, 89, 255], List[123, 103, 86, 255], \
List[112, 92, 77, 255], List[85, 71, 61, 255], List[93, 86, 76, 255], \
List[105, 76, 109, 255], List[117, 78, 128, 255], List[125, 89, 136, 255], \
List[114, 86, 136, 255], List[116, 82, 132, 255], List[115, 73, 131, 255], \
List[114, 69, 138, 255], List[111, 70, 140, 255], List[116, 72, 139, 255], \
List[124, 71, 139, 255], List[127, 73, 140, 255], List[128, 73, 140, 255], \
List[120, 73, 141, 255], List[120, 70, 139, 255]], List[List[90, 81, 70, \
255], List[78, 74, 70, 255], List[73, 68, 72, 255], List[73, 69, 71, 255], \
List[78, 73, 69, 255], List[81, 75, 67, 255], List[72, 71, 67, 255], List[82, \
76, 71, 255], List[105, 97, 85, 255], List[107, 99, 85, 255], List[115, 107, \
97, 255], List[122, 104, 95, 255], List[119, 68, 45, 255], List[118, 72, 52, \
255], List[122, 72, 50, 255], List[137, 76, 45, 255], List[137, 77, 44, 255], \
List[108, 68, 53, 255], List[106, 80, 70, 255], List[127, 100, 88, 255], \
List[144, 98, 76, 255], List[167, 101, 59, 255], List[186, 118, 66, 255], \
List[184, 129, 78, 255], List[153, 121, 87, 255], List[148, 140, 128, 255], \
List[140, 145, 141, 255], List[139, 111, 101, 255], List[97, 64, 54, 255], \
List[70, 67, 57, 255], List[51, 48, 45, 255], List[52, 48, 44, 255], List[98, \
96, 82, 255], List[127, 95, 79, 255], List[172, 122, 105, 255], List[122, \
122, 113, 255], List[119, 113, 104, 255], List[122, 118, 108, 255], List[120, \
115, 106, 255], List[118, 113, 106, 255], List[120, 112, 102, 255], List[106, \
113, 110, 255], List[84, 114, 124, 255], List[78, 102, 109, 255], List[69, \
99, 106, 255], List[59, 97, 108, 255], List[62, 87, 101, 255], List[86, 94, \
92, 255], List[110, 99, 87, 255], List[107, 98, 88, 255], List[110, 101, 89, \
255], List[115, 105, 93, 255], List[118, 108, 95, 255], List[122, 112, 98, \
255], List[127, 117, 102, 255], List[129, 118, 103, 255], List[130, 120, 104, \
255], List[130, 120, 105, 255], List[112, 102, 88, 255], List[105, 94, 79, \
255], List[107, 96, 82, 255], List[99, 70, 101, 255], List[125, 76, 124, \
255], List[134, 84, 129, 255], List[121, 86, 128, 255], List[123, 84, 131, \
255], List[119, 78, 133, 255], List[117, 73, 136, 255], List[120, 72, 131, \
255], List[125, 74, 132, 255], List[127, 76, 138, 255], List[126, 77, 140, \
255], List[122, 75, 141, 255], List[118, 75, 141, 255], List[116, 71, 138, \
255]], List[List[75, 81, 70, 255], List[76, 75, 66, 255], List[73, 69, 67, \
255], List[72, 69, 65, 255], List[72, 73, 63, 255], List[72, 75, 68, 255], \
List[62, 67, 66, 255], List[73, 73, 71, 255], List[107, 97, 86, 255], \
List[105, 97, 83, 255], List[105, 104, 96, 255], List[117, 92, 83, 255], \
List[112, 64, 44, 255], List[117, 73, 53, 255], List[120, 71, 51, 255], \
List[126, 75, 53, 255], List[133, 83, 59, 255], List[115, 71, 54, 255], \
List[95, 57, 44, 255], List[117, 70, 49, 255], List[99, 64, 53, 255], \
List[111, 69, 52, 255], List[120, 70, 49, 255], List[129, 76, 50, 255], \
List[153, 92, 53, 255], List[141, 91, 57, 255], List[127, 113, 102, 255], \
List[137, 140, 133, 255], List[143, 119, 108, 255], List[91, 69, 58, 255], \
List[76, 75, 64, 255], List[116, 106, 89, 255], List[153, 139, 115, 255], \
List[78, 82, 75, 255], List[165, 97, 79, 255], List[168, 121, 104, 255], \
List[112, 116, 109, 255], List[120, 115, 108, 255], List[116, 112, 106, 255], \
List[115, 112, 106, 255], List[116, 109, 100, 255], List[94, 111, 113, 255], \
List[79, 107, 116, 255], List[71, 95, 100, 255], List[63, 92, 96, 255], \
List[58, 92, 102, 255], List[62, 82, 91, 255], List[96, 93, 85, 255], \
List[107, 94, 80, 255], List[104, 96, 85, 255], List[107, 97, 85, 255], \
List[111, 102, 90, 255], List[117, 106, 92, 255], List[120, 110, 96, 255], \
List[124, 113, 98, 255], List[127, 115, 99, 255], List[128, 117, 102, 255], \
List[126, 116, 101, 255], List[105, 96, 82, 255], List[107, 96, 79, 255], \
List[105, 91, 79, 255], List[100, 67, 98, 255], List[126, 76, 122, 255], \
List[136, 85, 127, 255], List[127, 84, 126, 255], List[128, 81, 124, 255], \
List[124, 78, 133, 255], List[122, 79, 136, 255], List[126, 77, 132, 255], \
List[132, 78, 135, 255], List[124, 76, 138, 255], List[119, 79, 137, 255], \
List[117, 84, 137, 255], List[114, 78, 136, 255], List[113, 74, 135, 255]], \
List[List[62, 83, 78, 255], List[64, 76, 72, 255], List[67, 71, 67, 255], \
List[64, 72, 68, 255], List[59, 76, 71, 255], List[60, 76, 74, 255], List[61, \
72, 68, 255], List[75, 77, 69, 255], List[107, 95, 85, 255], List[109, 98, \
86, 255], List[113, 101, 91, 255], List[123, 85, 66, 255], List[120, 74, 52, \
255], List[123, 77, 54, 255], List[127, 83, 60, 255], List[132, 80, 55, 255], \
List[102, 59, 47, 255], List[112, 69, 52, 255], List[89, 57, 49, 255], \
List[107, 66, 52, 255], List[84, 51, 46, 255], List[110, 67, 50, 255], \
List[112, 68, 48, 255], List[99, 63, 49, 255], List[83, 50, 41, 255], \
List[96, 63, 51, 255], List[146, 148, 148, 255], List[145, 146, 149, 255], \
List[138, 142, 143, 255], List[129, 105, 99, 255], List[125, 95, 78, 255], \
List[134, 129, 108, 255], List[87, 92, 85, 255], List[116, 86, 78, 255], \
List[194, 109, 86, 255], List[198, 111, 88, 255], List[162, 118, 102, 255], \
List[113, 111, 105, 255], List[115, 109, 104, 255], List[114, 109, 102, 255], \
List[110, 107, 100, 255], List[87, 103, 111, 255], List[77, 94, 103, 255], \
List[68, 86, 94, 255], List[56, 86, 89, 255], List[53, 81, 93, 255], List[67, \
82, 87, 255], List[106, 97, 86, 255], List[102, 89, 75, 255], List[102, 91, \
80, 255], List[106, 94, 82, 255], List[109, 98, 85, 255], List[115, 101, 84, \
255], List[119, 105, 88, 255], List[123, 110, 94, 255], List[124, 111, 94, \
255], List[127, 114, 99, 255], List[121, 108, 90, 255], List[102, 93, 80, \
255], List[98, 90, 76, 255], List[99, 87, 78, 255], List[102, 64, 98, 255], \
List[126, 77, 120, 255], List[138, 84, 123, 255], List[132, 85, 119, 255], \
List[130, 85, 121, 255], List[127, 80, 131, 255], List[128, 79, 134, 255], \
List[125, 81, 135, 255], List[127, 76, 138, 255], List[121, 74, 139, 255], \
List[116, 80, 137, 255], List[115, 82, 135, 255], List[113, 77, 136, 255], \
List[113, 76, 135, 255]], List[List[70, 86, 81, 255], List[65, 82, 80, 255], \
List[68, 79, 75, 255], List[62, 78, 77, 255], List[63, 80, 76, 255], List[68, \
78, 70, 255], List[62, 73, 61, 255], List[80, 78, 64, 255], List[110, 94, 81, \
255], List[108, 95, 82, 255], List[112, 106, 97, 255], List[115, 104, 99, \
255], List[118, 88, 75, 255], List[119, 96, 85, 255], List[132, 80, 52, 255], \
List[125, 82, 62, 255], List[94, 77, 76, 255], List[97, 55, 43, 255], \
List[88, 51, 43, 255], List[100, 103, 110, 255], List[79, 78, 87, 255], \
List[103, 62, 47, 255], List[121, 79, 56, 255], List[107, 67, 50, 255], \
List[103, 63, 45, 255], List[98, 77, 71, 255], List[91, 106, 125, 255], \
List[109, 119, 136, 255], List[120, 133, 148, 255], List[140, 150, 156, 255], \
List[156, 125, 111, 255], List[133, 90, 75, 255], List[132, 94, 83, 255], \
List[205, 113, 88, 255], List[206, 112, 87, 255], List[215, 113, 86, 255], \
List[166, 104, 87, 255], List[109, 109, 104, 255], List[112, 107, 102, 255], \
List[112, 108, 100, 255], List[105, 103, 100, 255], List[88, 93, 104, 255], \
List[77, 84, 91, 255], List[71, 75, 86, 255], List[56, 72, 81, 255], List[48, \
73, 82, 255], List[80, 88, 87, 255], List[109, 100, 90, 255], List[98, 87, \
74, 255], List[101, 90, 79, 255], List[104, 92, 80, 255], List[107, 96, 82, \
255], List[114, 100, 83, 255], List[118, 104, 87, 255], List[120, 106, 91, \
255], List[122, 108, 92, 255], List[126, 111, 93, 255], List[115, 101, 84, \
255], List[95, 88, 78, 255], List[98, 92, 78, 255], List[96, 85, 81, 255], \
List[100, 61, 99, 255], List[130, 74, 116, 255], List[138, 76, 120, 255], \
List[130, 79, 124, 255], List[127, 82, 128, 255], List[127, 82, 128, 255], \
List[129, 84, 129, 255], List[125, 82, 129, 255], List[123, 78, 133, 255], \
List[117, 79, 136, 255], List[111, 81, 135, 255], List[113, 76, 135, 255], \
List[116, 74, 133, 255], List[114, 78, 131, 255]], List[List[76, 88, 72, \
255], List[70, 87, 77, 255], List[64, 80, 77, 255], List[68, 83, 75, 255], \
List[70, 81, 67, 255], List[66, 72, 60, 255], List[58, 68, 59, 255], List[79, \
78, 64, 255], List[117, 95, 75, 255], List[117, 92, 69, 255], List[97, 129, \
141, 255], List[81, 147, 181, 255], List[86, 146, 175, 255], List[100, 130, \
144, 255], List[117, 87, 75, 255], List[97, 142, 161, 255], List[101, 148, \
166, 255], List[94, 97, 100, 255], List[91, 111, 122, 255], List[99, 147, \
166, 255], List[95, 144, 165, 255], List[102, 100, 100, 255], List[109, 75, \
61, 255], List[93, 96, 99, 255], List[95, 83, 77, 255], List[72, 81, 95, \
255], List[62, 71, 93, 255], List[67, 78, 99, 255], List[72, 84, 104, 255], \
List[143, 141, 138, 255], List[135, 136, 128, 255], List[128, 100, 90, 255], \
List[175, 92, 72, 255], List[205, 112, 86, 255], List[211, 112, 85, 255], \
List[159, 96, 78, 255], List[102, 102, 98, 255], List[112, 109, 105, 255], \
List[109, 106, 102, 255], List[109, 106, 99, 255], List[100, 96, 96, 255], \
List[88, 88, 90, 255], List[79, 80, 81, 255], List[74, 69, 78, 255], List[56, \
65, 80, 255], List[49, 64, 77, 255], List[94, 94, 92, 255], List[105, 97, 89, \
255], List[96, 84, 74, 255], List[99, 87, 77, 255], List[102, 89, 77, 255], \
List[106, 94, 83, 255], List[111, 98, 83, 255], List[115, 102, 87, 255], \
List[120, 105, 90, 255], List[122, 107, 91, 255], List[124, 109, 91, 255], \
List[107, 96, 82, 255], List[92, 84, 74, 255], List[96, 88, 74, 255], \
List[92, 80, 79, 255], List[97, 59, 98, 255], List[126, 69, 124, 255], \
List[133, 71, 132, 255], List[128, 72, 133, 255], List[128, 76, 127, 255], \
List[131, 80, 120, 255], List[130, 82, 123, 255], List[127, 80, 126, 255], \
List[122, 81, 128, 255], List[113, 83, 128, 255], List[111, 86, 126, 255], \
List[117, 80, 123, 255], List[119, 76, 123, 255], List[118, 77, 126, 255]], \
List[List[119, 113, 103, 255], List[116, 111, 101, 255], List[111, 107, 100, \
255], List[109, 105, 97, 255], List[105, 101, 93, 255], List[102, 96, 89, \
255], List[97, 94, 88, 255], List[94, 91, 86, 255], List[109, 92, 78, 255], \
List[117, 96, 74, 255], List[74, 141, 173, 255], List[61, 149, 197, 255], \
List[69, 150, 190, 255], List[76, 149, 183, 255], List[79, 149, 181, 255], \
List[78, 153, 187, 255], List[83, 147, 175, 255], List[84, 149, 177, 255], \
List[84, 147, 175, 255], List[82, 140, 168, 255], List[79, 142, 171, 255], \
List[80, 132, 157, 255], List[80, 117, 135, 255], List[66, 131, 162, 255], \
List[63, 120, 147, 255], List[54, 71, 97, 255], List[53, 62, 86, 255], \
List[52, 64, 91, 255], List[112, 117, 124, 255], List[154, 149, 138, 255], \
List[125, 120, 114, 255], List[131, 134, 126, 255], List[127, 112, 103, 255], \
List[175, 96, 75, 255], List[163, 99, 81, 255], List[121, 121, 115, 255], \
List[112, 110, 104, 255], List[101, 98, 94, 255], List[102, 99, 96, 255], \
List[102, 99, 94, 255], List[98, 88, 94, 255], List[89, 82, 87, 255], \
List[73, 69, 73, 255], List[68, 58, 74, 255], List[52, 60, 79, 255], List[55, \
61, 79, 255], List[103, 100, 96, 255], List[100, 96, 88, 255], List[92, 80, \
71, 255], List[95, 84, 75, 255], List[97, 86, 76, 255], List[103, 91, 80, \
255], List[108, 95, 80, 255], List[112, 98, 85, 255], List[115, 100, 85, \
255], List[118, 104, 88, 255], List[120, 106, 90, 255], List[97, 88, 75, \
255], List[91, 83, 72, 255], List[93, 85, 70, 255], List[91, 77, 75, 255], \
List[97, 60, 97, 255], List[122, 68, 129, 255], List[129, 71, 135, 255], \
List[127, 73, 128, 255], List[126, 77, 122, 255], List[131, 82, 117, 255], \
List[133, 83, 116, 255], List[128, 80, 118, 255], List[127, 83, 120, 255], \
List[122, 86, 119, 255], List[119, 85, 119, 255], List[124, 82, 120, 255], \
List[127, 79, 122, 255], List[125, 73, 124, 255]], List[List[147, 136, 127, \
255], List[143, 133, 125, 255], List[142, 132, 123, 255], List[141, 129, 122, \
255], List[139, 127, 123, 255], List[138, 126, 122, 255], List[137, 124, 118, \
255], List[131, 120, 112, 255], List[123, 113, 98, 255], List[112, 110, 91, \
255], List[51, 138, 182, 255], List[47, 137, 188, 255], List[55, 140, 184, \
255], List[59, 145, 186, 255], List[62, 145, 184, 255], List[64, 142, 178, \
255], List[68, 140, 175, 255], List[67, 139, 173, 255], List[67, 137, 172, \
255], List[66, 137, 171, 255], List[65, 136, 167, 255], List[62, 134, 167, \
255], List[57, 132, 166, 255], List[50, 122, 160, 255], List[51, 108, 141, \
255], List[67, 74, 93, 255], List[62, 71, 92, 255], List[71, 81, 101, 255], \
List[155, 152, 145, 255], List[134, 131, 122, 255], List[129, 126, 119, 255], \
List[137, 131, 123, 255], List[140, 140, 132, 255], List[133, 123, 114, 255], \
List[132, 127, 119, 255], List[139, 137, 129, 255], List[133, 129, 121, 255], \
List[129, 125, 120, 255], List[121, 117, 111, 255], List[102, 99, 100, 255], \
List[77, 78, 98, 255], List[68, 70, 85, 255], List[90, 89, 95, 255], List[79, \
72, 84, 255], List[47, 53, 72, 255], List[65, 68, 80, 255], List[106, 103, \
96, 255], List[98, 93, 88, 255], List[91, 81, 72, 255], List[93, 82, 73, \
255], List[96, 85, 75, 255], List[100, 88, 78, 255], List[105, 91, 77, 255], \
List[109, 95, 81, 255], List[114, 100, 86, 255], List[116, 101, 87, 255], \
List[115, 100, 85, 255], List[93, 85, 73, 255], List[91, 82, 72, 255], \
List[91, 84, 71, 255], List[90, 76, 77, 255], List[99, 58, 97, 255], \
List[126, 70, 124, 255], List[130, 72, 126, 255], List[125, 75, 122, 255], \
List[127, 81, 115, 255], List[131, 83, 114, 255], List[133, 76, 115, 255], \
List[130, 78, 120, 255], List[129, 81, 125, 255], List[124, 79, 117, 255], \
List[121, 80, 113, 255], List[120, 78, 115, 255], List[126, 76, 116, 255], \
List[131, 72, 117, 255]], List[List[155, 141, 134, 255], List[157, 141, 134, \
255], List[156, 142, 134, 255], List[154, 142, 129, 255], List[148, 136, 119, \
255], List[139, 129, 105, 255], List[129, 120, 92, 255], List[121, 113, 81, \
255], List[116, 110, 78, 255], List[117, 108, 76, 255], List[58, 129, 164, \
255], List[34, 133, 190, 255], List[42, 134, 183, 255], List[44, 136, 183, \
255], List[46, 136, 181, 255], List[49, 134, 178, 255], List[51, 132, 176, \
255], List[51, 132, 174, 255], List[51, 131, 171, 255], List[47, 128, 168, \
255], List[39, 123, 166, 255], List[38, 121, 162, 255], List[35, 115, 157, \
255], List[28, 110, 156, 255], List[54, 94, 123, 255], List[79, 82, 97, 255], \
List[66, 77, 94, 255], List[129, 131, 134, 255], List[159, 154, 143, 255], \
List[128, 125, 118, 255], List[136, 133, 125, 255], List[138, 134, 126, 255], \
List[140, 135, 127, 255], List[142, 139, 132, 255], List[143, 140, 131, 255], \
List[119, 115, 108, 255], List[93, 91, 87, 255], List[107, 104, 99, 255], \
List[121, 118, 111, 255], List[131, 128, 123, 255], List[130, 128, 132, 255], \
List[110, 109, 117, 255], List[133, 129, 123, 255], List[140, 137, 128, 255], \
List[130, 127, 124, 255], List[107, 105, 102, 255], List[100, 97, 92, 255], \
List[97, 94, 89, 255], List[88, 79, 72, 255], List[92, 82, 72, 255], List[95, \
85, 75, 255], List[99, 88, 77, 255], List[103, 91, 78, 255], List[106, 93, \
81, 255], List[109, 95, 82, 255], List[114, 99, 85, 255], List[108, 95, 80, \
255], List[88, 81, 70, 255], List[89, 81, 71, 255], List[89, 83, 69, 255], \
List[89, 75, 76, 255], List[101, 60, 96, 255], List[127, 74, 124, 255], \
List[128, 79, 126, 255], List[128, 80, 121, 255], List[130, 81, 117, 255], \
List[128, 76, 117, 255], List[129, 70, 119, 255], List[132, 72, 122, 255], \
List[133, 75, 123, 255], List[124, 75, 114, 255], List[123, 77, 110, 255], \
List[128, 77, 116, 255], List[130, 81, 116, 255], List[131, 81, 118, 255]], \
List[List[158, 146, 139, 255], List[150, 138, 127, 255], List[140, 129, 107, \
255], List[130, 121, 90, 255], List[120, 113, 80, 255], List[114, 108, 76, \
255], List[112, 105, 76, 255], List[112, 106, 76, 255], List[113, 108, 80, \
255], List[119, 104, 70, 255], List[79, 125, 140, 255], List[46, 140, 192, \
255], List[51, 137, 180, 255], List[50, 136, 181, 255], List[48, 136, 179, \
255], List[49, 132, 177, 255], List[48, 130, 174, 255], List[49, 130, 172, \
255], List[43, 127, 168, 255], List[56, 131, 168, 255], List[81, 140, 170, \
255], List[68, 135, 167, 255], List[58, 127, 164, 255], List[51, 120, 158, \
255], List[90, 108, 120, 255], List[86, 91, 101, 255], List[96, 102, 111, \
255], List[168, 164, 154, 255], List[138, 134, 127, 255], List[136, 133, 125, \
255], List[137, 134, 126, 255], List[139, 135, 127, 255], List[139, 135, 127, \
255], List[138, 134, 126, 255], List[134, 130, 123, 255], List[113, 110, 104, \
255], List[117, 114, 108, 255], List[118, 114, 108, 255], List[109, 106, 100, \
255], List[95, 89, 93, 255], List[89, 85, 86, 255], List[110, 107, 102, 255], \
List[140, 137, 129, 255], List[138, 136, 127, 255], List[146, 142, 134, 255], \
List[133, 128, 120, 255], List[98, 94, 89, 255], List[97, 93, 87, 255], \
List[86, 78, 70, 255], List[88, 79, 70, 255], List[91, 82, 73, 255], List[96, \
85, 73, 255], List[100, 88, 76, 255], List[104, 92, 80, 255], List[107, 94, \
80, 255], List[113, 99, 85, 255], List[100, 89, 76, 255], List[85, 78, 69, \
255], List[87, 80, 70, 255], List[87, 82, 69, 255], List[87, 72, 74, 255], \
List[101, 64, 95, 255], List[133, 86, 131, 255], List[129, 85, 131, 255], \
List[130, 83, 120, 255], List[129, 77, 114, 255], List[128, 73, 114, 255], \
List[129, 73, 114, 255], List[131, 74, 114, 255], List[131, 72, 115, 255], \
List[129, 77, 117, 255], List[130, 82, 118, 255], List[130, 82, 117, 255], \
List[131, 82, 119, 255], List[137, 83, 126, 255]], List[List[118, 110, 80, \
255], List[114, 108, 75, 255], List[110, 104, 70, 255], List[111, 105, 73, \
255], List[112, 105, 74, 255], List[112, 105, 75, 255], List[115, 107, 78, \
255], List[113, 105, 75, 255], List[108, 102, 75, 255], List[117, 104, 68, \
255], List[96, 120, 116, 255], List[63, 145, 188, 255], List[65, 146, 183, \
255], List[62, 148, 187, 255], List[62, 141, 176, 255], List[65, 136, 172, \
255], List[63, 134, 170, 255], List[63, 134, 169, 255], List[55, 133, 171, \
255], List[87, 132, 151, 255], List[140, 137, 130, 255], List[138, 139, 135, \
255], List[141, 142, 137, 255], List[143, 145, 140, 255], List[146, 143, 137, \
255], List[139, 135, 136, 255], List[172, 168, 161, 255], List[157, 153, 143, \
255], List[134, 132, 124, 255], List[140, 136, 128, 255], List[138, 134, 126, \
255], List[139, 134, 126, 255], List[138, 135, 127, 255], List[135, 131, 123, \
255], List[131, 128, 120, 255], List[113, 110, 104, 255], List[99, 96, 90, \
255], List[103, 100, 95, 255], List[111, 108, 104, 255], List[122, 117, 114, \
255], List[121, 115, 114, 255], List[120, 116, 113, 255], List[149, 145, 136, \
255], List[147, 143, 135, 255], List[149, 145, 137, 255], List[126, 122, 115, \
255], List[95, 92, 85, 255], List[96, 94, 88, 255], List[86, 79, 72, 255], \
List[87, 80, 70, 255], List[92, 83, 74, 255], List[97, 86, 73, 255], List[99, \
88, 75, 255], List[102, 90, 79, 255], List[105, 93, 80, 255], List[111, 98, \
84, 255], List[92, 83, 71, 255], List[82, 76, 67, 255], List[86, 78, 68, \
255], List[87, 81, 68, 255], List[84, 70, 73, 255], List[104, 63, 97, 255], \
List[137, 91, 131, 255], List[131, 88, 128, 255], List[122, 83, 115, 255], \
List[121, 74, 109, 255], List[108, 73, 105, 255], List[107, 83, 113, 255], \
List[124, 91, 114, 255], List[131, 91, 114, 255], List[133, 86, 114, 255], \
List[134, 82, 115, 255], List[136, 76, 120, 255], List[143, 67, 128, 255], \
List[144, 69, 131, 255]], List[List[106, 99, 70, 255], List[110, 104, 73, \
255], List[113, 106, 74, 255], List[110, 104, 74, 255], List[112, 107, 76, \
255], List[112, 105, 74, 255], List[113, 106, 76, 255], List[111, 104, 75, \
255], List[112, 105, 76, 255], List[113, 105, 72, 255], List[107, 108, 86, \
255], List[80, 150, 183, 255], List[84, 140, 166, 255], List[90, 125, 141, \
255], List[77, 145, 175, 255], List[79, 137, 164, 255], List[78, 143, 173, \
255], List[75, 138, 167, 255], List[73, 134, 162, 255], List[69, 134, 165, \
255], List[66, 116, 140, 255], List[66, 111, 133, 255], List[68, 105, 122, \
255], List[68, 82, 92, 255], List[81, 87, 73, 255], List[113, 121, 79, 255], \
List[119, 120, 104, 255], List[132, 127, 125, 255], List[145, 141, 131, 255], \
List[138, 134, 127, 255], List[139, 135, 127, 255], List[138, 135, 127, 255], \
List[136, 132, 124, 255], List[135, 132, 124, 255], List[120, 118, 110, 255], \
List[103, 100, 95, 255], List[119, 116, 109, 255], List[120, 117, 109, 255], \
List[111, 106, 104, 255], List[100, 92, 98, 255], List[88, 86, 84, 255], \
List[140, 138, 129, 255], List[159, 155, 146, 255], List[155, 151, 141, 255], \
List[152, 149, 139, 255], List[118, 115, 109, 255], List[98, 93, 87, 255], \
List[95, 91, 86, 255], List[74, 70, 67, 255], List[72, 67, 63, 255], List[78, \
72, 67, 255], List[83, 76, 68, 255], List[88, 80, 71, 255], List[93, 84, 75, \
255], List[98, 88, 77, 255], List[102, 92, 80, 255], List[87, 80, 70, 255], \
List[83, 78, 69, 255], List[85, 76, 67, 255], List[84, 77, 66, 255], List[82, \
65, 73, 255], List[106, 61, 99, 255], List[130, 88, 121, 255], List[130, 86, \
118, 255], List[124, 75, 112, 255], List[122, 69, 108, 255], List[97, 70, \
104, 255], List[86, 75, 117, 255], List[95, 81, 123, 255], List[109, 94, 128, \
255], List[125, 99, 137, 255], List[133, 99, 139, 255], List[135, 95, 135, \
255], List[138, 88, 133, 255], List[138, 82, 132, 255]], List[List[103, 96, \
67, 255], List[112, 105, 73, 255], List[111, 105, 72, 255], List[111, 104, \
72, 255], List[114, 109, 76, 255], List[110, 102, 72, 255], List[110, 103, \
75, 255], List[114, 107, 76, 255], List[113, 106, 75, 255], List[113, 106, \
75, 255], List[113, 101, 68, 255], List[99, 110, 110, 255], List[107, 84, 73, \
255], List[110, 63, 42, 255], List[94, 123, 134, 255], List[94, 136, 154, \
255], List[88, 107, 117, 255], List[87, 129, 146, 255], List[91, 142, 163, \
255], List[87, 135, 156, 255], List[99, 87, 81, 255], List[94, 87, 85, 255], \
List[91, 74, 68, 255], List[71, 71, 73, 255], List[65, 76, 55, 255], List[93, \
106, 51, 255], List[109, 122, 60, 255], List[92, 92, 77, 255], List[131, 127, \
125, 255], List[145, 141, 132, 255], List[138, 134, 126, 255], List[137, 134, \
125, 255], List[135, 132, 124, 255], List[127, 124, 116, 255], List[116, 114, \
107, 255], List[117, 114, 108, 255], List[116, 110, 106, 255], List[130, 128, \
121, 255], List[136, 134, 125, 255], List[131, 127, 120, 255], List[133, 129, \
121, 255], List[159, 155, 145, 255], List[163, 159, 149, 255], List[163, 159, \
149, 255], List[148, 144, 135, 255], List[95, 89, 79, 255], List[86, 78, 76, \
255], List[100, 92, 90, 255], List[94, 89, 88, 255], List[75, 74, 78, 255], \
List[60, 62, 66, 255], List[47, 48, 53, 255], List[40, 43, 49, 255], List[37, \
40, 48, 255], List[31, 35, 44, 255], List[35, 38, 45, 255], List[74, 67, 59, \
255], List[76, 70, 63, 255], List[80, 73, 67, 255], List[85, 82, 66, 255], \
List[77, 64, 70, 255], List[96, 64, 95, 255], List[127, 88, 120, 255], \
List[126, 81, 114, 255], List[123, 71, 109, 255], List[125, 67, 109, 255], \
List[97, 64, 107, 255], List[88, 66, 114, 255], List[88, 72, 115, 255], \
List[88, 77, 116, 255], List[93, 79, 126, 255], List[107, 89, 144, 255], \
List[118, 100, 155, 255], List[119, 104, 153, 255], List[121, 105, 153, \
255]], List[List[108, 100, 76, 255], List[108, 102, 68, 255], List[114, 107, \
74, 255], List[113, 107, 73, 255], List[111, 106, 74, 255], List[111, 104, \
73, 255], List[110, 102, 72, 255], List[112, 103, 72, 255], List[111, 104, \
73, 255], List[112, 103, 72, 255], List[111, 105, 72, 255], List[127, 100, \
79, 255], List[147, 103, 85, 255], List[139, 94, 73, 255], List[101, 113, \
124, 255], List[89, 98, 108, 255], List[76, 32, 21, 255], List[85, 79, 82, \
255], List[80, 103, 119, 255], List[86, 65, 59, 255], List[111, 69, 47, 255], \
List[95, 60, 45, 255], List[89, 59, 48, 255], List[102, 98, 96, 255], \
List[69, 77, 55, 255], List[50, 58, 36, 255], List[78, 86, 45, 255], \
List[106, 116, 54, 255], List[86, 89, 66, 255], List[129, 126, 120, 255], \
List[143, 139, 130, 255], List[134, 131, 123, 255], List[135, 132, 124, 255], \
List[130, 127, 119, 255], List[110, 107, 100, 255], List[121, 114, 107, 255], \
List[123, 119, 111, 255], List[137, 133, 125, 255], List[149, 151, 140, 255], \
List[147, 150, 138, 255], List[153, 150, 141, 255], List[172, 167, 157, 255], \
List[170, 166, 156, 255], List[167, 162, 153, 255], List[139, 136, 127, 255], \
List[129, 125, 107, 255], List[123, 122, 113, 255], List[133, 136, 131, 255], \
List[143, 144, 135, 255], List[156, 147, 128, 255], List[149, 138, 122, 255], \
List[145, 140, 124, 255], List[143, 135, 115, 255], List[135, 130, 115, 255], \
List[123, 123, 114, 255], List[114, 116, 111, 255], List[121, 116, 105, 255], \
List[113, 109, 96, 255], List[98, 91, 82, 255], List[83, 48, 90, 255], \
List[107, 47, 100, 255], List[126, 56, 111, 255], List[132, 85, 127, 255], \
List[115, 83, 113, 255], List[108, 72, 101, 255], List[109, 64, 99, 255], \
List[93, 69, 105, 255], List[87, 69, 115, 255], List[88, 71, 112, 255], \
List[90, 74, 112, 255], List[89, 74, 113, 255], List[91, 72, 117, 255], \
List[91, 74, 117, 255], List[91, 80, 115, 255], List[93, 82, 120, 255]], \
List[List[120, 112, 94, 255], List[105, 99, 65, 255], List[110, 105, 72, \
255], List[114, 101, 67, 255], List[112, 101, 68, 255], List[109, 105, 72, \
255], List[112, 110, 77, 255], List[108, 102, 72, 255], List[110, 102, 71, \
255], List[111, 103, 72, 255], List[106, 98, 65, 255], List[135, 126, 108, \
255], List[166, 150, 150, 255], List[173, 151, 147, 255], List[166, 150, 149, \
255], List[159, 136, 131, 255], List[130, 107, 103, 255], List[110, 95, 92, \
255], List[105, 84, 84, 255], List[121, 82, 70, 255], List[104, 67, 52, 255], \
List[82, 49, 38, 255], List[99, 75, 69, 255], List[136, 126, 120, 255], \
List[77, 80, 58, 255], List[69, 78, 51, 255], List[92, 93, 80, 255], \
List[123, 123, 98, 255], List[135, 135, 107, 255], List[87, 84, 83, 255], \
List[123, 119, 115, 255], List[143, 139, 130, 255], List[118, 115, 109, 255], \
List[97, 94, 90, 255], List[127, 122, 115, 255], List[136, 130, 122, 255], \
List[138, 134, 126, 255], List[140, 129, 122, 255], List[133, 81, 90, 255], \
List[136, 109, 113, 255], List[177, 176, 163, 255], List[175, 169, 159, 255], \
List[179, 175, 165, 255], List[156, 152, 142, 255], List[138, 136, 128, 255], \
List[149, 150, 141, 255], List[151, 150, 139, 255], List[150, 141, 125, 255], \
List[157, 147, 124, 255], List[160, 146, 119, 255], List[150, 144, 128, 255], \
List[144, 145, 135, 255], List[145, 145, 134, 255], List[146, 146, 133, 255], \
List[150, 150, 137, 255], List[153, 152, 140, 255], List[154, 150, 132, 255], \
List[161, 148, 121, 255], List[146, 132, 113, 255], List[66, 38, 112, 255], \
List[36, 14, 85, 255], List[84, 25, 93, 255], List[136, 32, 121, 255], \
List[140, 53, 123, 255], List[114, 68, 105, 255], List[100, 67, 89, 255], \
List[87, 74, 99, 255], List[88, 73, 117, 255], List[88, 76, 117, 255], \
List[90, 77, 114, 255], List[90, 73, 114, 255], List[92, 69, 116, 255], \
List[87, 69, 110, 255], List[86, 72, 110, 255], List[86, 71, 109, 255]], \
List[List[135, 123, 105, 255], List[101, 94, 60, 255], List[113, 109, 73, \
255], List[119, 79, 47, 255], List[124, 69, 38, 255], List[122, 78, 46, 255], \
List[118, 87, 55, 255], List[116, 97, 66, 255], List[113, 102, 71, 255], \
List[109, 103, 72, 255], List[103, 103, 70, 255], List[128, 119, 93, 255], \
List[183, 157, 149, 255], List[170, 150, 141, 255], List[163, 144, 138, 255], \
List[156, 141, 138, 255], List[166, 150, 146, 255], List[178, 155, 150, 255], \
List[158, 140, 136, 255], List[132, 116, 110, 255], List[97, 63, 51, 255], \
List[80, 44, 34, 255], List[118, 99, 93, 255], List[139, 128, 124, 255], \
List[117, 107, 101, 255], List[107, 103, 97, 255], List[104, 103, 95, 255], \
List[84, 85, 78, 255], List[76, 77, 69, 255], List[77, 83, 53, 255], List[78, \
79, 62, 255], List[117, 113, 111, 255], List[92, 91, 84, 255], List[86, 85, \
79, 255], List[94, 90, 86, 255], List[104, 98, 92, 255], List[119, 116, 108, \
255], List[129, 120, 117, 255], List[142, 117, 120, 255], List[173, 153, 150, \
255], List[180, 177, 166, 255], List[183, 178, 167, 255], List[176, 172, 161, \
255], List[144, 139, 130, 255], List[150, 145, 132, 255], List[153, 149, 133, \
255], List[154, 145, 122, 255], List[153, 142, 119, 255], List[149, 145, 127, \
255], List[141, 144, 134, 255], List[144, 146, 135, 255], List[142, 140, 125, \
255], List[147, 144, 129, 255], List[142, 141, 129, 255], List[144, 144, 133, \
255], List[153, 135, 109, 255], List[161, 143, 111, 255], List[144, 137, 122, \
255], List[136, 138, 130, 255], List[123, 125, 126, 255], List[53, 59, 91, \
255], List[6, 19, 79, 255], List[25, 17, 98, 255], List[79, 17, 119, 255], \
List[123, 26, 148, 255], List[128, 42, 128, 255], List[106, 70, 105, 255], \
List[93, 78, 114, 255], List[92, 75, 119, 255], List[89, 77, 119, 255], \
List[90, 77, 121, 255], List[91, 74, 119, 255], List[87, 74, 112, 255], \
List[87, 76, 110, 255], List[86, 74, 112, 255]], List[List[148, 132, 120, \
255], List[93, 88, 58, 255], List[106, 98, 66, 255], List[122, 73, 40, 255], \
List[123, 67, 34, 255], List[123, 63, 32, 255], List[125, 67, 34, 255], \
List[123, 69, 36, 255], List[139, 84, 47, 255], List[153, 96, 56, 255], \
List[142, 96, 58, 255], List[138, 102, 68, 255], List[161, 123, 103, 255], \
List[172, 140, 126, 255], List[181, 152, 142, 255], List[180, 151, 141, 255], \
List[168, 146, 139, 255], List[134, 121, 117, 255], List[125, 104, 98, 255], \
List[114, 95, 89, 255], List[97, 62, 48, 255], List[84, 52, 40, 255], \
List[122, 109, 104, 255], List[131, 121, 117, 255], List[131, 120, 117, 255], \
List[120, 110, 109, 255], List[85, 79, 74, 255], List[47, 55, 36, 255], \
List[49, 58, 31, 255], List[80, 88, 45, 255], List[76, 85, 41, 255], List[75, \
79, 52, 255], List[73, 81, 46, 255], List[93, 96, 68, 255], List[129, 123, \
117, 255], List[110, 106, 101, 255], List[104, 103, 96, 255], List[105, 98, \
96, 255], List[163, 147, 148, 255], List[194, 193, 179, 255], List[186, 179, \
170, 255], List[187, 183, 172, 255], List[155, 150, 141, 255], List[125, 124, \
117, 255], List[122, 121, 114, 255], List[129, 126, 123, 255], List[137, 140, \
134, 255], List[141, 142, 133, 255], List[145, 143, 132, 255], List[145, 144, \
133, 255], List[148, 148, 136, 255], List[155, 150, 133, 255], List[158, 149, \
126, 255], List[159, 148, 121, 255], List[153, 148, 129, 255], List[150, 143, \
126, 255], List[150, 150, 140, 255], List[142, 146, 140, 255], List[139, 141, \
135, 255], List[139, 138, 129, 255], List[114, 108, 95, 255], List[30, 29, \
79, 255], List[18, 18, 94, 255], List[23, 25, 71, 255], List[35, 23, 83, \
255], List[71, 25, 125, 255], List[91, 31, 120, 255], List[92, 47, 113, 255], \
List[91, 66, 113, 255], List[94, 72, 118, 255], List[93, 74, 118, 255], \
List[92, 76, 117, 255], List[87, 75, 117, 255], List[87, 78, 115, 255], \
List[87, 76, 117, 255]], List[List[156, 132, 123, 255], List[100, 95, 67, \
255], List[108, 91, 59, 255], List[122, 67, 35, 255], List[122, 67, 35, 255], \
List[123, 67, 35, 255], List[125, 72, 38, 255], List[122, 70, 37, 255], \
List[130, 72, 37, 255], List[160, 88, 44, 255], List[165, 91, 47, 255], \
List[165, 91, 48, 255], List[150, 81, 39, 255], List[140, 85, 54, 255], \
List[164, 139, 129, 255], List[158, 133, 124, 255], List[131, 110, 102, 255], \
List[114, 96, 90, 255], List[114, 96, 92, 255], List[118, 100, 92, 255], \
List[94, 56, 38, 255], List[99, 76, 63, 255], List[124, 114, 106, 255], \
List[129, 118, 108, 255], List[138, 125, 113, 255], List[142, 130, 117, 255], \
List[140, 127, 119, 255], List[114, 105, 99, 255], List[77, 78, 61, 255], \
List[76, 80, 48, 255], List[72, 79, 46, 255], List[71, 78, 43, 255], List[65, \
69, 37, 255], List[92, 91, 72, 255], List[159, 147, 144, 255], List[162, 150, \
144, 255], List[123, 125, 120, 255], List[107, 88, 93, 255], List[133, 131, \
122, 255], List[159, 165, 150, 255], List[189, 187, 174, 255], List[162, 158, \
149, 255], List[131, 127, 119, 255], List[91, 91, 84, 255], List[78, 71, 70, \
255], List[86, 86, 84, 255], List[87, 93, 89, 255], List[93, 99, 97, 255], \
List[98, 95, 94, 255], List[107, 107, 101, 255], List[110, 110, 102, 255], \
List[112, 112, 107, 255], List[114, 111, 106, 255], List[123, 119, 108, 255], \
List[132, 120, 111, 255], List[126, 114, 106, 255], List[124, 110, 102, 255], \
List[116, 104, 97, 255], List[101, 101, 96, 255], List[85, 86, 83, 255], \
List[57, 59, 57, 255], List[19, 23, 63, 255], List[22, 22, 89, 255], List[30, \
22, 78, 255], List[31, 24, 79, 255], List[31, 30, 93, 255], List[33, 28, 98, \
255], List[35, 19, 95, 255], List[69, 50, 105, 255], List[97, 75, 118, 255], \
List[93, 72, 115, 255], List[92, 74, 115, 255], List[92, 70, 115, 255], \
List[91, 70, 116, 255], List[91, 70, 116, 255]], List[List[144, 120, 114, \
255], List[106, 101, 77, 255], List[110, 78, 46, 255], List[124, 64, 32, \
255], List[123, 68, 36, 255], List[126, 68, 36, 255], List[126, 69, 35, 255], \
List[122, 68, 36, 255], List[127, 70, 37, 255], List[148, 82, 43, 255], \
List[151, 83, 46, 255], List[150, 82, 43, 255], List[146, 82, 42, 255], \
List[133, 71, 34, 255], List[132, 102, 90, 255], List[116, 104, 102, 255], \
List[111, 95, 88, 255], List[117, 102, 95, 255], List[117, 103, 96, 255], \
List[115, 100, 91, 255], List[116, 99, 86, 255], List[126, 118, 111, 255], \
List[133, 125, 118, 255], List[130, 122, 118, 255], List[130, 122, 116, 255], \
List[131, 120, 114, 255], List[135, 125, 118, 255], List[146, 135, 128, 255], \
List[141, 131, 123, 255], List[135, 127, 120, 255], List[145, 136, 130, 255], \
List[152, 142, 135, 255], List[165, 153, 148, 255], List[164, 151, 143, 255], \
List[126, 116, 103, 255], List[124, 112, 101, 255], List[74, 80, 70, 255], \
List[106, 37, 65, 255], List[134, 24, 72, 255], List[101, 45, 70, 255], \
List[103, 86, 89, 255], List[136, 133, 125, 255], List[97, 96, 91, 255], \
List[82, 82, 77, 255], List[85, 82, 80, 255], List[87, 88, 86, 255], List[80, \
83, 79, 255], List[88, 91, 87, 255], List[83, 71, 70, 255], List[90, 90, 87, \
255], List[93, 93, 88, 255], List[94, 93, 89, 255], List[95, 96, 92, 255], \
List[98, 98, 93, 255], List[109, 92, 86, 255], List[105, 82, 75, 255], \
List[109, 88, 83, 255], List[95, 83, 78, 255], List[87, 88, 84, 255], \
List[77, 79, 75, 255], List[56, 56, 57, 255], List[16, 22, 59, 255], List[16, \
22, 74, 255], List[25, 21, 78, 255], List[35, 25, 89, 255], List[37, 28, 90, \
255], List[45, 23, 94, 255], List[41, 21, 94, 255], List[85, 60, 109, 255], \
List[101, 77, 116, 255], List[105, 80, 105, 255], List[97, 75, 107, 255], \
List[89, 69, 115, 255], List[91, 71, 114, 255], List[90, 70, 113, 255]], \
List[List[109, 92, 89, 255], List[95, 88, 73, 255], List[107, 81, 51, 255], \
List[124, 68, 37, 255], List[124, 67, 35, 255], List[125, 69, 35, 255], \
List[125, 68, 35, 255], List[121, 67, 36, 255], List[124, 69, 35, 255], \
List[135, 76, 40, 255], List[137, 76, 41, 255], List[141, 79, 42, 255], \
List[131, 72, 38, 255], List[122, 63, 30, 255], List[112, 85, 72, 255], \
List[113, 99, 95, 255], List[116, 100, 93, 255], List[116, 100, 94, 255], \
List[115, 97, 94, 255], List[121, 107, 102, 255], List[140, 132, 126, 255], \
List[144, 133, 125, 255], List[130, 116, 105, 255], List[137, 123, 111, 255], \
List[157, 145, 132, 255], List[184, 170, 155, 255], List[204, 191, 174, 255], \
List[185, 176, 156, 255], List[180, 173, 153, 255], List[211, 201, 181, 255], \
List[231, 220, 200, 255], List[229, 219, 199, 255], List[198, 189, 167, 255], \
List[137, 131, 104, 255], List[127, 123, 100, 255], List[129, 121, 104, 255], \
List[135, 125, 108, 255], List[147, 125, 114, 255], List[156, 34, 91, 255], \
List[148, 19, 94, 255], List[120, 39, 85, 255], List[93, 88, 79, 255], \
List[88, 83, 75, 255], List[89, 89, 87, 255], List[86, 87, 83, 255], List[91, \
90, 85, 255], List[88, 89, 84, 255], List[92, 93, 89, 255], List[88, 87, 85, \
255], List[89, 87, 80, 255], List[100, 96, 88, 255], List[99, 96, 88, 255], \
List[98, 96, 86, 255], List[103, 101, 90, 255], List[105, 93, 87, 255], \
List[100, 85, 81, 255], List[104, 88, 83, 255], List[89, 83, 80, 255], \
List[90, 89, 82, 255], List[79, 78, 72, 255], List[50, 49, 51, 255], List[15, \
17, 60, 255], List[19, 20, 72, 255], List[29, 22, 80, 255], List[23, 22, 91, \
255], List[26, 27, 92, 255], List[33, 23, 92, 255], List[35, 22, 99, 255], \
List[93, 69, 109, 255], List[103, 78, 111, 255], List[106, 80, 99, 255], \
List[102, 77, 103, 255], List[94, 71, 114, 255], List[95, 69, 113, 255], \
List[95, 73, 112, 255]]], \\\"UnsignedInteger8\\\"], List[List[0, 43.`], \
List[75.`, 0]], List[0, 255], Rule[ColorFunction, RGBColor], \
Rule[ImageResolution, List[72, 72]]], BoxForm`ImageTag[\\\"Byte\\\", \
Rule[ColorSpace, \\\"RGB\\\"], Rule[Interleaving, True], \
Rule[MetaInformation, Association[Rule[\\\"Exif\\\", \
Association[Rule[\\\"ImageWidth\\\", 1200], Rule[\\\"ImageLength\\\", 680], \
Rule[\\\"XResolution\\\", 72], Rule[\\\"YResolution\\\", 72], \
Rule[\\\"ResolutionUnit\\\", \\\"Inch\\\"], Rule[\\\"Software\\\", \
\\\"Created with the Wolfram Language : www.wolfram.com\\\"], \
Rule[\\\"DateTime\\\", DateObject[List[2022, 12, 6, 13, 38, 17.`], \
\\\"Instant\\\", \\\"Gregorian\\\", -5.`]], Rule[\\\"TimeZoneOffset\\\", \
-5]]], Rule[\\\"Comments\\\", Association[Rule[\\\"Software\\\", \\\"Created \
with the Wolfram Language : www.wolfram.com\\\"], Rule[\\\"Creation Time\\\", \
DateObject[List[2022, 12, 6, 13, 38, 17.`], \\\"Instant\\\"]]]]]]], \
Rule[Selectable, False]], Rule[DefaultBaseStyle, \\\"ImageGraphics\\\"], \
Rule[ImageSizeRaw, List[75.`, 43.`]], Rule[PlotRange, List[List[0, 75.`], \
List[0, 43.`]]]]}], \\\",\\\", RowBox[{\\\"\\\\\\\"iRight\\\\\\\"\\\", \\\"\
\[Rule]\\\", GraphicsBox[TagBox[RasterBox[NumericArray[List[List[List[171, \
141, 121, 255], List[164, 140, 123, 255], List[158, 144, 129, 255], List[181, \
151, 131, 255], List[163, 154, 134, 255], List[152, 148, 126, 255], List[133, \
128, 109, 255], List[76, 74, 66, 255], List[68, 66, 59, 255], List[130, 127, \
114, 255], List[177, 177, 162, 255], List[154, 153, 137, 255], List[124, 120, \
102, 255], List[129, 127, 113, 255], List[159, 163, 152, 255], List[123, 124, \
111, 255], List[142, 142, 130, 255], List[164, 170, 160, 255], List[158, 164, \
153, 255], List[159, 165, 154, 255], List[158, 163, 153, 255], List[156, 162, \
151, 255], List[156, 161, 151, 255], List[156, 162, 151, 255], List[157, 162, \
151, 255], List[158, 163, 151, 255], List[157, 162, 151, 255], List[157, 161, \
150, 255], List[157, 162, 150, 255], List[158, 161, 151, 255], List[158, 162, \
150, 255], List[157, 161, 150, 255], List[159, 161, 151, 255], List[159, 160, \
151, 255], List[158, 160, 150, 255], List[157, 159, 150, 255], List[157, 160, \
150, 255], List[158, 161, 152, 255], List[159, 162, 153, 255], List[175, 164, \
138, 255], List[164, 154, 131, 255], List[147, 142, 127, 255], List[173, 147, \
114, 255], List[186, 153, 116, 255], List[132, 130, 112, 255], List[109, 114, \
101, 255], List[153, 145, 121, 255], List[191, 153, 113, 255], List[120, 123, \
110, 255], List[142, 142, 132, 255], List[149, 155, 151, 255], List[145, 152, \
147, 255], List[143, 149, 146, 255], List[141, 148, 145, 255], List[139, 149, \
145, 255], List[137, 139, 138, 255], List[127, 126, 129, 255], List[108, 110, \
115, 255], List[91, 96, 105, 255], List[85, 91, 101, 255], List[85, 90, 100, \
255], List[84, 91, 100, 255], List[84, 90, 100, 255], List[84, 89, 99, 255], \
List[85, 90, 100, 255], List[84, 91, 99, 255], List[85, 90, 99, 255], \
List[82, 89, 99, 255], List[80, 89, 99, 255], List[79, 87, 98, 255], List[80, \
87, 98, 255], List[79, 87, 98, 255], List[78, 87, 97, 255], List[78, 87, 98, \
255], List[78, 86, 97, 255]], List[List[154, 106, 86, 255], List[143, 112, \
95, 255], List[136, 112, 98, 255], List[155, 118, 96, 255], List[139, 135, \
116, 255], List[125, 116, 99, 255], List[95, 85, 74, 255], List[62, 50, 43, \
255], List[79, 74, 64, 255], List[111, 108, 96, 255], List[149, 141, 125, \
255], List[117, 111, 94, 255], List[116, 110, 95, 255], List[141, 129, 114, \
255], List[144, 134, 116, 255], List[152, 141, 123, 255], List[117, 112, 100, \
255], List[159, 154, 142, 255], List[163, 160, 148, 255], List[159, 159, 148, \
255], List[159, 164, 153, 255], List[159, 166, 155, 255], List[157, 166, 155, \
255], List[156, 164, 154, 255], List[156, 164, 154, 255], List[157, 162, 153, \
255], List[154, 161, 152, 255], List[153, 161, 151, 255], List[155, 161, 150, \
255], List[153, 159, 149, 255], List[153, 159, 148, 255], List[154, 159, 149, \
255], List[156, 158, 149, 255], List[153, 157, 149, 255], List[153, 157, 149, \
255], List[154, 158, 149, 255], List[152, 156, 148, 255], List[130, 132, 123, \
255], List[128, 130, 118, 255], List[140, 133, 112, 255], List[131, 127, 111, \
255], List[129, 127, 112, 255], List[142, 133, 112, 255], List[151, 139, 117, \
255], List[122, 118, 103, 255], List[107, 107, 97, 255], List[149, 139, 114, \
255], List[125, 117, 98, 255], List[107, 108, 95, 255], List[133, 128, 115, \
255], List[120, 121, 114, 255], List[123, 125, 118, 255], List[122, 122, 116, \
255], List[106, 107, 104, 255], List[110, 112, 106, 255], List[92, 98, 95, \
255], List[79, 86, 86, 255], List[76, 86, 97, 255], List[79, 88, 100, 255], \
List[82, 90, 100, 255], List[82, 90, 100, 255], List[83, 89, 100, 255], \
List[83, 90, 100, 255], List[83, 90, 100, 255], List[83, 89, 99, 255], \
List[82, 89, 99, 255], List[82, 89, 99, 255], List[80, 88, 99, 255], List[80, \
88, 99, 255], List[79, 88, 98, 255], List[78, 87, 98, 255], List[78, 87, 98, \
255], List[77, 86, 97, 255], List[78, 86, 97, 255], List[80, 88, 98, 255]], \
List[List[141, 118, 102, 255], List[137, 117, 104, 255], List[139, 116, 102, \
255], List[119, 110, 96, 255], List[116, 102, 88, 255], List[127, 104, 92, \
255], List[145, 123, 105, 255], List[103, 92, 79, 255], List[71, 66, 59, \
255], List[108, 102, 87, 255], List[113, 107, 91, 255], List[118, 111, 95, \
255], List[130, 124, 106, 255], List[134, 125, 104, 255], List[131, 122, 103, \
255], List[111, 103, 87, 255], List[113, 103, 86, 255], List[144, 128, 110, \
255], List[144, 128, 113, 255], List[151, 132, 114, 255], List[151, 135, 119, \
255], List[147, 137, 123, 255], List[154, 145, 130, 255], List[151, 146, 133, \
255], List[151, 150, 138, 255], List[153, 153, 143, 255], List[156, 158, 148, \
255], List[155, 157, 146, 255], List[152, 159, 151, 255], List[151, 161, 153, \
255], List[150, 160, 151, 255], List[148, 159, 151, 255], List[149, 160, 151, \
255], List[152, 160, 150, 255], List[154, 161, 151, 255], List[152, 160, 151, \
255], List[145, 148, 139, 255], List[86, 90, 87, 255], List[77, 84, 82, 255], \
List[87, 93, 90, 255], List[95, 98, 92, 255], List[97, 98, 93, 255], List[91, \
96, 92, 255], List[93, 98, 93, 255], List[106, 107, 98, 255], List[114, 114, \
102, 255], List[106, 110, 101, 255], List[107, 113, 103, 255], List[122, 121, \
108, 255], List[117, 115, 102, 255], List[116, 114, 101, 255], List[115, 116, \
102, 255], List[119, 118, 105, 255], List[121, 118, 103, 255], List[126, 123, \
105, 255], List[129, 130, 108, 255], List[120, 123, 104, 255], List[88, 95, \
101, 255], List[80, 89, 100, 255], List[81, 90, 100, 255], List[83, 91, 100, \
255], List[88, 93, 100, 255], List[87, 91, 99, 255], List[82, 89, 99, 255], \
List[80, 89, 99, 255], List[80, 89, 99, 255], List[80, 88, 99, 255], List[80, \
88, 99, 255], List[78, 87, 99, 255], List[78, 87, 98, 255], List[78, 87, 98, \
255], List[79, 87, 98, 255], List[79, 87, 98, 255], List[80, 88, 98, 255], \
List[80, 87, 98, 255]], List[List[129, 108, 94, 255], List[138, 117, 104, \
255], List[136, 115, 100, 255], List[119, 99, 86, 255], List[141, 116, 100, \
255], List[132, 112, 99, 255], List[136, 116, 102, 255], List[144, 128, 111, \
255], List[115, 108, 92, 255], List[116, 111, 94, 255], List[93, 90, 78, \
255], List[109, 104, 88, 255], List[126, 117, 99, 255], List[114, 106, 90, \
255], List[111, 103, 88, 255], List[121, 113, 97, 255], List[142, 133, 112, \
255], List[134, 125, 105, 255], List[136, 126, 106, 255], List[141, 127, 105, \
255], List[144, 129, 108, 255], List[144, 129, 111, 255], List[151, 131, 109, \
255], List[146, 127, 109, 255], List[147, 130, 112, 255], List[145, 129, 111, \
255], List[146, 131, 113, 255], List[148, 131, 113, 255], List[146, 133, 116, \
255], List[146, 142, 128, 255], List[152, 147, 135, 255], List[151, 149, 138, \
255], List[149, 150, 137, 255], List[135, 138, 131, 255], List[114, 122, 125, \
255], List[130, 135, 131, 255], List[150, 134, 112, 255], List[78, 84, 83, \
255], List[73, 81, 81, 255], List[81, 87, 85, 255], List[85, 89, 87, 255], \
List[89, 93, 90, 255], List[89, 94, 90, 255], List[91, 94, 91, 255], List[87, \
90, 89, 255], List[83, 88, 86, 255], List[78, 84, 83, 255], List[75, 82, 82, \
255], List[85, 89, 87, 255], List[90, 94, 90, 255], List[92, 95, 92, 255], \
List[89, 94, 90, 255], List[92, 95, 91, 255], List[97, 99, 94, 255], List[99, \
101, 95, 255], List[97, 100, 94, 255], List[96, 100, 96, 255], List[87, 93, \
101, 255], List[81, 89, 100, 255], List[80, 90, 100, 255], List[80, 89, 100, \
255], List[84, 91, 99, 255], List[82, 90, 99, 255], List[79, 89, 99, 255], \
List[80, 89, 99, 255], List[81, 89, 99, 255], List[79, 88, 99, 255], List[79, \
88, 99, 255], List[81, 88, 99, 255], List[81, 88, 99, 255], List[79, 88, 98, \
255], List[80, 87, 98, 255], List[80, 88, 98, 255], List[79, 88, 98, 255], \
List[79, 88, 98, 255]], List[List[143, 118, 101, 255], List[134, 114, 101, \
255], List[139, 115, 99, 255], List[138, 118, 100, 255], List[117, 111, 95, \
255], List[123, 106, 93, 255], List[131, 111, 96, 255], List[135, 125, 103, \
255], List[134, 124, 105, 255], List[95, 90, 78, 255], List[104, 96, 83, \
255], List[114, 106, 91, 255], List[116, 105, 89, 255], List[120, 108, 93, \
255], List[143, 128, 110, 255], List[149, 133, 114, 255], List[143, 127, 108, \
255], List[140, 127, 111, 255], List[140, 127, 108, 255], List[143, 127, 106, \
255], List[139, 127, 106, 255], List[138, 126, 105, 255], List[137, 126, 105, \
255], List[138, 127, 107, 255], List[137, 127, 108, 255], List[144, 130, 109, \
255], List[145, 131, 111, 255], List[144, 129, 110, 255], List[147, 130, 113, \
255], List[147, 127, 108, 255], List[149, 129, 109, 255], List[147, 127, 107, \
255], List[151, 130, 108, 255], List[136, 121, 106, 255], List[82, 90, 101, \
255], List[109, 108, 102, 255], List[125, 113, 96, 255], List[111, 114, 104, \
255], List[108, 111, 102, 255], List[110, 111, 101, 255], List[107, 107, 98, \
255], List[99, 101, 94, 255], List[92, 96, 90, 255], List[95, 97, 93, 255], \
List[97, 98, 92, 255], List[92, 95, 91, 255], List[82, 88, 86, 255], List[79, \
86, 85, 255], List[86, 91, 88, 255], List[88, 91, 88, 255], List[89, 92, 89, \
255], List[87, 93, 89, 255], List[89, 94, 91, 255], List[86, 90, 88, 255], \
List[83, 87, 85, 255], List[74, 81, 81, 255], List[73, 81, 81, 255], List[83, \
90, 100, 255], List[81, 90, 100, 255], List[81, 90, 100, 255], List[81, 90, \
100, 255], List[81, 90, 100, 255], List[80, 89, 100, 255], List[79, 88, 99, \
255], List[80, 89, 99, 255], List[80, 89, 99, 255], List[81, 89, 99, 255], \
List[80, 89, 99, 255], List[81, 89, 99, 255], List[80, 88, 99, 255], List[81, \
89, 99, 255], List[81, 89, 99, 255], List[80, 88, 99, 255], List[79, 88, 98, \
255], List[79, 88, 98, 255]], List[List[135, 112, 98, 255], List[134, 113, \
101, 255], List[128, 111, 96, 255], List[123, 119, 102, 255], List[111, 107, \
93, 255], List[116, 98, 87, 255], List[132, 113, 98, 255], List[140, 126, \
109, 255], List[147, 130, 113, 255], List[111, 101, 87, 255], List[109, 102, \
88, 255], List[134, 121, 103, 255], List[149, 131, 111, 255], List[149, 132, \
110, 255], List[143, 127, 108, 255], List[141, 126, 108, 255], List[141, 126, \
109, 255], List[146, 130, 111, 255], List[144, 127, 110, 255], List[149, 131, \
112, 255], List[144, 130, 114, 255], List[145, 130, 113, 255], List[147, 130, \
108, 255], List[137, 125, 108, 255], List[138, 126, 106, 255], List[137, 128, \
109, 255], List[131, 125, 109, 255], List[139, 128, 107, 255], List[134, 124, \
106, 255], List[144, 129, 109, 255], List[145, 130, 112, 255], List[144, 130, \
114, 255], List[150, 131, 111, 255], List[140, 127, 113, 255], List[85, 93, \
102, 255], List[112, 110, 103, 255], List[138, 141, 121, 255], List[103, 108, \
87, 255], List[111, 113, 93, 255], List[122, 119, 99, 255], List[116, 114, \
99, 255], List[123, 120, 107, 255], List[124, 124, 110, 255], List[121, 119, \
107, 255], List[123, 119, 106, 255], List[128, 125, 109, 255], List[121, 122, \
107, 255], List[121, 121, 108, 255], List[120, 119, 108, 255], List[116, 114, \
103, 255], List[106, 108, 99, 255], List[100, 103, 95, 255], List[104, 105, \
97, 255], List[105, 106, 97, 255], List[102, 104, 97, 255], List[92, 96, 93, \
255], List[88, 93, 91, 255], List[82, 91, 101, 255], List[81, 90, 100, 255], \
List[82, 90, 100, 255], List[82, 90, 100, 255], List[81, 89, 100, 255], \
List[80, 89, 100, 255], List[81, 89, 100, 255], List[81, 89, 100, 255], \
List[81, 90, 99, 255], List[81, 90, 100, 255], List[80, 89, 99, 255], \
List[80, 88, 99, 255], List[80, 88, 99, 255], List[81, 89, 99, 255], List[80, \
88, 98, 255], List[78, 88, 98, 255], List[79, 88, 98, 255], List[79, 88, 98, \
255]], List[List[131, 109, 96, 255], List[133, 113, 100, 255], List[123, 116, \
99, 255], List[135, 127, 109, 255], List[95, 89, 77, 255], List[105, 91, 80, \
255], List[140, 119, 103, 255], List[135, 121, 104, 255], List[115, 103, 88, \
255], List[98, 90, 77, 255], List[121, 104, 82, 255], List[118, 108, 90, \
255], List[144, 124, 98, 255], List[154, 130, 101, 255], List[151, 129, 102, \
255], List[150, 129, 104, 255], List[149, 129, 106, 255], List[147, 129, 108, \
255], List[142, 125, 106, 255], List[149, 129, 107, 255], List[142, 126, 108, \
255], List[146, 129, 111, 255], List[145, 128, 110, 255], List[145, 129, 112, \
255], List[144, 128, 111, 255], List[144, 128, 110, 255], List[144, 130, 110, \
255], List[139, 126, 108, 255], List[137, 124, 108, 255], List[138, 125, 104, \
255], List[136, 125, 104, 255], List[136, 124, 104, 255], List[141, 127, 106, \
255], List[129, 120, 109, 255], List[84, 93, 104, 255], List[121, 111, 98, \
255], List[102, 104, 100, 255], List[41, 72, 89, 255], List[52, 78, 90, 255], \
List[69, 86, 81, 255], List[72, 79, 64, 255], List[88, 93, 79, 255], \
List[103, 106, 92, 255], List[87, 88, 73, 255], List[90, 93, 73, 255], \
List[94, 101, 85, 255], List[86, 96, 81, 255], List[99, 104, 86, 255], \
List[112, 110, 88, 255], List[107, 105, 91, 255], List[122, 120, 106, 255], \
List[127, 126, 111, 255], List[116, 115, 102, 255], List[121, 117, 101, 255], \
List[128, 125, 106, 255], List[123, 124, 104, 255], List[120, 120, 105, 255], \
List[83, 90, 102, 255], List[79, 89, 101, 255], List[81, 90, 101, 255], \
List[82, 90, 101, 255], List[82, 90, 100, 255], List[82, 90, 100, 255], \
List[80, 89, 100, 255], List[81, 90, 100, 255], List[81, 90, 100, 255], \
List[80, 89, 99, 255], List[79, 88, 99, 255], List[79, 88, 99, 255], List[80, \
88, 99, 255], List[80, 88, 99, 255], List[78, 87, 99, 255], List[77, 87, 98, \
255], List[77, 87, 98, 255], List[79, 88, 98, 255]], List[List[136, 113, 99, \
255], List[127, 112, 100, 255], List[116, 113, 96, 255], List[114, 102, 89, \
255], List[120, 110, 96, 255], List[112, 98, 86, 255], List[114, 101, 87, \
255], List[115, 97, 77, 255], List[127, 110, 88, 255], List[138, 120, 94, \
255], List[170, 134, 97, 255], List[147, 120, 89, 255], List[154, 126, 94, \
255], List[159, 128, 95, 255], List[161, 130, 94, 255], List[158, 130, 96, \
255], List[155, 128, 98, 255], List[154, 126, 95, 255], List[155, 130, 101, \
255], List[155, 127, 97, 255], List[157, 127, 96, 255], List[151, 127, 100, \
255], List[144, 125, 106, 255], List[146, 129, 109, 255], List[143, 126, 107, \
255], List[142, 127, 109, 255], List[141, 126, 108, 255], List[144, 127, 110, \
255], List[144, 128, 111, 255], List[146, 128, 110, 255], List[143, 129, 111, \
255], List[143, 127, 109, 255], List[143, 126, 105, 255], List[111, 108, 100, \
255], List[81, 90, 99, 255], List[127, 120, 101, 255], List[114, 123, 122, \
255], List[81, 121, 153, 255], List[94, 127, 151, 255], List[84, 126, 159, \
255], List[63, 104, 127, 255], List[54, 67, 64, 255], List[50, 62, 58, 255], \
List[58, 86, 94, 255], List[61, 97, 118, 255], List[58, 90, 115, 255], \
List[41, 76, 101, 255], List[51, 83, 104, 255], List[62, 86, 91, 255], \
List[65, 76, 65, 255], List[76, 83, 72, 255], List[87, 91, 79, 255], List[79, \
81, 66, 255], List[80, 89, 72, 255], List[78, 92, 86, 255], List[70, 88, 79, \
255], List[79, 93, 87, 255], List[81, 91, 102, 255], List[81, 90, 101, 255], \
List[81, 90, 100, 255], List[82, 90, 100, 255], List[81, 90, 100, 255], \
List[81, 90, 100, 255], List[81, 89, 100, 255], List[82, 90, 100, 255], \
List[81, 90, 100, 255], List[80, 89, 100, 255], List[80, 88, 99, 255], \
List[81, 88, 99, 255], List[80, 89, 99, 255], List[79, 88, 99, 255], List[78, \
87, 99, 255], List[78, 87, 99, 255], List[80, 88, 99, 255], List[80, 89, 98, \
255]], List[List[135, 111, 96, 255], List[131, 110, 95, 255], List[134, 97, \
79, 255], List[130, 100, 85, 255], List[121, 107, 92, 255], List[129, 109, \
96, 255], List[135, 109, 88, 255], List[153, 125, 94, 255], List[136, 118, \
92, 255], List[151, 122, 89, 255], List[137, 112, 86, 255], List[146, 118, \
88, 255], List[153, 125, 92, 255], List[152, 125, 89, 255], List[148, 124, \
89, 255], List[154, 126, 90, 255], List[158, 129, 94, 255], List[165, 132, \
96, 255], List[163, 131, 94, 255], List[170, 136, 98, 255], List[173, 135, \
96, 255], List[165, 133, 98, 255], List[158, 131, 99, 255], List[151, 125, \
97, 255], List[152, 130, 104, 255], List[150, 128, 104, 255], List[147, 128, \
105, 255], List[146, 128, 107, 255], List[142, 124, 106, 255], List[145, 126, \
106, 255], List[141, 125, 107, 255], List[143, 127, 108, 255], List[151, 133, \
116, 255], List[168, 151, 141, 255], List[135, 133, 132, 255], List[115, 98, \
88, 255], List[136, 151, 147, 255], List[151, 187, 198, 255], List[168, 190, \
192, 255], List[181, 198, 198, 255], List[163, 193, 204, 255], List[128, 154, \
159, 255], List[123, 149, 153, 255], List[133, 174, 195, 255], List[144, 176, \
193, 255], List[136, 165, 182, 255], List[103, 142, 166, 255], List[125, 156, \
174, 255], List[103, 147, 179, 255], List[77, 122, 148, 255], List[57, 73, \
72, 255], List[64, 72, 71, 255], List[91, 94, 96, 255], List[97, 100, 105, \
255], List[95, 97, 103, 255], List[81, 84, 93, 255], List[96, 90, 91, 255], \
List[94, 95, 98, 255], List[79, 90, 102, 255], List[82, 91, 101, 255], \
List[81, 90, 101, 255], List[80, 90, 101, 255], List[80, 89, 100, 255], \
List[81, 89, 100, 255], List[81, 90, 100, 255], List[81, 89, 100, 255], \
List[81, 89, 100, 255], List[81, 89, 100, 255], List[84, 90, 100, 255], \
List[82, 90, 100, 255], List[80, 89, 99, 255], List[78, 87, 99, 255], \
List[78, 87, 99, 255], List[81, 90, 99, 255], List[81, 90, 99, 255]], \
List[List[133, 107, 91, 255], List[136, 109, 92, 255], List[155, 115, 98, \
255], List[142, 111, 95, 255], List[120, 98, 83, 255], List[109, 95, 82, \
255], List[131, 113, 94, 255], List[132, 116, 93, 255], List[142, 117, 85, \
255], List[149, 121, 88, 255], List[145, 117, 89, 255], List[154, 124, 91, \
255], List[155, 126, 92, 255], List[155, 127, 90, 255], List[152, 125, 90, \
255], List[153, 126, 90, 255], List[153, 124, 93, 255], List[144, 114, 84, \
255], List[145, 119, 89, 255], List[133, 111, 87, 255], List[135, 111, 87, \
255], List[156, 126, 94, 255], List[160, 128, 93, 255], List[164, 132, 96, \
255], List[157, 127, 95, 255], List[160, 129, 95, 255], List[155, 129, 98, \
255], List[155, 127, 97, 255], List[154, 128, 99, 255], List[154, 127, 97, \
255], List[155, 125, 95, 255], List[151, 127, 101, 255], List[118, 106, 94, \
255], List[147, 141, 134, 255], List[187, 169, 158, 255], List[136, 92, 87, \
255], List[112, 120, 118, 255], List[160, 187, 194, 255], List[185, 197, 193, \
255], List[197, 205, 198, 255], List[204, 212, 201, 255], List[203, 216, 209, \
255], List[206, 219, 211, 255], List[209, 216, 205, 255], List[201, 209, 201, \
255], List[170, 195, 199, 255], List[155, 191, 199, 255], List[185, 203, 201, \
255], List[197, 210, 204, 255], List[188, 209, 210, 255], List[156, 180, 181, \
255], List[154, 180, 183, 255], List[159, 191, 204, 255], List[166, 189, 196, \
255], List[150, 176, 185, 255], List[122, 160, 179, 255], List[147, 154, 157, \
255], List[104, 95, 93, 255], List[76, 89, 103, 255], List[82, 90, 101, 255], \
List[80, 90, 101, 255], List[80, 90, 101, 255], List[79, 89, 101, 255], \
List[80, 89, 101, 255], List[80, 90, 100, 255], List[79, 89, 100, 255], \
List[80, 89, 100, 255], List[83, 91, 101, 255], List[84, 91, 100, 255], \
List[83, 90, 100, 255], List[83, 91, 101, 255], List[81, 90, 101, 255], \
List[79, 88, 100, 255], List[79, 88, 99, 255], List[77, 84, 96, 255]], \
List[List[130, 111, 98, 255], List[134, 106, 92, 255], List[153, 94, 73, \
255], List[133, 105, 90, 255], List[128, 105, 91, 255], List[119, 98, 86, \
255], List[121, 95, 75, 255], List[152, 119, 84, 255], List[152, 123, 91, \
255], List[152, 125, 93, 255], List[160, 127, 93, 255], List[149, 123, 93, \
255], List[150, 126, 97, 255], List[153, 127, 97, 255], List[156, 128, 94, \
255], List[153, 126, 95, 255], List[160, 129, 94, 255], List[163, 132, 95, \
255], List[161, 129, 94, 255], List[152, 123, 92, 255], List[142, 116, 89, \
255], List[148, 121, 91, 255], List[146, 116, 86, 255], List[151, 122, 92, \
255], List[151, 126, 91, 255], List[148, 124, 89, 255], List[154, 126, 91, \
255], List[159, 127, 94, 255], List[160, 128, 93, 255], List[164, 131, 96, \
255], List[172, 136, 97, 255], List[145, 120, 92, 255], List[106, 102, 94, \
255], List[78, 78, 77, 255], List[148, 145, 137, 255], List[161, 161, 150, \
255], List[144, 138, 128, 255], List[156, 155, 147, 255], List[188, 198, 193, \
255], List[182, 200, 199, 255], List[158, 196, 201, 255], List[151, 196, 201, \
255], List[163, 199, 202, 255], List[185, 205, 204, 255], List[198, 207, 201, \
255], List[179, 197, 197, 255], List[170, 193, 196, 255], List[197, 206, 200, \
255], List[199, 211, 205, 255], List[201, 214, 206, 255], List[201, 218, 211, \
255], List[208, 221, 212, 255], List[213, 221, 210, 255], List[206, 216, 208, \
255], List[175, 200, 204, 255], List[164, 205, 217, 255], List[175, 177, 169, \
255], List[95, 89, 89, 255], List[77, 90, 104, 255], List[81, 90, 101, 255], \
List[80, 90, 101, 255], List[80, 90, 101, 255], List[80, 90, 101, 255], \
List[81, 90, 101, 255], List[82, 91, 101, 255], List[81, 90, 101, 255], \
List[81, 89, 100, 255], List[83, 89, 100, 255], List[83, 91, 100, 255], \
List[79, 87, 98, 255], List[70, 79, 91, 255], List[69, 78, 90, 255], List[70, \
80, 92, 255], List[73, 84, 97, 255], List[80, 94, 107, 255]], List[List[125, \
107, 97, 255], List[129, 107, 94, 255], List[131, 103, 89, 255], List[126, \
105, 92, 255], List[122, 103, 91, 255], List[128, 109, 98, 255], List[161, \
140, 119, 255], List[182, 164, 138, 255], List[145, 126, 105, 255], List[138, \
119, 96, 255], List[141, 119, 96, 255], List[138, 120, 101, 255], List[140, \
123, 103, 255], List[143, 125, 103, 255], List[143, 124, 102, 255], List[148, \
127, 102, 255], List[144, 121, 97, 255], List[148, 124, 96, 255], List[154, \
127, 96, 255], List[164, 130, 92, 255], List[166, 132, 95, 255], List[163, \
131, 96, 255], List[163, 132, 95, 255], List[158, 128, 94, 255], List[154, \
126, 92, 255], List[152, 125, 90, 255], List[154, 127, 92, 255], List[150, \
120, 89, 255], List[145, 118, 88, 255], List[131, 109, 87, 255], List[132, \
110, 87, 255], List[139, 114, 87, 255], List[107, 99, 91, 255], List[98, 95, \
92, 255], List[153, 149, 139, 255], List[119, 116, 109, 255], List[133, 129, \
121, 255], List[153, 150, 142, 255], List[182, 191, 186, 255], List[177, 197, \
197, 255], List[150, 191, 197, 255], List[137, 190, 199, 255], List[150, 194, \
202, 255], List[179, 201, 203, 255], List[193, 205, 201, 255], List[191, 200, \
195, 255], List[192, 202, 196, 255], List[195, 208, 203, 255], List[182, 205, \
207, 255], List[154, 199, 206, 255], List[146, 201, 211, 255], List[153, 181, \
183, 255], List[157, 152, 145, 255], List[167, 160, 150, 255], List[154, 151, \
144, 255], List[150, 153, 150, 255], List[142, 125, 112, 255], List[92, 89, \
92, 255], List[79, 91, 104, 255], List[82, 90, 100, 255], List[81, 91, 101, \
255], List[82, 91, 101, 255], List[81, 90, 101, 255], List[82, 90, 101, 255], \
List[81, 90, 101, 255], List[80, 89, 100, 255], List[80, 89, 100, 255], \
List[80, 90, 101, 255], List[78, 87, 99, 255], List[87, 96, 106, 255], \
List[129, 137, 141, 255], List[147, 155, 158, 255], List[161, 175, 176, 255], \
List[172, 192, 195, 255], List[169, 199, 206, 255]], List[List[127, 108, 97, \
255], List[122, 103, 91, 255], List[115, 97, 87, 255], List[128, 107, 94, \
255], List[119, 99, 87, 255], List[127, 111, 101, 255], List[187, 184, 170, \
255], List[215, 212, 197, 255], List[157, 145, 132, 255], List[128, 112, 96, \
255], List[135, 120, 104, 255], List[135, 119, 104, 255], List[137, 121, 105, \
255], List[134, 121, 104, 255], List[135, 122, 105, 255], List[136, 120, 103, \
255], List[140, 125, 106, 255], List[136, 121, 104, 255], List[143, 123, 100, \
255], List[146, 122, 96, 255], List[147, 122, 95, 255], List[145, 123, 99, \
255], List[144, 122, 97, 255], List[148, 125, 99, 255], List[151, 126, 97, \
255], List[153, 127, 96, 255], List[152, 124, 95, 255], List[159, 130, 94, \
255], List[161, 131, 95, 255], List[159, 127, 94, 255], List[152, 123, 92, \
255], List[154, 124, 91, 255], List[123, 114, 102, 255], List[136, 134, 127, \
255], List[149, 145, 136, 255], List[87, 84, 80, 255], List[102, 98, 93, \
255], List[159, 157, 148, 255], List[180, 187, 181, 255], List[192, 199, 190, \
255], List[191, 204, 196, 255], List[187, 204, 198, 255], List[188, 203, 196, \
255], List[191, 202, 197, 255], List[190, 200, 194, 255], List[166, 187, 192, \
255], List[179, 195, 194, 255], List[195, 205, 199, 255], List[184, 203, 204, \
255], List[160, 199, 203, 255], List[148, 197, 204, 255], List[157, 197, 204, \
255], List[179, 196, 196, 255], List[188, 197, 193, 255], List[182, 187, 182, \
255], List[184, 194, 190, 255], List[163, 146, 130, 255], List[93, 88, 91, \
255], List[81, 92, 105, 255], List[84, 92, 102, 255], List[83, 92, 102, 255], \
List[82, 91, 101, 255], List[82, 91, 101, 255], List[82, 90, 101, 255], \
List[81, 90, 101, 255], List[80, 90, 101, 255], List[80, 90, 100, 255], \
List[81, 90, 101, 255], List[81, 88, 98, 255], List[81, 95, 109, 255], \
List[86, 127, 170, 255], List[84, 127, 169, 255], List[87, 133, 172, 255], \
List[105, 140, 167, 255], List[138, 167, 188, 255]], List[List[124, 106, 94, \
255], List[125, 104, 91, 255], List[122, 100, 88, 255], List[125, 103, 90, \
255], List[119, 102, 91, 255], List[119, 99, 87, 255], List[156, 150, 139, \
255], List[203, 197, 181, 255], List[180, 172, 155, 255], List[126, 112, 95, \
255], List[135, 120, 104, 255], List[130, 117, 101, 255], List[134, 120, 101, \
255], List[138, 124, 106, 255], List[136, 122, 104, 255], List[136, 121, 106, \
255], List[137, 122, 107, 255], List[137, 122, 104, 255], List[141, 124, 107, \
255], List[133, 120, 104, 255], List[141, 123, 105, 255], List[136, 120, 104, \
255], List[139, 123, 105, 255], List[138, 122, 103, 255], List[139, 122, 103, \
255], List[140, 122, 102, 255], List[142, 123, 102, 255], List[141, 121, 99, \
255], List[146, 123, 97, 255], List[157, 125, 92, 255], List[157, 126, 93, \
255], List[153, 127, 97, 255], List[146, 140, 129, 255], List[151, 148, 139, \
255], List[135, 130, 122, 255], List[72, 68, 65, 255], List[103, 98, 93, \
255], List[152, 151, 143, 255], List[148, 168, 175, 255], List[149, 176, 186, \
255], List[144, 167, 169, 255], List[148, 170, 171, 255], List[179, 196, 194, \
255], List[186, 197, 191, 255], List[175, 191, 190, 255], List[147, 180, 190, \
255], List[165, 187, 190, 255], List[194, 201, 195, 255], List[202, 209, 198, \
255], List[201, 214, 206, 255], List[198, 213, 205, 255], List[200, 210, 201, \
255], List[197, 208, 202, 255], List[194, 203, 199, 255], List[165, 190, 196, \
255], List[182, 205, 208, 255], List[173, 156, 140, 255], List[89, 87, 91, \
255], List[81, 92, 105, 255], List[84, 92, 102, 255], List[82, 91, 102, 255], \
List[82, 91, 102, 255], List[81, 90, 101, 255], List[81, 90, 101, 255], \
List[82, 91, 101, 255], List[80, 89, 101, 255], List[80, 90, 101, 255], \
List[80, 89, 101, 255], List[81, 90, 100, 255], List[75, 86, 100, 255], \
List[29, 70, 124, 255], List[25, 65, 120, 255], List[31, 67, 111, 255], \
List[49, 65, 83, 255], List[52, 69, 86, 255]], List[List[124, 106, 95, 255], \
List[128, 106, 92, 255], List[132, 108, 93, 255], List[120, 99, 88, 255], \
List[118, 101, 90, 255], List[118, 94, 81, 255], List[137, 128, 115, 255], \
List[189, 184, 168, 255], List[200, 195, 179, 255], List[128, 118, 100, 255], \
List[122, 112, 94, 255], List[124, 115, 97, 255], List[129, 121, 102, 255], \
List[119, 115, 100, 255], List[129, 120, 103, 255], List[128, 117, 99, 255], \
List[127, 117, 101, 255], List[134, 120, 101, 255], List[136, 122, 103, 255], \
List[133, 120, 106, 255], List[140, 123, 105, 255], List[137, 121, 104, 255], \
List[136, 122, 107, 255], List[135, 120, 104, 255], List[134, 121, 104, 255], \
List[133, 120, 104, 255], List[137, 121, 105, 255], List[135, 120, 105, 255], \
List[138, 120, 102, 255], List[138, 120, 100, 255], List[140, 120, 99, 255], \
List[135, 121, 103, 255], List[139, 135, 127, 255], List[149, 145, 137, 255], \
List[120, 116, 109, 255], List[51, 45, 44, 255], List[106, 100, 94, 255], \
List[136, 138, 135, 255], List[60, 96, 123, 255], List[58, 93, 113, 255], \
List[50, 66, 68, 255], List[55, 70, 72, 255], List[73, 115, 142, 255], \
List[100, 138, 164, 255], List[114, 143, 161, 255], List[99, 136, 158, 255], \
List[135, 162, 174, 255], List[144, 172, 185, 255], List[137, 173, 190, 255], \
List[130, 154, 157, 255], List[136, 160, 164, 255], List[169, 193, 198, 255], \
List[183, 196, 194, 255], List[171, 192, 193, 255], List[140, 173, 183, 255], \
List[165, 191, 195, 255], List[154, 140, 128, 255], List[84, 85, 91, 255], \
List[83, 93, 105, 255], List[83, 91, 102, 255], List[82, 91, 102, 255], \
List[82, 91, 102, 255], List[82, 91, 102, 255], List[83, 91, 102, 255], \
List[81, 90, 101, 255], List[80, 90, 101, 255], List[79, 89, 101, 255], \
List[79, 89, 101, 255], List[80, 90, 100, 255], List[79, 88, 100, 255], \
List[41, 71, 112, 255], List[35, 62, 98, 255], List[55, 69, 84, 255], \
List[73, 77, 69, 255], List[118, 101, 80, 255]], List[List[127, 107, 95, \
255], List[109, 92, 82, 255], List[115, 96, 85, 255], List[122, 103, 92, \
255], List[117, 100, 90, 255], List[119, 96, 84, 255], List[111, 102, 93, \
255], List[168, 165, 152, 255], List[204, 199, 182, 255], List[151, 140, 123, \
255], List[127, 111, 96, 255], List[131, 117, 102, 255], List[132, 119, 100, \
255], List[133, 121, 105, 255], List[131, 119, 101, 255], List[126, 116, 100, \
255], List[127, 116, 99, 255], List[128, 116, 98, 255], List[128, 117, 98, \
255], List[126, 116, 97, 255], List[125, 114, 96, 255], List[125, 115, 97, \
255], List[122, 114, 98, 255], List[128, 118, 100, 255], List[129, 119, 103, \
255], List[132, 119, 101, 255], List[130, 118, 104, 255], List[134, 119, 102, \
255], List[138, 121, 105, 255], List[131, 119, 105, 255], List[136, 120, 103, \
255], List[134, 122, 107, 255], List[141, 137, 129, 255], List[148, 144, 135, \
255], List[116, 113, 106, 255], List[82, 81, 78, 255], List[125, 121, 114, \
255], List[121, 121, 113, 255], List[58, 69, 60, 255], List[64, 68, 59, 255], \
List[72, 78, 69, 255], List[66, 74, 65, 255], List[62, 73, 67, 255], List[65, \
88, 99, 255], List[71, 92, 109, 255], List[53, 80, 101, 255], List[54, 87, \
112, 255], List[60, 95, 119, 255], List[55, 86, 99, 255], List[48, 60, 59, \
255], List[53, 66, 66, 255], List[66, 107, 133, 255], List[85, 128, 159, \
255], List[125, 142, 159, 255], List[109, 105, 104, 255], List[114, 134, 143, \
255], List[135, 127, 123, 255], List[87, 88, 93, 255], List[82, 93, 104, \
255], List[82, 92, 102, 255], List[82, 92, 102, 255], List[81, 91, 102, 255], \
List[82, 91, 102, 255], List[82, 91, 102, 255], List[83, 91, 102, 255], \
List[81, 91, 101, 255], List[80, 90, 101, 255], List[81, 90, 101, 255], \
List[81, 89, 100, 255], List[81, 89, 99, 255], List[39, 63, 87, 255], \
List[41, 69, 77, 255], List[61, 72, 68, 255], List[74, 74, 63, 255], \
List[144, 121, 96, 255]], List[List[115, 97, 88, 255], List[123, 104, 92, \
255], List[119, 99, 88, 255], List[117, 99, 88, 255], List[116, 98, 86, 255], \
List[117, 97, 87, 255], List[101, 89, 78, 255], List[146, 141, 127, 255], \
List[199, 193, 178, 255], List[165, 154, 135, 255], List[124, 109, 93, 255], \
List[130, 116, 101, 255], List[130, 117, 100, 255], List[130, 117, 101, 255], \
List[132, 117, 102, 255], List[133, 119, 105, 255], List[132, 118, 103, 255], \
List[137, 120, 102, 255], List[131, 118, 104, 255], List[136, 121, 105, 255], \
List[152, 131, 111, 255], List[145, 127, 109, 255], List[136, 121, 103, 255], \
List[132, 120, 102, 255], List[122, 115, 100, 255], List[127, 117, 99, 255], \
List[121, 112, 96, 255], List[125, 114, 96, 255], List[125, 114, 95, 255], \
List[126, 116, 98, 255], List[130, 116, 98, 255], List[128, 118, 106, 255], \
List[141, 138, 130, 255], List[147, 143, 134, 255], List[105, 102, 97, 255], \
List[82, 80, 76, 255], List[126, 123, 116, 255], List[129, 126, 117, 255], \
List[119, 114, 107, 255], List[122, 119, 112, 255], List[132, 129, 119, 255], \
List[135, 128, 119, 255], List[120, 133, 125, 255], List[104, 137, 126, 255], \
List[122, 134, 123, 255], List[108, 114, 104, 255], List[75, 82, 73, 255], \
List[76, 81, 66, 255], List[73, 75, 64, 255], List[83, 88, 78, 255], List[73, \
79, 70, 255], List[60, 70, 60, 255], List[74, 79, 96, 255], List[127, 112, \
127, 255], List[85, 77, 69, 255], List[57, 74, 87, 255], List[103, 94, 92, \
255], List[89, 92, 98, 255], List[79, 91, 103, 255], List[80, 91, 102, 255], \
List[79, 90, 102, 255], List[77, 88, 102, 255], List[77, 88, 102, 255], \
List[78, 88, 101, 255], List[78, 88, 101, 255], List[78, 89, 100, 255], \
List[80, 90, 102, 255], List[81, 91, 102, 255], List[81, 91, 101, 255], \
List[83, 91, 102, 255], List[41, 57, 73, 255], List[37, 61, 58, 255], \
List[57, 72, 54, 255], List[89, 91, 67, 255], List[141, 121, 89, 255]], \
List[List[96, 80, 75, 255], List[135, 88, 72, 255], List[123, 97, 85, 255], \
List[118, 101, 90, 255], List[119, 101, 89, 255], List[115, 91, 83, 255], \
List[106, 84, 64, 255], List[126, 118, 99, 255], List[142, 142, 138, 255], \
List[143, 135, 118, 255], List[135, 113, 89, 255], List[132, 114, 96, 255], \
List[134, 117, 98, 255], List[134, 118, 99, 255], List[131, 115, 97, 255], \
List[133, 117, 100, 255], List[128, 114, 99, 255], List[133, 116, 100, 255], \
List[126, 112, 97, 255], List[143, 125, 107, 255], List[163, 140, 119, 255], \
List[164, 141, 121, 255], List[163, 140, 119, 255], List[145, 123, 105, 255], \
List[127, 113, 98, 255], List[130, 115, 100, 255], List[127, 115, 101, 255], \
List[129, 115, 98, 255], List[127, 114, 99, 255], List[126, 115, 99, 255], \
List[134, 129, 116, 255], List[135, 130, 121, 255], List[139, 136, 128, 255], \
List[144, 141, 132, 255], List[98, 95, 90, 255], List[85, 83, 79, 255], \
List[84, 83, 79, 255], List[126, 123, 116, 255], List[139, 134, 128, 255], \
List[137, 131, 125, 255], List[135, 131, 123, 255], List[138, 131, 123, 255], \
List[111, 142, 138, 255], List[88, 139, 138, 255], List[82, 123, 122, 255], \
List[85, 129, 112, 255], List[96, 117, 101, 255], List[105, 102, 91, 255], \
List[105, 105, 95, 255], List[112, 112, 100, 255], List[107, 106, 95, 255], \
List[95, 94, 84, 255], List[111, 99, 94, 255], List[122, 101, 95, 255], \
List[40, 45, 46, 255], List[65, 64, 60, 255], List[104, 86, 74, 255], \
List[89, 95, 103, 255], List[79, 90, 103, 255], List[82, 91, 101, 255], \
List[87, 94, 101, 255], List[93, 99, 105, 255], List[91, 96, 101, 255], \
List[94, 99, 103, 255], List[94, 100, 104, 255], List[90, 97, 103, 255], \
List[82, 90, 98, 255], List[77, 87, 98, 255], List[74, 86, 97, 255], List[81, \
91, 105, 255], List[52, 65, 69, 255], List[34, 53, 40, 255], List[84, 91, 64, \
255], List[139, 128, 85, 255], List[131, 121, 76, 255]], List[List[94, 77, \
70, 255], List[134, 94, 79, 255], List[122, 95, 83, 255], List[114, 93, 82, \
255], List[117, 98, 86, 255], List[120, 86, 74, 255], List[138, 97, 74, 255], \
List[133, 112, 84, 255], List[125, 113, 96, 255], List[136, 118, 96, 255], \
List[149, 120, 86, 255], List[140, 116, 90, 255], List[143, 119, 90, 255], \
List[140, 118, 91, 255], List[139, 118, 94, 255], List[135, 113, 89, 255], \
List[135, 115, 93, 255], List[134, 112, 88, 255], List[138, 113, 88, 255], \
List[152, 129, 110, 255], List[159, 136, 116, 255], List[160, 138, 117, 255], \
List[158, 135, 114, 255], List[133, 117, 100, 255], List[118, 108, 93, 255], \
List[123, 112, 96, 255], List[127, 112, 98, 255], List[126, 111, 97, 255], \
List[125, 111, 98, 255], List[125, 111, 99, 255], List[137, 129, 116, 255], \
List[140, 134, 123, 255], List[147, 143, 135, 255], List[132, 129, 122, 255], \
List[90, 87, 82, 255], List[68, 67, 64, 255], List[66, 64, 62, 255], \
List[133, 127, 119, 255], List[132, 127, 120, 255], List[132, 128, 118, 255], \
List[134, 128, 118, 255], List[130, 129, 120, 255], List[96, 138, 135, 255], \
List[84, 128, 128, 255], List[77, 120, 124, 255], List[72, 128, 111, 255], \
List[71, 127, 112, 255], List[91, 105, 106, 255], List[86, 89, 85, 255], \
List[83, 87, 83, 255], List[96, 96, 90, 255], List[80, 87, 81, 255], List[76, \
36, 38, 255], List[170, 14, 20, 255], List[80, 30, 33, 255], List[35, 48, 48, \
255], List[101, 78, 63, 255], List[99, 96, 91, 255], List[93, 96, 99, 255], \
List[103, 101, 97, 255], List[107, 105, 101, 255], List[114, 112, 108, 255], \
List[112, 110, 104, 255], List[118, 115, 109, 255], List[119, 116, 109, 255], \
List[128, 122, 112, 255], List[130, 120, 108, 255], List[136, 124, 109, 255], \
List[119, 110, 101, 255], List[90, 89, 90, 255], List[36, 43, 54, 255], \
List[52, 58, 57, 255], List[134, 109, 83, 255], List[153, 125, 89, 255], \
List[120, 110, 67, 255]], List[List[99, 77, 69, 255], List[126, 88, 75, 255], \
List[115, 93, 82, 255], List[112, 90, 79, 255], List[114, 92, 81, 255], \
List[122, 95, 84, 255], List[122, 97, 80, 255], List[123, 102, 77, 255], \
List[135, 110, 80, 255], List[132, 106, 80, 255], List[133, 108, 83, 255], \
List[140, 115, 85, 255], List[142, 116, 84, 255], List[143, 115, 84, 255], \
List[142, 116, 86, 255], List[148, 120, 88, 255], List[145, 118, 87, 255], \
List[147, 118, 86, 255], List[147, 119, 91, 255], List[154, 131, 112, 255], \
List[160, 135, 115, 255], List[161, 136, 115, 255], List[149, 130, 112, 255], \
List[160, 116, 96, 255], List[188, 111, 88, 255], List[143, 112, 91, 255], \
List[119, 107, 88, 255], List[128, 108, 88, 255], List[129, 107, 85, 255], \
List[126, 106, 87, 255], List[135, 127, 112, 255], List[102, 98, 91, 255], \
List[102, 100, 96, 255], List[144, 140, 131, 255], List[79, 77, 74, 255], \
List[42, 42, 42, 255], List[114, 109, 102, 255], List[137, 130, 121, 255], \
List[129, 123, 115, 255], List[130, 126, 116, 255], List[132, 125, 114, 255], \
List[120, 125, 118, 255], List[95, 128, 126, 255], List[87, 119, 118, 255], \
List[76, 116, 123, 255], List[69, 119, 115, 255], List[74, 126, 116, 255], \
List[84, 97, 102, 255], List[73, 76, 76, 255], List[75, 81, 80, 255], \
List[76, 80, 81, 255], List[64, 73, 75, 255], List[21, 19, 26, 255], \
List[108, 4, 13, 255], List[151, 14, 21, 255], List[59, 30, 34, 255], \
List[72, 59, 49, 255], List[83, 79, 74, 255], List[109, 104, 95, 255], \
List[117, 109, 99, 255], List[130, 120, 107, 255], List[140, 128, 110, 255], \
List[149, 132, 109, 255], List[157, 137, 111, 255], List[161, 140, 115, 255], \
List[168, 145, 120, 255], List[172, 148, 122, 255], List[170, 146, 120, 255], \
List[169, 145, 119, 255], List[159, 138, 114, 255], List[117, 103, 90, 255], \
List[120, 109, 106, 255], List[112, 87, 74, 255], List[135, 103, 79, 255], \
List[120, 106, 73, 255]], List[List[95, 75, 68, 255], List[113, 76, 65, 255], \
List[112, 93, 83, 255], List[111, 93, 82, 255], List[114, 99, 87, 255], \
List[119, 80, 68, 255], List[134, 99, 79, 255], List[134, 110, 83, 255], \
List[134, 110, 82, 255], List[132, 108, 82, 255], List[127, 102, 78, 255], \
List[137, 107, 72, 255], List[129, 110, 78, 255], List[131, 113, 83, 255], \
List[134, 111, 85, 255], List[130, 103, 78, 255], List[130, 105, 78, 255], \
List[120, 99, 78, 255], List[137, 113, 93, 255], List[157, 131, 111, 255], \
List[160, 133, 112, 255], List[154, 134, 114, 255], List[169, 120, 99, 255], \
List[213, 115, 88, 255], List[205, 109, 85, 255], List[202, 111, 86, 255], \
List[161, 114, 86, 255], List[129, 108, 81, 255], List[140, 111, 82, 255], \
List[138, 111, 83, 255], List[119, 111, 99, 255], List[110, 108, 103, 255], \
List[81, 80, 77, 255], List[133, 130, 122, 255], List[92, 90, 87, 255], \
List[82, 78, 74, 255], List[136, 130, 120, 255], List[128, 122, 115, 255], \
List[128, 122, 115, 255], List[128, 123, 114, 255], List[129, 121, 110, 255], \
List[109, 122, 124, 255], List[93, 118, 126, 255], List[87, 110, 115, 255], \
List[76, 113, 116, 255], List[70, 112, 117, 255], List[73, 120, 120, 255], \
List[54, 64, 70, 255], List[42, 48, 47, 255], List[55, 63, 60, 255], List[74, \
74, 69, 255], List[104, 88, 79, 255], List[79, 72, 67, 255], List[51, 34, 34, \
255], List[127, 31, 30, 255], List[124, 24, 26, 255], List[92, 65, 54, 255], \
List[114, 105, 92, 255], List[123, 110, 91, 255], List[121, 110, 89, 255], \
List[128, 114, 97, 255], List[133, 113, 111, 255], List[143, 123, 114, 255], \
List[148, 127, 115, 255], List[154, 132, 119, 255], List[155, 132, 116, 255], \
List[157, 134, 116, 255], List[160, 138, 116, 255], List[161, 140, 117, 255], \
List[164, 142, 118, 255], List[170, 147, 117, 255], List[159, 140, 112, 255], \
List[145, 128, 106, 255], List[129, 114, 89, 255], List[72, 77, 45, 255]], \
List[List[90, 77, 72, 255], List[99, 85, 78, 255], List[104, 88, 80, 255], \
List[105, 90, 81, 255], List[108, 92, 82, 255], List[105, 84, 77, 255], \
List[125, 104, 87, 255], List[127, 106, 83, 255], List[129, 108, 86, 255], \
List[140, 111, 81, 255], List[144, 125, 102, 255], List[136, 139, 132, 255], \
List[147, 115, 88, 255], List[147, 106, 70, 255], List[145, 112, 78, 255], \
List[138, 113, 84, 255], List[131, 110, 84, 255], List[126, 105, 82, 255], \
List[144, 119, 100, 255], List[161, 132, 110, 255], List[158, 133, 112, 255], \
List[172, 126, 104, 255], List[201, 108, 84, 255], List[190, 103, 81, 255], \
List[210, 116, 90, 255], List[213, 114, 88, 255], List[185, 106, 86, 255], \
List[147, 109, 88, 255], List[101, 87, 72, 255], List[121, 98, 75, 255], \
List[126, 117, 104, 255], List[106, 105, 100, 255], List[90, 88, 85, 255], \
List[120, 117, 111, 255], List[117, 114, 108, 255], List[127, 123, 114, 255], \
List[129, 125, 115, 255], List[126, 121, 112, 255], List[125, 121, 112, 255], \
List[126, 120, 111, 255], List[123, 118, 109, 255], List[98, 128, 128, 255], \
List[88, 119, 122, 255], List[83, 111, 114, 255], List[75, 109, 111, 255], \
List[71, 112, 113, 255], List[72, 107, 113, 255], List[85, 81, 75, 255], \
List[97, 88, 75, 255], List[111, 100, 85, 255], List[124, 109, 92, 255], \
List[134, 112, 90, 255], List[145, 120, 96, 255], List[120, 104, 86, 255], \
List[92, 72, 63, 255], List[117, 63, 54, 255], List[109, 83, 68, 255], \
List[142, 127, 104, 255], List[116, 103, 86, 255], List[117, 105, 85, 255], \
List[110, 84, 112, 255], List[120, 90, 142, 255], List[111, 89, 136, 255], \
List[106, 85, 135, 255], List[108, 82, 136, 255], List[112, 82, 137, 255], \
List[115, 81, 131, 255], List[117, 78, 132, 255], List[122, 83, 131, 255], \
List[127, 87, 125, 255], List[135, 89, 129, 255], List[140, 92, 132, 255], \
List[139, 94, 134, 255], List[143, 98, 133, 255], List[102, 76, 106, 255]], \
List[List[85, 73, 68, 255], List[92, 78, 71, 255], List[108, 90, 81, 255], \
List[104, 89, 80, 255], List[111, 92, 81, 255], List[98, 83, 76, 255], \
List[102, 90, 80, 255], List[115, 102, 88, 255], List[118, 104, 90, 255], \
List[124, 108, 91, 255], List[134, 95, 68, 255], List[126, 110, 102, 255], \
List[127, 141, 150, 255], List[142, 137, 133, 255], List[162, 122, 96, 255], \
List[166, 110, 71, 255], List[157, 108, 69, 255], List[141, 111, 82, 255], \
List[137, 122, 106, 255], List[138, 124, 112, 255], List[143, 130, 115, 255], \
List[154, 119, 101, 255], List[198, 106, 83, 255], List[208, 113, 89, 255], \
List[210, 114, 88, 255], List[127, 77, 63, 255], List[50, 40, 39, 255], \
List[95, 71, 64, 255], List[145, 104, 85, 255], List[111, 93, 73, 255], \
List[130, 118, 102, 255], List[98, 97, 91, 255], List[89, 87, 83, 255], \
List[93, 91, 87, 255], List[106, 103, 97, 255], List[123, 118, 106, 255], \
List[126, 121, 109, 255], List[124, 119, 110, 255], List[123, 119, 108, 255], \
List[124, 117, 105, 255], List[114, 119, 112, 255], List[87, 127, 126, 255], \
List[81, 115, 113, 255], List[75, 113, 113, 255], List[71, 107, 109, 255], \
List[69, 107, 107, 255], List[81, 100, 107, 255], List[128, 111, 93, 255], \
List[126, 113, 96, 255], List[126, 112, 97, 255], List[128, 115, 98, 255], \
List[133, 116, 97, 255], List[136, 119, 97, 255], List[140, 124, 104, 255], \
List[143, 127, 106, 255], List[130, 115, 98, 255], List[100, 86, 71, 255], \
List[130, 116, 97, 255], List[113, 104, 87, 255], List[113, 99, 93, 255], \
List[108, 72, 124, 255], List[123, 95, 141, 255], List[113, 90, 139, 255], \
List[112, 85, 138, 255], List[113, 75, 134, 255], List[112, 72, 137, 255], \
List[111, 69, 139, 255], List[109, 67, 142, 255], List[115, 68, 140, 255], \
List[123, 67, 137, 255], List[129, 69, 141, 255], List[126, 69, 144, 255], \
List[123, 67, 143, 255], List[119, 67, 141, 255], List[118, 72, 143, 255]], \
List[List[89, 76, 76, 255], List[96, 81, 78, 255], List[96, 83, 79, 255], \
List[99, 86, 82, 255], List[103, 86, 80, 255], List[98, 84, 76, 255], \
List[96, 87, 79, 255], List[113, 101, 90, 255], List[113, 102, 90, 255], \
List[121, 106, 92, 255], List[122, 76, 53, 255], List[120, 62, 35, 255], \
List[134, 80, 49, 255], List[126, 102, 86, 255], List[124, 120, 119, 255], \
List[141, 121, 114, 255], List[160, 120, 98, 255], List[170, 114, 78, 255], \
List[175, 118, 74, 255], List[158, 119, 81, 255], List[133, 116, 93, 255], \
List[108, 115, 106, 255], List[123, 98, 86, 255], List[196, 99, 74, 255], \
List[134, 81, 64, 255], List[51, 46, 40, 255], List[45, 43, 39, 255], \
List[53, 54, 47, 255], List[94, 68, 60, 255], List[154, 107, 87, 255], \
List[117, 112, 99, 255], List[108, 106, 101, 255], List[60, 59, 56, 255], \
List[79, 75, 72, 255], List[116, 112, 103, 255], List[127, 121, 109, 255], \
List[123, 118, 108, 255], List[122, 117, 108, 255], List[120, 116, 106, 255], \
List[120, 113, 100, 255], List[103, 118, 117, 255], List[83, 117, 125, 255], \
List[78, 108, 111, 255], List[65, 110, 112, 255], List[65, 100, 107, 255], \
List[66, 95, 104, 255], List[89, 99, 98, 255], List[114, 102, 90, 255], \
List[110, 102, 91, 255], List[113, 105, 92, 255], List[119, 106, 92, 255], \
List[123, 99, 84, 255], List[123, 101, 86, 255], List[120, 100, 85, 255], \
List[122, 101, 85, 255], List[106, 88, 75, 255], List[109, 96, 82, 255], \
List[122, 111, 95, 255], List[107, 99, 83, 255], List[106, 93, 90, 255], \
List[109, 74, 120, 255], List[127, 89, 137, 255], List[116, 86, 136, 255], \
List[115, 85, 134, 255], List[115, 75, 130, 255], List[114, 70, 136, 255], \
List[112, 69, 140, 255], List[114, 72, 138, 255], List[123, 72, 138, 255], \
List[126, 72, 140, 255], List[130, 73, 140, 255], List[121, 73, 141, 255], \
List[119, 71, 139, 255], List[120, 71, 137, 255], List[118, 70, 138, 255]], \
List[List[79, 74, 69, 255], List[72, 67, 72, 255], List[73, 68, 72, 255], \
List[78, 73, 68, 255], List[81, 75, 67, 255], List[73, 71, 66, 255], List[80, \
76, 71, 255], List[104, 96, 84, 255], List[108, 101, 89, 255], List[117, 99, \
84, 255], List[120, 70, 49, 255], List[117, 71, 52, 255], List[123, 74, 50, \
255], List[137, 76, 44, 255], List[137, 75, 43, 255], List[107, 68, 53, 255], \
List[105, 81, 72, 255], List[127, 101, 91, 255], List[142, 97, 77, 255], \
List[165, 100, 61, 255], List[190, 117, 60, 255], List[177, 130, 88, 255], \
List[147, 154, 149, 255], List[163, 133, 120, 255], List[95, 64, 54, 255], \
List[69, 66, 57, 255], List[49, 46, 43, 255], List[53, 49, 45, 255], List[97, \
97, 82, 255], List[138, 98, 80, 255], List[165, 117, 100, 255], List[124, \
126, 116, 255], List[125, 118, 107, 255], List[122, 116, 107, 255], List[125, \
120, 110, 255], List[123, 119, 109, 255], List[121, 116, 108, 255], List[119, \
114, 106, 255], List[119, 114, 105, 255], List[117, 112, 103, 255], List[93, \
116, 121, 255], List[79, 107, 116, 255], List[74, 99, 105, 255], List[62, 99, \
108, 255], List[61, 93, 107, 255], List[64, 87, 98, 255], List[99, 98, 90, \
255], List[109, 98, 86, 255], List[108, 99, 88, 255], List[111, 101, 90, \
255], List[115, 105, 94, 255], List[118, 109, 97, 255], List[122, 113, 101, \
255], List[127, 116, 101, 255], List[128, 116, 101, 255], List[129, 117, 102, \
255], List[130, 119, 104, 255], List[111, 100, 87, 255], List[107, 97, 80, \
255], List[101, 87, 85, 255], List[113, 71, 116, 255], List[137, 83, 130, \
255], List[124, 85, 128, 255], List[122, 85, 131, 255], List[120, 80, 133, \
255], List[116, 74, 135, 255], List[119, 72, 133, 255], List[124, 73, 131, \
255], List[126, 75, 136, 255], List[126, 77, 139, 255], List[124, 76, 141, \
255], List[119, 75, 141, 255], List[117, 72, 140, 255], List[116, 72, 136, \
255], List[117, 74, 138, 255]], List[List[76, 75, 66, 255], List[73, 69, 67, \
255], List[72, 69, 65, 255], List[72, 74, 63, 255], List[73, 76, 68, 255], \
List[63, 67, 66, 255], List[71, 72, 70, 255], List[107, 96, 85, 255], \
List[104, 101, 89, 255], List[115, 88, 71, 255], List[112, 66, 48, 255], \
List[117, 73, 52, 255], List[120, 71, 51, 255], List[127, 76, 52, 255], \
List[133, 82, 59, 255], List[115, 70, 53, 255], List[95, 56, 44, 255], \
List[118, 70, 48, 255], List[99, 63, 53, 255], List[111, 68, 52, 255], \
List[120, 70, 50, 255], List[122, 73, 50, 255], List[114, 82, 65, 255], \
List[129, 123, 116, 255], List[138, 113, 102, 255], List[85, 66, 54, 255], \
List[75, 74, 64, 255], List[122, 111, 93, 255], List[146, 135, 113, 255], \
List[78, 78, 72, 255], List[183, 106, 85, 255], List[160, 123, 107, 255], \
List[115, 120, 110, 255], List[126, 120, 110, 255], List[121, 116, 107, 255], \
List[121, 116, 107, 255], List[118, 114, 107, 255], List[116, 111, 106, 255], \
List[117, 111, 104, 255], List[109, 110, 104, 255], List[84, 111, 118, 255], \
List[75, 99, 106, 255], List[68, 93, 96, 255], List[59, 91, 99, 255], \
List[59, 87, 98, 255], List[69, 84, 89, 255], List[106, 97, 86, 255], \
List[104, 93, 80, 255], List[106, 95, 85, 255], List[107, 97, 86, 255], \
List[112, 102, 90, 255], List[118, 106, 92, 255], List[122, 110, 97, 255], \
List[126, 114, 99, 255], List[128, 116, 100, 255], List[129, 118, 104, 255], \
List[121, 111, 97, 255], List[103, 93, 80, 255], List[108, 98, 79, 255], \
List[99, 82, 82, 255], List[115, 69, 114, 255], List[139, 84, 127, 255], \
List[128, 85, 126, 255], List[127, 82, 124, 255], List[126, 78, 130, 255], \
List[122, 79, 136, 255], List[124, 77, 133, 255], List[131, 77, 133, 255], \
List[126, 76, 137, 255], List[119, 78, 138, 255], List[118, 83, 137, 255], \
List[115, 80, 137, 255], List[113, 73, 136, 255], List[114, 76, 135, 255], \
List[126, 78, 133, 255]], List[List[63, 75, 72, 255], List[67, 72, 67, 255], \
List[64, 71, 68, 255], List[58, 76, 71, 255], List[60, 77, 74, 255], List[61, \
72, 69, 255], List[74, 76, 69, 255], List[107, 95, 85, 255], List[110, 98, \
86, 255], List[124, 86, 66, 255], List[120, 75, 53, 255], List[122, 76, 54, \
255], List[127, 84, 60, 255], List[132, 80, 55, 255], List[101, 58, 47, 255], \
List[114, 70, 53, 255], List[88, 56, 49, 255], List[108, 67, 53, 255], \
List[84, 51, 46, 255], List[111, 68, 50, 255], List[112, 67, 48, 255], \
List[103, 63, 49, 255], List[91, 53, 40, 255], List[89, 51, 37, 255], \
List[121, 124, 125, 255], List[131, 108, 104, 255], List[123, 97, 80, 255], \
List[131, 128, 108, 255], List[81, 85, 80, 255], List[132, 91, 80, 255], \
List[195, 108, 85, 255], List[198, 114, 91, 255], List[155, 120, 105, 255], \
List[115, 115, 108, 255], List[120, 115, 106, 255], List[119, 114, 106, 255], \
List[116, 111, 104, 255], List[114, 110, 103, 255], List[115, 109, 101, 255], \
List[99, 106, 106, 255], List[80, 99, 110, 255], List[72, 88, 97, 255], \
List[62, 86, 91, 255], List[55, 83, 91, 255], List[55, 78, 90, 255], List[80, \
88, 88, 255], List[108, 97, 85, 255], List[101, 89, 75, 255], List[103, 92, \
80, 255], List[106, 94, 81, 255], List[111, 99, 85, 255], List[116, 102, 85, \
255], List[120, 106, 90, 255], List[123, 110, 94, 255], List[125, 112, 95, \
255], List[127, 114, 98, 255], List[116, 104, 88, 255], List[99, 90, 79, \
255], List[98, 91, 75, 255], List[99, 80, 82, 255], List[116, 70, 112, 255], \
List[139, 84, 124, 255], List[133, 84, 121, 255], List[130, 85, 119, 255], \
List[128, 81, 128, 255], List[128, 78, 134, 255], List[124, 81, 133, 255], \
List[128, 78, 137, 255], List[123, 75, 139, 255], List[117, 78, 138, 255], \
List[116, 82, 136, 255], List[114, 78, 136, 255], List[111, 76, 135, 255], \
List[118, 77, 135, 255], List[131, 77, 132, 255]], List[List[65, 81, 80, \
255], List[68, 80, 75, 255], List[62, 78, 78, 255], List[63, 80, 77, 255], \
List[68, 77, 70, 255], List[63, 73, 61, 255], List[78, 78, 64, 255], \
List[109, 92, 77, 255], List[108, 101, 92, 255], List[115, 103, 98, 255], \
List[118, 90, 77, 255], List[120, 95, 83, 255], List[133, 81, 53, 255], \
List[123, 81, 62, 255], List[93, 76, 76, 255], List[97, 53, 42, 255], \
List[88, 53, 45, 255], List[101, 105, 112, 255], List[79, 77, 87, 255], \
List[103, 61, 47, 255], List[121, 80, 56, 255], List[107, 68, 50, 255], \
List[101, 65, 47, 255], List[102, 72, 59, 255], List[88, 99, 115, 255], \
List[98, 112, 130, 255], List[156, 121, 108, 255], List[130, 90, 75, 255], \
List[142, 98, 85, 255], List[210, 114, 87, 255], List[206, 113, 87, 255], \
List[212, 110, 83, 255], List[150, 104, 89, 255], List[113, 114, 109, 255], \
List[118, 113, 105, 255], List[116, 111, 104, 255], List[113, 109, 103, 255], \
List[111, 108, 102, 255], List[112, 107, 100, 255], List[96, 98, 104, 255], \
List[83, 89, 98, 255], List[75, 79, 88, 255], List[64, 72, 83, 255], List[50, \
74, 82, 255], List[52, 73, 81, 255], List[96, 96, 91, 255], List[105, 96, 85, \
255], List[99, 87, 75, 255], List[101, 90, 79, 255], List[104, 93, 80, 255], \
List[108, 96, 82, 255], List[115, 101, 83, 255], List[118, 105, 88, 255], \
List[121, 107, 91, 255], List[122, 108, 93, 255], List[126, 111, 92, 255], \
List[108, 97, 82, 255], List[95, 88, 78, 255], List[98, 92, 77, 255], \
List[95, 77, 86, 255], List[119, 67, 112, 255], List[140, 77, 121, 255], \
List[131, 77, 122, 255], List[127, 82, 128, 255], List[127, 82, 129, 255], \
List[129, 82, 127, 255], List[126, 82, 129, 255], List[124, 79, 132, 255], \
List[119, 78, 137, 255], List[112, 81, 135, 255], List[112, 78, 135, 255], \
List[116, 75, 134, 255], List[114, 77, 131, 255], List[118, 77, 126, 255], \
List[125, 75, 129, 255]], List[List[71, 87, 77, 255], List[64, 79, 77, 255], \
List[68, 83, 75, 255], List[70, 81, 68, 255], List[67, 72, 60, 255], List[58, \
69, 59, 255], List[77, 78, 65, 255], List[119, 89, 64, 255], List[99, 123, \
128, 255], List[82, 147, 180, 255], List[86, 148, 176, 255], List[101, 127, \
139, 255], List[117, 89, 77, 255], List[97, 144, 164, 255], List[101, 146, \
164, 255], List[93, 95, 98, 255], List[92, 113, 124, 255], List[99, 147, 166, \
255], List[95, 144, 164, 255], List[102, 102, 101, 255], List[110, 74, 57, \
255], List[93, 98, 102, 255], List[96, 81, 74, 255], List[80, 86, 97, 255], \
List[53, 62, 86, 255], List[120, 121, 124, 255], List[143, 144, 135, 255], \
List[133, 95, 84, 255], List[185, 97, 75, 255], List[207, 113, 88, 255], \
List[207, 109, 83, 255], List[143, 97, 82, 255], List[102, 106, 101, 255], \
List[116, 112, 106, 255], List[114, 110, 105, 255], List[113, 109, 103, 255], \
List[109, 106, 102, 255], List[109, 106, 102, 255], List[107, 102, 98, 255], \
List[95, 93, 95, 255], List[82, 84, 85, 255], List[75, 73, 77, 255], List[67, \
64, 79, 255], List[50, 65, 79, 255], List[59, 70, 79, 255], List[106, 103, \
96, 255], List[100, 92, 83, 255], List[96, 84, 74, 255], List[98, 87, 77, \
255], List[103, 90, 78, 255], List[107, 95, 83, 255], List[112, 98, 82, 255], \
List[116, 103, 88, 255], List[120, 105, 89, 255], List[122, 108, 92, 255], \
List[123, 108, 90, 255], List[101, 92, 79, 255], List[92, 84, 74, 255], \
List[96, 89, 74, 255], List[91, 73, 83, 255], List[116, 64, 117, 255], \
List[135, 72, 132, 255], List[128, 72, 133, 255], List[127, 75, 129, 255], \
List[130, 79, 121, 255], List[131, 82, 121, 255], List[128, 80, 125, 255], \
List[123, 80, 128, 255], List[116, 83, 129, 255], List[110, 85, 126, 255], \
List[115, 83, 124, 255], List[119, 76, 122, 255], List[118, 77, 126, 255], \
List[121, 77, 128, 255], List[125, 79, 128, 255]], List[List[115, 111, 100, \
255], List[111, 106, 99, 255], List[108, 105, 96, 255], List[104, 100, 92, \
255], List[102, 95, 90, 255], List[98, 95, 91, 255], List[96, 93, 90, 255], \
List[112, 91, 73, 255], List[78, 137, 161, 255], List[60, 150, 198, 255], \
List[69, 150, 189, 255], List[76, 149, 183, 255], List[79, 149, 181, 255], \
List[79, 153, 186, 255], List[83, 146, 174, 255], List[85, 149, 178, 255], \
List[84, 147, 175, 255], List[81, 140, 167, 255], List[78, 143, 171, 255], \
List[79, 134, 159, 255], List[81, 116, 134, 255], List[66, 130, 162, 255], \
List[66, 125, 153, 255], List[52, 80, 106, 255], List[74, 79, 96, 255], \
List[155, 152, 143, 255], List[128, 124, 116, 255], List[127, 131, 124, 255], \
List[133, 108, 97, 255], List[184, 96, 74, 255], List[147, 99, 84, 255], \
List[129, 132, 126, 255], List[127, 124, 117, 255], List[104, 101, 97, 255], \
List[106, 102, 97, 255], List[106, 103, 99, 255], List[106, 103, 100, 255], \
List[107, 105, 100, 255], List[99, 92, 94, 255], List[90, 79, 88, 255], \
List[81, 77, 80, 255], List[76, 68, 75, 255], List[65, 62, 80, 255], List[46, \
56, 77, 255], List[69, 72, 82, 255], List[108, 106, 98, 255], List[96, 89, \
83, 255], List[92, 81, 72, 255], List[96, 85, 76, 255], List[98, 87, 77, \
255], List[103, 91, 80, 255], List[109, 95, 80, 255], List[112, 99, 85, 255], \
List[115, 100, 85, 255], List[120, 106, 89, 255], List[117, 103, 87, 255], \
List[93, 85, 73, 255], List[92, 84, 73, 255], List[93, 85, 70, 255], List[91, \
70, 81, 255], List[114, 64, 120, 255], List[130, 70, 137, 255], List[127, 72, \
130, 255], List[126, 75, 124, 255], List[129, 80, 118, 255], List[134, 84, \
116, 255], List[130, 80, 118, 255], List[127, 82, 120, 255], List[124, 85, \
120, 255], List[119, 85, 119, 255], List[122, 83, 120, 255], List[126, 80, \
122, 255], List[126, 74, 124, 255], List[127, 74, 125, 255], List[128, 77, \
124, 255]], List[List[143, 133, 125, 255], List[144, 132, 125, 255], \
List[144, 132, 125, 255], List[141, 129, 123, 255], List[137, 125, 117, 255], \
List[131, 120, 109, 255], List[125, 113, 94, 255], List[112, 114, 114, 255], \
List[49, 139, 186, 255], List[46, 137, 186, 255], List[55, 140, 184, 255], \
List[60, 145, 185, 255], List[61, 145, 184, 255], List[65, 142, 178, 255], \
List[68, 139, 175, 255], List[68, 139, 174, 255], List[68, 138, 171, 255], \
List[67, 138, 171, 255], List[65, 135, 168, 255], List[61, 133, 167, 255], \
List[56, 132, 167, 255], List[51, 122, 159, 255], List[48, 115, 150, 255], \
List[62, 76, 98, 255], List[143, 140, 138, 255], List[143, 138, 129, 255], \
List[127, 124, 117, 255], List[136, 131, 124, 255], List[138, 138, 131, 255], \
List[130, 118, 110, 255], List[134, 132, 125, 255], List[144, 141, 132, 255], \
List[134, 131, 123, 255], List[134, 131, 124, 255], List[127, 123, 115, 255], \
List[115, 112, 105, 255], List[104, 102, 97, 255], List[98, 95, 90, 255], \
List[102, 99, 104, 255], List[96, 96, 105, 255], List[73, 75, 87, 255], \
List[62, 57, 74, 255], List[58, 56, 73, 255], List[44, 51, 72, 255], List[83, \
84, 87, 255], List[106, 103, 97, 255], List[94, 89, 84, 255], List[90, 80, \
72, 255], List[93, 83, 73, 255], List[96, 86, 76, 255], List[101, 89, 78, \
255], List[106, 92, 78, 255], List[110, 96, 83, 255], List[115, 100, 86, \
255], List[117, 101, 87, 255], List[111, 97, 81, 255], List[90, 83, 71, 255], \
List[90, 82, 73, 255], List[91, 85, 70, 255], List[91, 69, 82, 255], \
List[118, 64, 118, 255], List[131, 72, 128, 255], List[125, 74, 122, 255], \
List[126, 79, 116, 255], List[130, 83, 114, 255], List[133, 78, 114, 255], \
List[132, 76, 118, 255], List[130, 81, 125, 255], List[125, 80, 120, 255], \
List[121, 80, 112, 255], List[119, 79, 114, 255], List[124, 76, 116, 255], \
List[130, 73, 118, 255], List[133, 71, 116, 255], List[134, 74, 126, 255]], \
List[List[157, 143, 131, 255], List[148, 136, 120, 255], List[138, 129, 107, \
255], List[128, 120, 92, 255], List[119, 113, 80, 255], List[114, 109, 78, \
255], List[117, 104, 69, 255], List[101, 129, 134, 255], List[39, 139, 194, \
255], List[38, 131, 183, 255], List[41, 135, 185, 255], List[44, 136, 183, \
255], List[46, 136, 180, 255], List[49, 134, 178, 255], List[51, 132, 176, \
255], List[51, 131, 173, 255], List[43, 127, 170, 255], List[42, 125, 167, \
255], List[43, 124, 165, 255], List[40, 121, 162, 255], List[38, 115, 156, \
255], List[32, 113, 158, 255], List[41, 95, 130, 255], List[116, 117, 122, \
255], List[161, 158, 147, 255], List[129, 126, 119, 255], List[135, 132, 124, \
255], List[137, 134, 126, 255], List[139, 135, 127, 255], List[142, 140, 133, \
255], List[142, 138, 130, 255], List[134, 130, 123, 255], List[99, 97, 92, \
255], List[102, 99, 93, 255], List[117, 113, 107, 255], List[130, 127, 119, \
255], List[140, 136, 127, 255], List[132, 128, 122, 255], List[128, 125, 122, \
255], List[140, 137, 129, 255], List[137, 134, 129, 255], List[99, 96, 103, \
255], List[47, 48, 67, 255], List[51, 55, 72, 255], List[97, 95, 90, 255], \
List[102, 99, 94, 255], List[93, 89, 83, 255], List[87, 79, 70, 255], \
List[92, 82, 73, 255], List[95, 85, 76, 255], List[100, 88, 77, 255], \
List[103, 91, 78, 255], List[106, 93, 81, 255], List[110, 96, 82, 255], \
List[114, 99, 86, 255], List[104, 92, 78, 255], List[87, 80, 69, 255], \
List[90, 81, 71, 255], List[89, 84, 69, 255], List[91, 67, 81, 255], \
List[121, 68, 117, 255], List[129, 79, 127, 255], List[127, 79, 122, 255], \
List[131, 81, 117, 255], List[129, 77, 116, 255], List[130, 72, 118, 255], \
List[132, 71, 121, 255], List[132, 74, 124, 255], List[126, 75, 117, 255], \
List[122, 77, 110, 255], List[126, 76, 113, 255], List[130, 80, 116, 255], \
List[130, 81, 118, 255], List[132, 79, 121, 255], List[137, 76, 131, 255]], \
List[List[127, 119, 89, 255], List[118, 110, 78, 255], List[113, 106, 76, \
255], List[111, 104, 75, 255], List[113, 107, 78, 255], List[114, 109, 80, \
255], List[118, 103, 69, 255], List[91, 127, 129, 255], List[53, 144, 191, \
255], List[51, 136, 182, 255], List[51, 137, 182, 255], List[50, 136, 180, \
255], List[48, 136, 179, 255], List[49, 132, 176, 255], List[47, 129, 174, \
255], List[49, 130, 171, 255], List[78, 142, 173, 255], List[76, 140, 172, \
255], List[66, 136, 170, 255], List[58, 131, 167, 255], List[49, 123, 164, \
255], List[36, 113, 157, 255], List[80, 108, 125, 255], List[168, 160, 150, \
255], List[141, 138, 130, 255], List[134, 131, 124, 255], List[137, 134, 126, \
255], List[138, 135, 127, 255], List[138, 135, 127, 255], List[138, 134, 126, \
255], List[138, 135, 127, 255], List[123, 120, 113, 255], List[114, 110, 104, \
255], List[121, 118, 111, 255], List[114, 111, 104, 255], List[104, 101, 95, \
255], List[99, 96, 91, 255], List[104, 100, 97, 255], List[137, 132, 125, \
255], List[139, 136, 127, 255], List[144, 140, 130, 255], List[140, 137, 128, \
255], List[52, 59, 77, 255], List[60, 64, 74, 255], List[104, 99, 90, 255], \
List[99, 95, 90, 255], List[93, 89, 82, 255], List[84, 76, 68, 255], List[89, \
79, 70, 255], List[92, 82, 73, 255], List[96, 85, 73, 255], List[101, 90, 77, \
255], List[105, 94, 81, 255], List[108, 94, 81, 255], List[113, 99, 85, 255], \
List[95, 86, 73, 255], List[84, 78, 68, 255], List[88, 79, 70, 255], List[87, \
81, 69, 255], List[90, 67, 80, 255], List[126, 80, 123, 255], List[132, 87, \
135, 255], List[129, 84, 123, 255], List[131, 79, 115, 255], List[127, 74, \
114, 255], List[129, 73, 114, 255], List[130, 73, 114, 255], List[131, 73, \
115, 255], List[130, 75, 116, 255], List[129, 82, 118, 255], List[130, 82, \
117, 255], List[129, 82, 118, 255], List[136, 82, 125, 255], List[138, 83, \
130, 255], List[143, 77, 134, 255]], List[List[112, 106, 74, 255], List[111, \
104, 74, 255], List[113, 106, 77, 255], List[115, 108, 78, 255], List[111, \
104, 74, 255], List[108, 102, 75, 255], List[116, 104, 70, 255], List[104, \
117, 104, 255], List[65, 150, 195, 255], List[65, 142, 181, 255], List[65, \
146, 184, 255], List[63, 147, 186, 255], List[63, 141, 176, 255], List[65, \
136, 172, 255], List[62, 134, 170, 255], List[67, 134, 167, 255], List[130, \
135, 133, 255], List[140, 137, 130, 255], List[140, 141, 136, 255], List[142, \
144, 138, 255], List[142, 145, 141, 255], List[136, 144, 143, 255], List[172, \
169, 160, 255], List[161, 156, 146, 255], List[134, 131, 124, 255], List[138, \
135, 127, 255], List[138, 134, 126, 255], List[138, 135, 127, 255], List[138, \
134, 127, 255], List[137, 133, 125, 255], List[132, 129, 122, 255], List[123, \
120, 113, 255], List[101, 99, 93, 255], List[100, 98, 92, 255], List[109, \
106, 100, 255], List[121, 118, 111, 255], List[130, 126, 119, 255], List[124, \
117, 116, 255], List[144, 139, 133, 255], List[148, 145, 136, 255], List[149, \
145, 136, 255], List[133, 130, 124, 255], List[47, 60, 72, 255], List[76, 79, \
77, 255], List[101, 97, 89, 255], List[96, 93, 87, 255], List[93, 90, 84, \
255], List[84, 77, 70, 255], List[89, 81, 72, 255], List[92, 83, 73, 255], \
List[97, 86, 73, 255], List[99, 88, 75, 255], List[101, 90, 79, 255], \
List[105, 94, 81, 255], List[110, 97, 83, 255], List[87, 79, 69, 255], \
List[84, 77, 67, 255], List[86, 78, 68, 255], List[86, 81, 68, 255], List[90, \
64, 81, 255], List[130, 85, 125, 255], List[135, 91, 132, 255], List[125, 84, \
119, 255], List[122, 77, 110, 255], List[112, 71, 104, 255], List[104, 81, \
110, 255], List[121, 90, 115, 255], List[131, 92, 114, 255], List[132, 87, \
113, 255], List[134, 82, 114, 255], List[134, 78, 118, 255], List[141, 69, \
127, 255], List[145, 68, 131, 255], List[145, 74, 132, 255], List[144, 77, \
129, 255]], List[List[112, 106, 76, 255], List[111, 106, 73, 255], List[113, \
106, 75, 255], List[113, 106, 76, 255], List[111, 103, 74, 255], List[113, \
105, 75, 255], List[112, 106, 75, 255], List[110, 105, 78, 255], List[98, \
111, 117, 255], List[80, 150, 184, 255], List[86, 138, 163, 255], List[89, \
125, 143, 255], List[77, 144, 175, 255], List[80, 137, 164, 255], List[78, \
143, 172, 255], List[75, 137, 167, 255], List[66, 124, 152, 255], List[66, \
126, 154, 255], List[70, 114, 134, 255], List[73, 109, 126, 255], List[74, \
104, 118, 255], List[82, 91, 95, 255], List[108, 108, 106, 255], List[134, \
130, 124, 255], List[144, 140, 131, 255], List[138, 134, 126, 255], List[139, \
135, 127, 255], List[139, 135, 127, 255], List[137, 133, 125, 255], List[134, \
131, 124, 255], List[131, 128, 120, 255], List[104, 102, 96, 255], List[117, \
113, 106, 255], List[123, 119, 112, 255], List[121, 118, 110, 255], List[111, \
107, 102, 255], List[94, 93, 84, 255], List[125, 123, 115, 255], List[161, \
156, 147, 255], List[153, 150, 141, 255], List[158, 152, 142, 255], List[112, \
114, 115, 255], List[39, 58, 70, 255], List[94, 92, 88, 255], List[102, 96, \
90, 255], List[100, 96, 90, 255], List[90, 86, 81, 255], List[72, 67, 64, \
255], List[73, 68, 64, 255], List[78, 72, 68, 255], List[85, 76, 68, 255], \
List[90, 81, 72, 255], List[95, 86, 76, 255], List[100, 90, 79, 255], \
List[101, 89, 78, 255], List[84, 78, 69, 255], List[82, 76, 68, 255], \
List[84, 75, 67, 255], List[83, 76, 66, 255], List[91, 60, 83, 255], \
List[125, 81, 117, 255], List[131, 89, 120, 255], List[125, 78, 113, 255], \
List[124, 70, 110, 255], List[106, 68, 104, 255], List[86, 74, 113, 255], \
List[93, 79, 123, 255], List[106, 93, 128, 255], List[123, 99, 136, 255], \
List[133, 100, 139, 255], List[134, 96, 135, 255], List[138, 90, 133, 255], \
List[137, 83, 133, 255], List[140, 81, 130, 255], List[141, 80, 125, 255]], \
List[List[113, 106, 74, 255], List[113, 107, 75, 255], List[109, 102, 71, \
255], List[110, 104, 75, 255], List[115, 107, 76, 255], List[113, 105, 75, \
255], List[112, 105, 75, 255], List[112, 106, 73, 255], List[116, 73, 48, \
255], List[97, 103, 107, 255], List[106, 83, 71, 255], List[111, 67, 47, \
255], List[96, 125, 139, 255], List[94, 136, 153, 255], List[88, 107, 117, \
255], List[87, 130, 148, 255], List[93, 144, 165, 255], List[88, 138, 160, \
255], List[97, 88, 85, 255], List[93, 86, 85, 255], List[89, 76, 72, 255], \
List[78, 71, 70, 255], List[56, 69, 66, 255], List[75, 76, 63, 255], \
List[132, 128, 123, 255], List[146, 143, 133, 255], List[138, 134, 126, 255], \
List[138, 134, 127, 255], List[135, 132, 124, 255], List[132, 129, 122, 255], \
List[119, 116, 109, 255], List[119, 116, 109, 255], List[125, 120, 113, 255], \
List[120, 115, 111, 255], List[117, 113, 108, 255], List[129, 126, 119, 255], \
List[132, 130, 119, 255], List[154, 150, 139, 255], List[164, 159, 150, 255], \
List[162, 159, 149, 255], List[156, 151, 143, 255], List[95, 100, 82, 255], \
List[58, 66, 52, 255], List[81, 75, 65, 255], List[81, 75, 71, 255], List[92, \
85, 83, 255], List[102, 94, 92, 255], List[92, 89, 91, 255], List[76, 73, 76, \
255], List[60, 58, 61, 255], List[44, 45, 52, 255], List[36, 39, 47, 255], \
List[33, 36, 43, 255], List[25, 30, 40, 255], List[40, 41, 46, 255], List[76, \
69, 60, 255], List[79, 75, 66, 255], List[85, 82, 67, 255], List[74, 79, 62, \
255], List[83, 60, 81, 255], List[124, 82, 118, 255], List[128, 85, 117, \
255], List[123, 74, 109, 255], List[126, 68, 110, 255], List[106, 64, 107, \
255], List[88, 66, 113, 255], List[89, 72, 116, 255], List[88, 77, 115, 255], \
List[92, 79, 125, 255], List[107, 87, 144, 255], List[119, 99, 155, 255], \
List[119, 103, 155, 255], List[121, 105, 154, 255], List[124, 101, 155, 255], \
List[130, 101, 152, 255]], List[List[113, 108, 73, 255], List[112, 105, 72, \
255], List[110, 103, 73, 255], List[111, 102, 72, 255], List[112, 103, 72, \
255], List[110, 103, 72, 255], List[111, 103, 71, 255], List[111, 106, 72, \
255], List[121, 104, 85, 255], List[139, 99, 85, 255], List[147, 101, 79, \
255], List[131, 88, 68, 255], List[93, 109, 123, 255], List[88, 95, 103, \
255], List[79, 33, 21, 255], List[86, 81, 84, 255], List[78, 101, 117, 255], \
List[88, 67, 63, 255], List[111, 69, 48, 255], List[97, 62, 47, 255], \
List[87, 54, 40, 255], List[106, 96, 94, 255], List[87, 91, 79, 255], \
List[49, 60, 29, 255], List[59, 62, 50, 255], List[120, 118, 111, 255], \
List[143, 140, 131, 255], List[135, 132, 124, 255], List[134, 131, 123, 255], \
List[134, 131, 122, 255], List[115, 112, 108, 255], List[115, 109, 104, 255], \
List[123, 117, 111, 255], List[128, 124, 118, 255], List[135, 130, 123, 255], \
List[147, 143, 135, 255], List[151, 148, 140, 255], List[170, 166, 156, 255], \
List[170, 166, 155, 255], List[168, 165, 154, 255], List[144, 141, 133, 255], \
List[119, 118, 95, 255], List[119, 117, 96, 255], List[130, 125, 108, 255], \
List[123, 123, 116, 255], List[126, 129, 126, 255], List[141, 141, 130, 255], \
List[155, 144, 124, 255], List[150, 142, 126, 255], List[152, 145, 126, 255], \
List[146, 139, 118, 255], List[132, 128, 115, 255], List[123, 124, 117, 255], \
List[106, 109, 105, 255], List[103, 102, 97, 255], List[113, 108, 91, 255], \
List[88, 71, 84, 255], List[95, 44, 97, 255], List[116, 60, 94, 255], \
List[104, 54, 95, 255], List[122, 87, 120, 255], List[121, 84, 119, 255], \
List[112, 73, 106, 255], List[111, 65, 99, 255], List[96, 67, 101, 255], \
List[87, 69, 113, 255], List[88, 70, 112, 255], List[90, 74, 112, 255], \
List[89, 74, 113, 255], List[91, 72, 118, 255], List[91, 74, 117, 255], \
List[90, 79, 115, 255], List[93, 81, 120, 255], List[94, 82, 125, 255], \
List[98, 81, 132, 255]], List[List[115, 104, 70, 255], List[108, 103, 71, \
255], List[110, 107, 74, 255], List[111, 107, 75, 255], List[108, 100, 68, \
255], List[111, 102, 71, 255], List[112, 103, 72, 255], List[106, 99, 65, \
255], List[131, 121, 100, 255], List[161, 150, 149, 255], List[168, 150, 147, \
255], List[174, 151, 146, 255], List[163, 149, 148, 255], List[148, 126, 123, \
255], List[113, 95, 91, 255], List[111, 92, 89, 255], List[110, 85, 83, 255], \
List[106, 67, 53, 255], List[100, 63, 47, 255], List[86, 52, 41, 255], \
List[89, 62, 54, 255], List[138, 126, 121, 255], List[122, 117, 105, 255], \
List[96, 102, 79, 255], List[108, 109, 93, 255], List[96, 93, 90, 255], \
List[115, 111, 106, 255], List[143, 139, 131, 255], List[129, 125, 118, 255], \
List[98, 95, 91, 255], List[113, 112, 95, 255], List[133, 130, 117, 255], \
List[139, 133, 125, 255], List[134, 128, 123, 255], List[126, 121, 117, 255], \
List[128, 125, 119, 255], List[173, 167, 157, 255], List[176, 172, 161, 255], \
List[179, 175, 163, 255], List[161, 156, 147, 255], List[139, 136, 127, 255], \
List[152, 149, 139, 255], List[147, 146, 139, 255], List[150, 151, 142, 255], \
List[150, 146, 133, 255], List[157, 147, 126, 255], List[159, 149, 124, 255], \
List[157, 145, 121, 255], List[145, 145, 132, 255], List[141, 143, 132, 255], \
List[144, 145, 134, 255], List[146, 146, 132, 255], List[151, 152, 140, 255], \
List[154, 153, 137, 255], List[161, 152, 130, 255], List[160, 148, 115, 255], \
List[116, 96, 117, 255], List[37, 12, 98, 255], List[63, 21, 84, 255], \
List[127, 25, 115, 255], List[149, 42, 128, 255], List[124, 67, 120, 255], \
List[110, 77, 100, 255], List[103, 66, 92, 255], List[93, 68, 97, 255], \
List[88, 75, 114, 255], List[88, 76, 119, 255], List[89, 78, 114, 255], \
List[89, 74, 114, 255], List[92, 69, 117, 255], List[87, 69, 110, 255], \
List[86, 72, 110, 255], List[86, 71, 109, 255], List[85, 69, 107, 255], \
List[87, 69, 111, 255]], List[List[124, 71, 39, 255], List[122, 78, 46, 255], \
List[119, 89, 56, 255], List[113, 97, 66, 255], List[115, 106, 76, 255], \
List[108, 102, 72, 255], List[107, 103, 73, 255], List[105, 103, 71, 255], \
List[123, 115, 85, 255], List[183, 154, 142, 255], List[174, 150, 140, 255], \
List[164, 146, 140, 255], List[154, 138, 134, 255], List[160, 144, 140, 255], \
List[178, 157, 152, 255], List[168, 147, 141, 255], List[138, 126, 121, 255], \
List[120, 91, 79, 255], List[91, 53, 39, 255], List[81, 47, 36, 255], \
List[108, 84, 76, 255], List[140, 130, 126, 255], List[121, 116, 111, 255], \
List[112, 107, 105, 255], List[88, 87, 80, 255], List[62, 66, 53, 255], \
List[58, 61, 49, 255], List[109, 107, 102, 255], List[103, 100, 95, 255], \
List[85, 84, 78, 255], List[96, 95, 81, 255], List[91, 92, 76, 255], \
List[113, 109, 101, 255], List[132, 126, 118, 255], List[138, 133, 126, 255], \
List[168, 164, 154, 255], List[180, 174, 164, 255], List[183, 178, 167, 255], \
List[180, 175, 164, 255], List[144, 140, 132, 255], List[149, 144, 131, 255], \
List[152, 146, 131, 255], List[151, 147, 133, 255], List[155, 148, 127, 255], \
List[153, 141, 118, 255], List[151, 143, 123, 255], List[144, 144, 131, 255], \
List[142, 146, 137, 255], List[143, 142, 129, 255], List[145, 143, 127, 255], \
List[144, 142, 128, 255], List[143, 144, 134, 255], List[147, 138, 121, 255], \
List[161, 139, 106, 255], List[151, 141, 119, 255], List[139, 136, 125, 255], \
List[135, 138, 132, 255], List[90, 92, 109, 255], List[14, 27, 77, 255], \
List[14, 18, 92, 255], List[69, 16, 114, 255], List[121, 22, 148, 255], \
List[135, 40, 141, 255], List[121, 55, 107, 255], List[99, 74, 93, 255], \
List[92, 77, 112, 255], List[91, 72, 118, 255], List[89, 77, 119, 255], \
List[89, 77, 121, 255], List[91, 74, 120, 255], List[87, 73, 112, 255], \
List[87, 75, 110, 255], List[86, 74, 111, 255], List[86, 72, 111, 255], \
List[88, 70, 114, 255]], List[List[122, 67, 35, 255], List[123, 63, 32, 255], \
List[125, 66, 33, 255], List[125, 71, 39, 255], List[151, 94, 57, 255], \
List[151, 97, 57, 255], List[140, 95, 58, 255], List[132, 99, 63, 255], \
List[123, 100, 66, 255], List[160, 135, 122, 255], List[173, 146, 136, 255], \
List[179, 149, 138, 255], List[183, 154, 143, 255], List[174, 150, 141, 255], \
List[137, 126, 121, 255], List[128, 108, 101, 255], List[116, 99, 95, 255], \
List[109, 81, 69, 255], List[99, 60, 41, 255], List[82, 49, 37, 255], \
List[114, 98, 90, 255], List[132, 122, 118, 255], List[124, 113, 110, 255], \
List[121, 110, 108, 255], List[100, 93, 90, 255], List[61, 66, 49, 255], \
List[47, 58, 32, 255], List[71, 76, 48, 255], List[82, 87, 54, 255], List[77, \
86, 44, 255], List[80, 84, 59, 255], List[90, 91, 77, 255], List[104, 101, \
94, 255], List[104, 101, 95, 255], List[160, 155, 145, 255], List[192, 186, \
175, 255], List[186, 180, 170, 255], List[189, 183, 172, 255], List[157, 152, \
143, 255], List[125, 123, 116, 255], List[109, 110, 103, 255], List[123, 122, \
115, 255], List[127, 123, 118, 255], List[136, 138, 133, 255], List[140, 143, \
134, 255], List[145, 144, 132, 255], List[145, 143, 133, 255], List[147, 147, \
137, 255], List[153, 149, 135, 255], List[157, 149, 128, 255], List[160, 148, \
120, 255], List[155, 149, 129, 255], List[149, 143, 126, 255], List[152, 149, \
135, 255], List[144, 148, 141, 255], List[140, 143, 137, 255], List[137, 137, \
131, 255], List[130, 125, 108, 255], List[55, 52, 77, 255], List[15, 14, 92, \
255], List[23, 25, 75, 255], List[32, 24, 80, 255], List[69, 25, 124, 255], \
List[93, 27, 124, 255], List[98, 45, 105, 255], List[94, 69, 103, 255], \
List[93, 71, 115, 255], List[93, 71, 117, 255], List[93, 74, 119, 255], \
List[92, 76, 118, 255], List[87, 75, 117, 255], List[87, 77, 115, 255], \
List[87, 76, 116, 255], List[87, 75, 118, 255], List[88, 73, 118, 255]], \
List[List[123, 67, 35, 255], List[123, 68, 35, 255], List[126, 72, 38, 255], \
List[121, 68, 36, 255], List[143, 78, 40, 255], List[163, 91, 46, 255], \
List[166, 92, 47, 255], List[165, 91, 48, 255], List[149, 80, 39, 255], \
List[141, 92, 65, 255], List[164, 142, 133, 255], List[167, 142, 132, 255], \
List[157, 133, 123, 255], List[134, 112, 105, 255], List[117, 99, 92, 255], \
List[113, 93, 88, 255], List[120, 105, 99, 255], List[104, 75, 62, 255], \
List[93, 52, 32, 255], List[96, 70, 56, 255], List[120, 110, 101, 255], \
List[129, 119, 109, 255], List[138, 126, 115, 255], List[144, 131, 118, 255], \
List[140, 127, 117, 255], List[123, 110, 107, 255], List[82, 81, 68, 255], \
List[76, 80, 47, 255], List[73, 79, 44, 255], List[70, 77, 43, 255], List[65, \
72, 37, 255], List[77, 79, 54, 255], List[144, 134, 131, 255], List[141, 133, \
128, 255], List[136, 133, 127, 255], List[162, 163, 152, 255], List[186, 187, \
173, 255], List[160, 158, 148, 255], List[132, 132, 123, 255], List[91, 89, \
82, 255], List[87, 86, 78, 255], List[81, 76, 73, 255], List[83, 79, 79, \
255], List[88, 94, 90, 255], List[92, 98, 95, 255], List[97, 96, 95, 255], \
List[106, 105, 101, 255], List[110, 109, 102, 255], List[112, 112, 106, 255], \
List[113, 111, 106, 255], List[122, 119, 108, 255], List[131, 120, 110, 255], \
List[128, 115, 106, 255], List[123, 111, 104, 255], List[119, 105, 97, 255], \
List[102, 102, 96, 255], List[90, 90, 87, 255], List[68, 69, 64, 255], \
List[27, 32, 55, 255], List[19, 20, 87, 255], List[29, 22, 80, 255], List[31, \
25, 79, 255], List[32, 30, 92, 255], List[33, 29, 97, 255], List[33, 18, 96, \
255], List[75, 53, 97, 255], List[101, 79, 114, 255], List[91, 70, 116, 255], \
List[94, 73, 116, 255], List[93, 73, 115, 255], List[91, 69, 115, 255], \
List[91, 70, 116, 255], List[91, 70, 116, 255], List[91, 71, 115, 255], \
List[90, 73, 114, 255]], List[List[124, 68, 36, 255], List[126, 68, 36, 255], \
List[125, 69, 36, 255], List[121, 68, 36, 255], List[137, 76, 39, 255], \
List[151, 84, 45, 255], List[151, 83, 44, 255], List[150, 83, 43, 255], \
List[142, 78, 38, 255], List[132, 76, 43, 255], List[154, 129, 119, 255], \
List[136, 116, 109, 255], List[115, 102, 98, 255], List[111, 95, 89, 255], \
List[116, 101, 94, 255], List[118, 101, 95, 255], List[118, 104, 97, 255], \
List[108, 86, 76, 255], List[113, 94, 80, 255], List[126, 118, 109, 255], \
List[132, 125, 119, 255], List[129, 122, 116, 255], List[129, 121, 114, 255], \
List[130, 120, 113, 255], List[137, 126, 118, 255], List[147, 135, 128, 255], \
List[142, 131, 125, 255], List[137, 128, 121, 255], List[146, 137, 131, 255], \
List[153, 143, 136, 255], List[168, 155, 151, 255], List[158, 146, 136, 255], \
List[122, 113, 101, 255], List[126, 115, 104, 255], List[69, 66, 60, 255], \
List[80, 51, 59, 255], List[112, 87, 92, 255], List[142, 128, 125, 255], \
List[118, 94, 98, 255], List[83, 86, 80, 255], List[87, 85, 80, 255], \
List[84, 82, 79, 255], List[87, 87, 85, 255], List[80, 84, 79, 255], List[87, \
91, 87, 255], List[85, 74, 72, 255], List[88, 86, 83, 255], List[93, 93, 90, \
255], List[93, 94, 88, 255], List[95, 95, 92, 255], List[97, 98, 92, 255], \
List[109, 94, 90, 255], List[105, 82, 74, 255], List[110, 88, 82, 255], \
List[98, 82, 78, 255], List[87, 88, 85, 255], List[80, 81, 78, 255], List[67, \
66, 62, 255], List[26, 29, 54, 255], List[13, 20, 72, 255], List[24, 21, 77, \
255], List[35, 25, 88, 255], List[37, 28, 90, 255], List[45, 24, 94, 255], \
List[41, 20, 94, 255], List[86, 62, 95, 255], List[104, 78, 111, 255], \
List[96, 72, 115, 255], List[106, 80, 107, 255], List[98, 75, 107, 255], \
List[89, 69, 115, 255], List[91, 70, 114, 255], List[90, 70, 114, 255], \
List[92, 70, 113, 255], List[95, 73, 110, 255]], List[List[124, 67, 35, 255], \
List[126, 68, 35, 255], List[124, 69, 36, 255], List[121, 66, 35, 255], \
List[130, 72, 38, 255], List[136, 75, 40, 255], List[139, 78, 41, 255], \
List[138, 77, 41, 255], List[128, 68, 35, 255], List[120, 67, 37, 255], \
List[118, 98, 91, 255], List[110, 95, 90, 255], List[112, 97, 90, 255], \
List[115, 100, 94, 255], List[115, 101, 93, 255], List[116, 97, 93, 255], \
List[117, 100, 95, 255], List[133, 122, 115, 255], List[142, 134, 129, 255], \
List[143, 131, 123, 255], List[129, 115, 105, 255], List[141, 128, 115, 255], \
List[161, 149, 134, 255], List[187, 174, 159, 255], List[202, 190, 172, 255], \
List[181, 173, 152, 255], List[184, 176, 156, 255], List[216, 205, 185, 255], \
List[231, 220, 199, 255], List[227, 216, 196, 255], List[185, 176, 152, 255], \
List[134, 129, 102, 255], List[130, 125, 102, 255], List[128, 119, 103, 255], \
List[140, 133, 114, 255], List[151, 108, 110, 255], List[142, 22, 79, 255], \
List[137, 34, 97, 255], List[108, 62, 83, 255], List[88, 90, 75, 255], \
List[89, 86, 84, 255], List[85, 88, 84, 255], List[90, 90, 84, 255], List[88, \
89, 83, 255], List[90, 93, 88, 255], List[89, 88, 86, 255], List[87, 85, 79, \
255], List[98, 95, 86, 255], List[100, 97, 88, 255], List[98, 96, 86, 255], \
List[102, 99, 90, 255], List[104, 94, 88, 255], List[100, 86, 80, 255], \
List[104, 89, 83, 255], List[91, 83, 79, 255], List[90, 89, 83, 255], \
List[82, 81, 75, 255], List[62, 61, 56, 255], List[22, 22, 54, 255], List[17, \
18, 71, 255], List[28, 22, 78, 255], List[24, 23, 90, 255], List[25, 27, 92, \
255], List[33, 24, 92, 255], List[35, 20, 100, 255], List[93, 64, 93, 255], \
List[101, 75, 105, 255], List[100, 76, 111, 255], List[107, 80, 99, 255], \
List[102, 77, 103, 255], List[94, 71, 113, 255], List[94, 69, 113, 255], \
List[94, 73, 112, 255], List[100, 77, 107, 255], List[107, 80, 101, 255]]], \
\\\"UnsignedInteger8\\\"], List[List[0, 43.`], List[75.`, 0]], List[0, 255], \
Rule[ColorFunction, RGBColor], Rule[ImageResolution, List[72, 72]]], \
BoxForm`ImageTag[\\\"Byte\\\", Rule[ColorSpace, \\\"RGB\\\"], \
Rule[Interleaving, True], Rule[MetaInformation, \
Association[Rule[\\\"Exif\\\", Association[Rule[\\\"ImageWidth\\\", 1200], \
Rule[\\\"ImageLength\\\", 680], Rule[\\\"XResolution\\\", 72], \
Rule[\\\"YResolution\\\", 72], Rule[\\\"ResolutionUnit\\\", \\\"Inch\\\"], \
Rule[\\\"Software\\\", \\\"Created with the Wolfram Language : \
www.wolfram.com\\\"], Rule[\\\"DateTime\\\", DateObject[List[2022, 12, 6, 13, \
37, 44.`], \\\"Instant\\\", \\\"Gregorian\\\", -5.`]], \
Rule[\\\"TimeZoneOffset\\\", -5]]], Rule[\\\"Comments\\\", \
Association[Rule[\\\"Software\\\", \\\"Created with the Wolfram Language : \
www.wolfram.com\\\"], Rule[\\\"Creation Time\\\", DateObject[List[2022, 12, \
6, 13, 37, 44.`], \\\"Instant\\\"]]]]]]], Rule[Selectable, False]], \
Rule[DefaultBaseStyle, \\\"ImageGraphics\\\"], Rule[ImageSizeRaw, List[75.`, \
43.`]], Rule[PlotRange, List[List[0, 75.`], List[0, 43.`]]]]}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"dispLeft\\\\\\\"\\\", \\\"\[Rule]\\\", \
GraphicsBox[TagBox[RasterBox[NumericArray[List[List[0.4704400599002838`, \
0.47005876898765564`, 0.46974480152130127`, 0.4694308638572693`, \
0.46653226017951965`, 0.4811667501926422`, 0.42532920837402344`, \
0.09398340433835983`, 0.15519116818904877`, 0.8271983861923218`, \
1.0353487730026245`, 0.9907041788101196`, 0.9828400611877441`, \
1.0748735666275024`, 0.4456064701080322`, -0.00039823554106988013`, \
0.4551951587200165`, 1.091181993484497`, 0.737901508808136`, \
0.31256628036499023`, 0.6669732332229614`, 0.20347711443901062`, \
0.14268793165683746`, 0.18888993561267853`, 0.17939718067646027`, \
0.1809358447790146`, 0.17709025740623474`, 0.1686510443687439`, \
0.17604950070381165`, 0.16282473504543304`, 0.16396278142929077`, \
0.16375328600406647`, 0.16372373700141907`, 0.1637241244316101`, \
0.16384358704090118`, 0.16170062124729156`, 0.1724807322025299`, \
0.15265320241451263`, 0.06437355279922485`, 0.3593635559082031`, \
1.0033297538757324`, 1.00071120262146`, 0.9986035823822021`, 1.`, 1.`, 1.`, \
1.`, 0.9985071420669556`, 1.0019094944000244`, 0.998567521572113`, \
0.33774271607398987`, 0.07811184227466583`, 0.11985115706920624`, \
0.14047645032405853`, 0.14640837907791138`, 0.14591839909553528`, \
0.14647835493087769`, 0.14663466811180115`, 0.16937126219272614`, \
0.1744862198829651`, 0.1739063262939453`, 0.17469479143619537`, \
0.17547915875911713`, 0.17626191675662994`, 0.17705869674682617`, \
0.17790253460407257`, 0.17851518094539642`, 0.1790771335363388`, \
0.17986993491649628`, 0.18099181354045868`, 0.1817663311958313`, \
0.18253621459007263`, 0.18326009809970856`, 0.18418096005916595`, \
0.18511748313903809`], List[1.0693483352661133`, 1.069398283958435`, \
1.06943941116333`, 1.069480538368225`, 1.0675281286239624`, \
1.079437017440796`, 1.0349831581115723`, 0.7618527412414551`, \
0.8618432879447937`, 1.0439832210540771`, 0.990635871887207`, \
1.0012173652648926`, 0.9958627820014954`, 1.018052101135254`, \
0.8677932620048523`, 0.7527400851249695`, 0.9920636415481567`, \
1.0215497016906738`, 0.9750800132751465`, 0.572942316532135`, \
0.3370801508426666`, 0.37417078018188477`, 0.15389376878738403`, \
0.08073566108942032`, 0.09541461616754532`, 0.08785906434059143`, \
0.10589843988418579`, 0.1456729918718338`, 0.11072465777397156`, \
0.1730993688106537`, 0.16874735057353973`, 0.17151367664337158`, \
0.171773761510849`, 0.17201361060142517`, 0.17065547406673431`, \
0.18084682524204254`, 0.09951290488243103`, 0.444230318069458`, \
0.8213492035865784`, 0.9483218789100647`, 1.0247939825057983`, \
0.9941076636314392`, 1.000182867050171`, 1.`, 1.`, 1.`, 1.`, \
0.9993314743041992`, 1.004056692123413`, 0.9854281544685364`, \
0.7707158327102661`, 0.7839474081993103`, 0.7972568273544312`, \
0.3357352018356323`, 0.24775591492652893`, 0.27017247676849365`, \
0.26671236753463745`, 0.2680227756500244`, 0.18398872017860413`, \
0.16888393461704254`, 0.17354798316955566`, 0.17348723113536835`, \
0.17437610030174255`, 0.17492501437664032`, 0.17551591992378235`, \
0.17624537646770477`, 0.17706726491451263`, 0.1778678148984909`, \
0.17864149808883667`, 0.17938300967216492`, 0.18017806112766266`, \
0.18101520836353302`, 0.1820664256811142`, 0.1830451786518097`, \
0.18376216292381287`], List[0.9841064214706421`, 0.9840949773788452`, \
0.9840855598449707`, 0.9840761423110962`, 0.9845282435417175`, \
0.9817712903022766`, 0.9920629262924194`, 1.0552929639816284`, \
1.032160758972168`, 0.9898770451545715`, 1.0021555423736572`, \
0.9997209906578064`, 1.0009609460830688`, 0.9958070516586304`, \
1.030709147453308`, 1.0574243068695068`, 1.0019773244857788`, \
0.9919009208679199`, 1.0193262100219727`, 0.9973695278167725`, \
0.9707499742507935`, 1.0298843383789062`, 0.7877518534660339`, \
0.5143834352493286`, 0.5607091784477234`, 0.5740634202957153`, \
0.4731738567352295`, 0.25542405247688293`, 0.4461318850517273`, \
0.10593639314174652`, 0.131131112575531`, 0.1192546859383583`, \
0.12043968588113785`, 0.11940565705299377`, 0.1253601610660553`, \
0.15349359810352325`, 0.14514362812042236`, 0.7964322566986084`, \
1.0990732908248901`, 0.9985391497612`, 0.9942671656608582`, \
1.0013620853424072`, 0.9999580979347229`, 1.`, 1.`, 1.`, 1.`, \
1.000154972076416`, 0.999061644077301`, 1.0033692121505737`, \
1.0531351566314697`, 1.0495986938476562`, 1.0506089925765991`, \
1.0157595872879028`, 1.00913667678833`, 1.0108108520507812`, \
1.006071925163269`, 1.0365095138549805`, 0.2865320146083832`, \
0.14071905612945557`, 0.17759445309638977`, 0.1722436100244522`, \
0.1728784143924713`, 0.17371436953544617`, 0.17438910901546478`, \
0.1749141812324524`, 0.17574425041675568`, 0.17650996148586273`, \
0.17729201912879944`, 0.17808687686920166`, 0.17886307835578918`, \
0.1799454540014267`, 0.18073670566082`, 0.1814454197883606`, \
0.1824752539396286`], List[1.`, 1.`, 1.`, 1.`, 0.9999224543571472`, \
1.0003821849822998`, 0.9986606240272522`, 0.9881340265274048`, \
0.9917259812355042`, 1.000710129737854`, 0.9998425245285034`, 1.`, \
0.9997876882553101`, 1.0009264945983887`, 0.9931886792182922`, \
0.9874199032783508`, 0.9973633289337158`, 1.001638650894165`, \
0.9957394599914551`, 1.0000337362289429`, 1.0074069499969482`, \
0.9955843091011047`, 1.0353437662124634`, 1.0799862146377563`, \
1.0704339742660522`, 1.0830252170562744`, 1.0328654050827026`, \
0.924543559551239`, 1.010224461555481`, 0.8901723623275757`, \
0.6690664291381836`, 0.2858865261077881`, 0.34035348892211914`, \
0.3335232734680176`, 0.3298095762729645`, 0.13701127469539642`, \
0.6888186931610107`, 1.0428271293640137`, 0.9770959615707397`, \
0.9964728355407715`, 1.000839114189148`, 0.9998071193695068`, 1.`, 1.`, 1.`, \
1.`, 1.`, 0.9999712705612183`, 1.00014328956604`, 0.9995091557502747`, \
0.9894980192184448`, 0.9888998866081238`, 0.9888288974761963`, \
0.9975880980491638`, 0.9992630481719971`, 0.9972990155220032`, \
1.0019246339797974`, 0.981993556022644`, 0.2655068635940552`, \
0.14444833993911743`, 0.17581059038639069`, 0.1711723804473877`, \
0.17171905934810638`, 0.1724860966205597`, 0.17336279153823853`, \
0.17393051087856293`, 0.17459402978420258`, 0.17540258169174194`, \
0.17619666457176208`, 0.17691229283809662`, 0.17798249423503876`, \
0.17877762019634247`, 0.17951662838459015`, 0.18036164343357086`, \
0.1814279407262802`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999922513961792`, 1.0000338554382324`, \
0.9997451901435852`, 0.9992400407791138`, 1.0010267496109009`, \
0.9913653135299683`, 0.9817109107971191`, 0.9838241338729858`, \
0.9807793498039246`, 0.9930427074432373`, 1.019521713256836`, \
0.9964733123779297`, 1.0370782613754272`, 1.037653923034668`, \
1.0449767112731934`, 1.0416918992996216`, 1.0663280487060547`, \
0.9611340761184692`, 0.41213908791542053`, 0.9480203986167908`, \
0.9716963171958923`, 1.0027341842651367`, 0.998832106590271`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999998807907104`, 0.9999985098838806`, \
1.0000088214874268`, 0.9996536374092102`, 0.9995859861373901`, \
0.9940714240074158`, 1.0209550857543945`, 0.8763701915740967`, \
0.2199285626411438`, 0.15431304275989532`, 0.17321118712425232`, \
0.17006270587444305`, 0.1705932319164276`, 0.17136824131011963`, \
0.17205338180065155`, 0.1726168692111969`, 0.17347154021263123`, \
0.17423462867736816`, 0.17500899732112885`, 0.17580729722976685`, \
0.17654238641262054`, 0.1776331663131714`, 0.1783463954925537`, \
0.17937152087688446`, 0.1801510900259018`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 0.9999493360519409`, 1.000327706336975`, \
0.9986207485198975`, 0.9949353337287903`, 0.9981253147125244`, \
0.9925699830055237`, 0.9920330047607422`, 0.9902761578559875`, \
0.9883601665496826`, 1.0147520303726196`, 0.8948888778686523`, \
0.48657914996147156`, 0.9898499846458435`, 0.9684509634971619`, \
1.003265142440796`, 0.9992355704307556`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9909432530403137`, \
1.0376019477844238`, 0.7826676964759827`, 0.17916126549243927`, \
0.1631016731262207`, 0.1707979291677475`, 0.1687440127134323`, \
0.1693696677684784`, 0.17020434141159058`, 0.17099031805992126`, \
0.17152182757854462`, 0.17228011786937714`, 0.17307288944721222`, \
0.17386628687381744`, 0.17460410296916962`, 0.17552843689918518`, \
0.17646612226963043`, 0.17724654078483582`, 0.17828655242919922`, \
0.17908139526844025`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.997705340385437`, 1.0250924825668335`, \
0.9014089107513428`, 0.45673444867134094`, 0.9938367605209351`, \
0.9734447598457336`, 1.0022913217544556`, 0.999360203742981`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9827183485031128`, 1.0755537748336792`, 0.5628365278244019`, \
0.08850740641355515`, 0.18819379806518555`, 0.17348365485668182`, \
0.17087197303771973`, 0.1675351858139038`, 0.16915985941886902`, \
0.16985216736793518`, 0.17048481106758118`, 0.17111815512180328`, \
0.1719198226928711`, 0.1726970672607422`, 0.17346665263175964`, \
0.17451108992099762`, 0.17523567378520966`, 0.17628343403339386`, \
0.1770980954170227`, 0.17785075306892395`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9980125427246094`, 1.0210952758789062`, 0.9153728485107422`, \
0.5505790710449219`, 0.9919295907020569`, 0.977175772190094`, \
1.002056360244751`, 0.9994398951530457`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.983310341835022`, \
1.072711706161499`, 0.5793043971061707`, 0.0771978497505188`, \
0.16915124654769897`, 0.1356240063905716`, 0.15224406123161316`, \
0.17061452567577362`, 0.1672375202178955`, 0.1686624139547348`, \
0.1694696992635727`, 0.16994647681713104`, 0.17077067494392395`, \
0.17152802646160126`, 0.1724066436290741`, 0.17337356507778168`, \
0.17420347034931183`, 0.17517997324466705`, 0.17593270540237427`, \
0.17671935260295868`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9989582300186157`, 1.006163477897644`, \
0.9645944237709045`, 0.8821150064468384`, 0.9675596356391907`, \
0.9985496401786804`, 0.9999477863311768`, 0.9998928308486938`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9938982129096985`, 1.026601791381836`, 0.8461172580718994`, \
0.6673927903175354`, 0.6807510852813721`, 0.7876016497612`, \
0.33486196398735046`, 0.12651054561138153`, 0.17497004568576813`, \
0.16748833656311035`, 0.16830945014953613`, 0.16901563107967377`, \
0.16957823932170868`, 0.17034633457660675`, 0.17142821848392487`, \
0.17216449975967407`, 0.1730165183544159`, 0.1740121990442276`, \
0.17477229237556458`, 0.17556945979595184`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.991352379322052`, 1.0374008417129517`, 0.697871208190918`, \
0.8660392761230469`, 1.0027927160263062`, 1.0025506019592285`, \
0.9991338849067688`, 1.000023603439331`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9840055108070374`, \
1.0697340965270996`, 0.5963727831840515`, 0.1406029760837555`, \
0.1259005218744278`, 0.526795506477356`, 0.4544622600078583`, \
0.09731858968734741`, 0.17675259709358215`, 0.16632433235645294`, \
0.16714242100715637`, 0.16762259602546692`, 0.16838513314723969`, \
0.16937732696533203`, 0.17035382986068726`, 0.17076623439788818`, \
0.18460196256637573`, 0.1897560954093933`, 0.18954315781593323`, \
0.1907886564731598`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9847355484962463`, 1.0661211013793945`, \
0.4601794183254242`, 0.8532328009605408`, 1.0292937755584717`, \
0.9970360994338989`, 0.999939501285553`, 0.9999945759773254`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9820412397384644`, 1.0782893896102905`, 0.5477278828620911`, \
0.023627616465091705`, 0.06528111547231674`, 0.634458065032959`, \
0.4212649464607239`, 0.10384496301412582`, 0.17517374455928802`, \
0.16513387858867645`, 0.16594015061855316`, 0.16659414768218994`, \
0.16737404465675354`, 0.16784395277500153`, 0.17009301483631134`, \
0.16465452313423157`, 0.1100030168890953`, 0.09901624917984009`, \
0.10272791236639023`, 0.10314783453941345`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9861523509025574`, 1.059830665588379`, 0.5099867582321167`, \
0.8790268301963806`, 1.0284423828125`, 0.9970759749412537`, \
1.0000227689743042`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 0.9931738972663879`, 1.0297605991363525`, \
0.8288450241088867`, 0.620050311088562`, 0.6727352738380432`, \
1.0703767538070679`, 0.3673728406429291`, 0.1153363361954689`, \
0.17408813536167145`, 0.16428852081298828`, 0.16507549583911896`, \
0.16592904925346375`, 0.16671355068683624`, 0.1689930111169815`, \
0.1676197499036789`, 0.17393571138381958`, 0.5909867286682129`, \
0.7118844389915466`, 0.6838995218276978`, 0.6895326972007751`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 0.985053300857544`, 1.0651185512542725`, 0.4704556465148926`, \
0.8513592481613159`, 1.0319263935089111`, 0.9965348243713379`, \
0.999995231628418`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 0.9854995012283325`, 1.063220500946045`, \
0.636099100112915`, 0.1964794248342514`, 0.30329054594039917`, \
1.0142364501953125`, 0.3764738440513611`, 0.11192575097084045`, \
0.17328859865665436`, 0.1635446846485138`, 0.1643640100955963`, \
0.16492462158203125`, 0.16569437086582184`, 0.17522898316383362`, \
0.13579535484313965`, 0.3236762285232544`, 1.0073941946029663`, \
1.0774461030960083`, 1.0588035583496094`, 1.0638171434402466`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9999824166297913`, 0.9910858273506165`, 1.0390998125076294`, \
0.6793932914733887`, 0.9031102657318115`, 1.0201817750930786`, \
0.9976797699928284`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9829095005989075`, 1.0745232105255127`, \
0.5709426403045654`, 0.0535084493458271`, 0.178592249751091`, \
1.0145761966705322`, 0.37658992409706116`, 0.11089217662811279`, \
0.17254820466041565`, 0.1628374457359314`, 0.1632605493068695`, \
0.1637767106294632`, 0.16457945108413696`, 0.16447816789150238`, \
0.18331745266914368`, 0.09110158681869507`, 0.767985999584198`, \
1.036207675933838`, 0.9743090867996216`, 0.9852927923202515`], List[1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9999131560325623`, 0.9994672536849976`, 1.0032246112823486`, \
0.9581608176231384`, 0.9645971059799194`, 1.0051225423812866`, \
0.9990242123603821`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9826264977455139`, 1.075494647026062`, \
0.5661576390266418`, 0.02784571796655655`, 0.18162676692008972`, \
1.0210808515548706`, 0.3745613992214203`, 0.11018379032611847`, \
0.17185218632221222`, 0.16171231865882874`, 0.16222725808620453`, \
0.16308945417404175`, 0.16385944187641144`, 0.1648474782705307`, \
0.17616209387779236`, 0.118262380361557`, 0.8011401295661926`, \
1.0466580390930176`, 0.9896829724311829`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.0004205703735352`, \
0.9960365295410156`, 1.0178792476654053`, 0.9634484648704529`, \
0.9598590135574341`, 1.006296157836914`, 0.9990102052688599`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9970461130142212`, 1.0070669651031494`, 0.949865460395813`, \
0.7330359816551208`, 0.24879300594329834`, 1.0061893463134766`, \
0.3879266381263733`, 0.1218927875161171`, 0.18268287181854248`, \
0.1728985458612442`, 0.17371916770935059`, 0.17449511587619781`, \
0.17505879700183868`, 0.17703238129615784`, 0.18104024231433868`, \
0.11089526861906052`, 0.7967960238456726`, 1.0477014780044556`, \
0.9895094633102417`, 0.9999999403953552`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9931212067604065`, \
1.0407286882400513`, 0.8256708383560181`, 0.7246715426445007`, \
1.0317103862762451`, 0.9935866594314575`, 0.999549925327301`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.000737190246582`, 0.990874171257019`, 1.03887140750885`, \
0.9531875848770142`, 0.2693015933036804`, 0.9889839887619019`, \
0.3416355550289154`, 0.05025036260485649`, 0.11603042483329773`, \
0.10559491068124771`, 0.10642019659280777`, 0.10711183398962021`, \
0.1091109961271286`, 0.10311044752597809`, 0.16549578309059143`, \
0.13268612325191498`, 0.7994159460067749`, 1.0468891859054565`, \
0.9896871447563171`, 1.000000238418579`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9982655048370361`, \
1.0104652643203735`, 0.955062210559845`, 0.9376866221427917`, \
1.0137170553207397`, 0.9975236058235168`, 1.0000401735305786`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
0.9998459219932556`, 0.998780369758606`, 0.9977207779884338`, \
0.984434962272644`, 0.5692891478538513`, 0.9801318645477295`, \
0.5605207085609436`, 0.3626096844673157`, 0.40678590536117554`, \
0.3996666967868805`, 0.3999601900577545`, 0.40054091811180115`, \
0.3950631618499756`, 0.42768505215644836`, 0.2212117612361908`, \
0.015051656402647495`, 0.7834373712539673`, 1.0515481233596802`, \
0.9886662364006042`, 0.9999991655349731`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.0004421472549438`, \
0.9973331689834595`, 1.011450171470642`, 1.0159274339675903`, \
0.9965441226959229`, 1.0006253719329834`, 0.9999908804893494`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.0004714727401733`, 0.9981734752655029`, 1.0078548192977905`, \
1.0537991523742676`, 1.000140905380249`, 1.045894742012024`, \
1.0660207271575928`, 1.0614469051361084`, 1.0621813535690308`, \
1.0621423721313477`, 1.0620908737182617`, 1.0555325746536255`, \
1.0904004573822021`, 0.851772129535675`, 0.6805022358894348`, \
0.9367244243621826`, 1.015661597251892`, 0.9965582489967346`, \
0.9999991059303284`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999470710754395`, 1.000316858291626`, \
0.9986410737037659`, 0.9980056881904602`, 1.0003440380096436`, \
0.9999356269836426`, 0.9999992251396179`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 0.9999476075172424`, \
1.000083088874817`, 0.9996382594108582`, 0.9896885752677917`, \
0.9995783567428589`, 0.9896865487098694`, 0.9850539565086365`, \
0.9860897064208984`, 0.9859232902526855`, 0.9859314560890198`, \
0.9859445691108704`, 0.9873761534690857`, 0.9797724485397339`, \
1.0318061113357544`, 1.0691053867340088`, 1.0136682987213135`, \
0.9966152906417847`, 1.0007438659667969`, 1.000000238418579`], List[1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 0.9997375011444092`, 1.0011457204818726`, \
0.9915745854377747`, 0.9844843745231628`, 0.9968453645706177`, \
1.0007729530334473`, 0.9998301267623901`, 0.9999999403953552`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], \
List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`], \
List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`], List[1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`, \
1.`, 1.`, 1.`, 1.`, 1.`, 1.`, 1.`]], \\\"Real32\\\"], List[List[0, 43.`], \
List[75.`, 0]], List[0.`, 1.`], Rule[ColorFunction, GrayLevel]], \
BoxForm`ImageTag[\\\"Real32\\\", Rule[ColorSpace, \\\"Grayscale\\\"], \
Rule[Interleaving, None]], Rule[Selectable, False]], Rule[DefaultBaseStyle, \
\\\"ImageGraphics\\\"], Rule[ImageSizeRaw, List[75.`, 43.`]], Rule[PlotRange, \
List[List[0, 75.`], List[0, 43.`]]]]}]}], \\\"\[RightAssociation]\\\"}], \
\\\",\\\", RowBox[{\\\"TargetDevice\\\", \\\"\[Rule]\\\", \\\"\\\\\\\"GPU\\\\\
\\\"\\\"}]}], \\\"]\\\"}]\\).\"", 2, 68, 13, 29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879696752070698*^9, 3.880400275467451*^9, 
  3.880409159331646*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[68]:=",ExpressionUUID->"00ceb31c-99e2-47ea-9d4f-0e69f5fb5290"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"ImageData\\\", \\\"::\\\
\", \\\"imginv\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 68, 14, 29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879696752070698*^9, 3.880400275467451*^9, 
  3.880409159368843*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[68]:=",ExpressionUUID->"24dd8a6a-95c4-4750-9452-2ed50eedddf2"],

Cell[BoxData[
 TemplateBox[{
  "MeanAbsoluteLossLayer", "invindata2", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array\\\\\\\"\\\"}]\\) (or a list of \
these).\"", 2, 68, 15, 29513035095376661090, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879696752070698*^9, 3.880400275467451*^9, 
  3.880409159373859*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[68]:=",ExpressionUUID->"8b501d48-724c-496b-b587-bdb25d2d33d9"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"MeanAbsoluteLossLayer\\\
\", \\\"::\\\", \\\"invindata2\\\"}], \\\"MessageName\\\"]\\) will be \
suppressed during this calculation.\"", 2, 68, 16, 29513035095376661090, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.879696752070698*^9, 3.880400275467451*^9, 
  3.8804091593780203`*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[68]:=",ExpressionUUID->"bfc38b2b-788c-4a9a-afb3-0b67c05612d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Mean", "[", "EPE", "]"}], "\[IndentingNewLine]", 
 RowBox[{"StandardDeviation", "[", "EPE", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.879343338992812*^9, 3.8793433576211348`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"095d721a-34f0-4f6e-b947-eb19ecfa7ecc"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.8796967521265297`*^9, 3.880400275624302*^9, 
  3.880409159386443*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"0af01e8f-3fa3-4ec4-ab74-0249602f88a4"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8796967521265297`*^9, 3.880400275624302*^9, 
  3.880409159387596*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"57780221-b406-4637-9550-64731d803bc2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->"MultipurposeBar",
WindowSize->{1170, 885},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 pour Mac OS X ARM (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"f38c7b11-3725-48f0-bca5-3090d3386f7c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 727, 11, 98, "Title",ExpressionUUID->"99f5c601-8d2c-4e7f-baeb-bf883642b6a9",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1332, 37, 897, 20, 152, "Input",ExpressionUUID->"b9585164-08e1-4716-b822-e1cad80cff9c",
 InitializationCell->True],
Cell[2232, 59, 493, 7, 34, "Output",ExpressionUUID->"53ac1fb3-166e-48ce-a038-43335802a59e"],
Cell[2728, 68, 548, 9, 24, "Print",ExpressionUUID->"7615fac6-af44-4d77-aca8-dcbc5a7a2e09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3313, 82, 354, 6, 67, "Section",ExpressionUUID->"25971ac1-6f98-42a4-9aaa-cd3d2198b923",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[3692, 92, 288, 5, 54, "Subsection",ExpressionUUID->"a4f3daa2-16c7-4e19-92ef-a5166287ce88",
 InitializationCell->True],
Cell[3983, 99, 3470, 78, 257, "Input",ExpressionUUID->"1d6510ca-0df7-4a3d-bee2-2789b3b811c8",
 InitializationCell->True],
Cell[7456, 179, 1279, 31, 152, "Input",ExpressionUUID->"af207e7c-1414-4755-8284-98286455ee15",
 InitializationCell->True],
Cell[8738, 212, 2662, 64, 320, "Input",ExpressionUUID->"ed8c6e29-6197-4ea6-973d-85ba6b456b0c",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[11437, 281, 289, 5, 54, "Subsection",ExpressionUUID->"c0171cd1-d5e1-491b-85de-8149cc85f887",
 InitializationCell->True],
Cell[11729, 288, 1943, 52, 194, "Input",ExpressionUUID->"6a2f54aa-14cf-4cf0-bb6f-affbcedaba7d",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13721, 346, 181, 4, 67, "Section",ExpressionUUID->"52c2a673-9312-4a4b-a7d1-55c1190a1687",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[13927, 354, 859, 18, 110, "Input",ExpressionUUID->"03a4848f-0df1-43b0-bd4e-6f5d3af09d82",
 InitializationCell->True],
Cell[14789, 374, 479, 8, 34, "Output",ExpressionUUID->"97c6d52e-bf5e-40a3-9cfa-3ba70f65a5ff"],
Cell[15271, 384, 743, 13, 77, "Output",ExpressionUUID->"4a4bcd1d-bbf1-4480-9df7-84556a545531"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16051, 402, 698, 17, 110, "Input",ExpressionUUID->"f9fd1db4-9e4e-467d-a0ef-7762621114e0",
 InitializationCell->True],
Cell[16752, 421, 454, 7, 34, "Output",ExpressionUUID->"113b7446-ea5b-4605-9863-2535fb1205fe"],
Cell[17209, 430, 83426, 1393, 167, "Output",ExpressionUUID->"f043c189-0a71-4361-97d0-176e547a1e16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100672, 1828, 1237, 33, 215, "Input",ExpressionUUID->"7c1c9bee-91cd-451d-b708-debb8b687693",
 InitializationCell->True],
Cell[101912, 1863, 454, 7, 34, "Output",ExpressionUUID->"d5505e61-93e4-4469-9bf6-16fbddd53f74"],
Cell[102369, 1872, 455, 7, 34, "Output",ExpressionUUID->"1bddbd3b-62f3-4baa-974f-302f91e2117c"],
Cell[102827, 1881, 453, 7, 34, "Output",ExpressionUUID->"647d08da-4b2c-4e40-a031-4c58267febdc"]
}, Open  ]],
Cell[103295, 1891, 898, 22, 131, "Input",ExpressionUUID->"1c4db715-06d2-411a-981a-4b2c125dfdd2",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[104230, 1918, 324, 6, 67, "Section",ExpressionUUID->"6b01d122-f81e-4f7f-91b3-759543bfefe7",
 InitializationCell->True],
Cell[104557, 1926, 5397, 149, 236, "Input",ExpressionUUID->"8be95233-07a5-4816-9998-0bbc85212751",
 InitializationCell->True],
Cell[109957, 2077, 350, 8, 58, "Text",ExpressionUUID->"4b51f99a-ad1d-4010-85a2-c54f3ffa67b1",
 InitializationCell->True],
Cell[110310, 2087, 156, 3, 35, "Text",ExpressionUUID->"ce06d4f2-e720-4296-9e5d-e2764a39e192"],
Cell[110469, 2092, 4976, 128, 362, "Input",ExpressionUUID->"311b2187-2984-4f7b-9275-0a37879cbc8a",
 InitializationCell->True],
Cell[115448, 2222, 157, 3, 35, "Text",ExpressionUUID->"1060a44f-27cf-4ba1-975b-d3bc8c6f1712"],
Cell[115608, 2227, 7686, 152, 950, "Input",ExpressionUUID->"0458114c-9c5f-44e3-9e3e-c7e487fcfba9",
 InitializationCell->True],
Cell[123297, 2381, 168, 3, 35, "Text",ExpressionUUID->"951b22c8-5aad-4ebe-a999-70ffd3bdec8e"],
Cell[123468, 2386, 8076, 175, 1307, "Input",ExpressionUUID->"e57c5cde-5171-4d7d-926d-4a1c5262263c",
 InitializationCell->True],
Cell[131547, 2563, 15021, 257, 467, "Input",ExpressionUUID->"5df1098f-6005-464a-86df-a113e6202183",
 InitializationCell->True],
Cell[146571, 2822, 639, 13, 46, "Input",ExpressionUUID->"4f0c0b43-2181-4a15-ac8a-6dd2fae9ace2",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[147235, 2839, 368, 6, 46, "Input",ExpressionUUID->"c4b54428-c271-48ef-8b99-4682a5cc9b7b",
 InitializationCell->True],
Cell[147606, 2847, 560018, 10509, 65, "Output",ExpressionUUID->"74b80f11-b76b-40b8-a60f-cdbd4874d49a"]
}, Open  ]],
Cell[707639, 13359, 55379, 765, 278, "Input",ExpressionUUID->"b81b638a-04f2-467d-b18c-b77d42131f74",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[763043, 14128, 860, 22, 68, "Input",ExpressionUUID->"34996a95-dfb2-4754-b231-43aaa57bc6fa",
 InitializationCell->True],
Cell[763906, 14152, 381, 8, 28, "Message",ExpressionUUID->"2f33ad67-59c0-4a45-b606-0175ba932613"],
Cell[764290, 14162, 390, 8, 28, "Message",ExpressionUUID->"268b4ad5-690d-45cd-a7a0-b2b72305bb36"],
Cell[764683, 14172, 541, 11, 28, "Message",ExpressionUUID->"f312b967-4a62-4168-8d94-4b2670bc3577"],
Cell[765227, 14185, 204, 3, 34, "Output",ExpressionUUID->"494292bc-aee7-4558-90c7-86a2658d10f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[765468, 14193, 585, 14, 89, "Input",ExpressionUUID->"c08eb362-196b-4211-b021-5cef8341eb8a",
 InitializationCell->True],
Cell[766056, 14209, 223, 4, 34, "Output",ExpressionUUID->"098c23a5-f7e8-42ed-8fe2-14c65d2afd80"],
Cell[766282, 14215, 86858, 1450, 128, "Output",ExpressionUUID->"224b8d28-e07b-4ed1-88de-95d6db019756"]
}, Open  ]],
Cell[CellGroupData[{
Cell[853177, 15670, 533, 14, 89, "Input",ExpressionUUID->"c19490a4-6bd2-4282-bcec-95b36fa19546",
 InitializationCell->True],
Cell[853713, 15686, 24767, 410, 85, "Output",ExpressionUUID->"ab77c0b4-df4e-4c46-8589-aa5e27e710fa"],
Cell[878483, 16098, 91854, 1533, 134, "Output",ExpressionUUID->"736a0936-c20a-4d96-b080-732171de9123"]
}, Open  ]],
Cell[CellGroupData[{
Cell[970374, 17636, 775, 21, 46, "Input",ExpressionUUID->"4547eb21-bf03-4ae1-b845-ca9faf416ea8",
 InitializationCell->True],
Cell[971152, 17659, 204481, 2719, 105, "Message",ExpressionUUID->"2b7089a5-5aef-4207-b19d-b9d0d26d417b"],
Cell[1175636, 20380, 583, 12, 28, "Message",ExpressionUUID->"e4bf1708-8298-4571-8ef3-b1a1c3b8b667"],
Cell[1176222, 20394, 202295, 2635, 105, "Message",ExpressionUUID->"d3c01d3b-c277-4551-a302-864bf05b298d"],
Cell[1378520, 23031, 585, 12, 28, "Message",ExpressionUUID->"e91ac8f5-a89c-4154-bada-21da1c4bdce1"],
Cell[1379108, 23045, 198087, 2600, 105, "Message",ExpressionUUID->"00ceb31c-99e2-47ea-9d4f-0e69f5fb5290"],
Cell[1577198, 25647, 531, 11, 28, "Message",ExpressionUUID->"24dd8a6a-95c4-4750-9452-2ed50eedddf2"],
Cell[1577732, 25660, 583, 12, 28, "Message",ExpressionUUID->"8b501d48-724c-496b-b587-bdb25d2d33d9"],
Cell[1578318, 25674, 553, 12, 28, "Message",ExpressionUUID->"bfc38b2b-788c-4a9a-afb3-0b67c05612d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1578908, 25691, 308, 5, 68, "Input",ExpressionUUID->"095d721a-34f0-4f6e-b947-eb19ecfa7ecc",
 InitializationCell->True],
Cell[1579219, 25698, 204, 3, 34, "Output",ExpressionUUID->"0af01e8f-3fa3-4ec4-ab74-0249602f88a4"],
Cell[1579426, 25703, 198, 3, 34, "Output",ExpressionUUID->"57780221-b406-4637-9550-64731d803bc2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

